/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-01-17 08:48:17.563647
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((1.0)*x5);
x13=((1.0)*x6);
x14=((0.18613)*x0);
x15=((0.159)*x5);
x16=((0.001)*x6);
x17=((0.454)*x1);
x18=((0.035)*x9);
x19=((1.0)*x9);
x20=((0.159)*x6);
x21=((1.0)*x7);
x22=((0.4195)*x9);
x23=((0.4195)*x0);
x24=((0.001)*x9);
x25=((1.0)*x0);
x26=((0.001)*x0);
x27=((0.18613)*x9);
x28=((0.18613)*x6);
x29=((0.159)*x7);
x30=(x1*x2);
x31=(x3*x4);
x32=(x10*x8);
x33=(x2*x3);
x34=(x1*x4);
x35=(x6*x7);
x36=(x19*x8);
x37=((1.0)*x31);
x38=(x0*x34);
x39=(x33+x34);
x40=((((-1.0)*x37))+x30);
x41=((((-1.0)*x30))+x37);
x42=(x39*x7);
x43=(x40*x6);
x44=((((-1.0)*x25*x31))+((x0*x30)));
x45=(((x30*x9))+(((-1.0)*x19*x31)));
x46=(x43*x5);
x47=(x25*(((((-1.0)*x34))+(((-1.0)*x33)))));
x48=(x25*((x33+x34)));
x49=(x19*(((((-1.0)*x34))+(((-1.0)*x33)))));
x50=(x19*((x33+x34)));
x51=(x44*x7);
x52=(x45*x7);
x53=(x49*x6);
x54=(x50*x8);
x55=(x48*x8);
x56=(x55+(((-1.0)*x13*x9)));
x57=((((-1.0)*x36))+((x47*x6)));
x58=(((x0*x8))+x53);
x59=(((x0*x6))+x54);
x60=(x5*x58);
x61=(x5*x57);
eerot[0]=(((x44*x5))+((x7*((x36+(((-1.0)*x13*x47)))))));
eerot[1]=(((x11*x56))+((x10*(((((-1.0)*x12*x57))+(((-1.0)*x21*x44)))))));
eerot[2]=(((x11*((x51+x61))))+((x10*x56)));
IkReal x62=((1.0)*x9);
IkReal x63=((1.0)*x30);
eetrans[0]=((((-1.0)*x16*x62))+(((0.025)*x0))+((x0*x17))+((x7*((((x28*x47))+(((-0.18613)*x8*x9))))))+((x23*x31))+((x8*((((x26*x33))+((x26*x34))))))+((x5*(((((-1.0)*x14*x63))+((x14*x31))))))+(((0.035)*x38))+x24+(((-1.0)*x23*x63))+((x11*((((x29*x44))+((x15*x57))))))+(((0.035)*x0*x33))+((x10*(((((-1.0)*x20*x62))+(((0.159)*x55)))))));
eerot[3]=(((x7*(((((-1.0)*x25*x8))+(((-1.0)*x13*x49))))))+((x45*x5)));
eerot[4]=(((x11*x59))+((x10*(((((-1.0)*x12*x58))+(((-1.0)*x21*x45)))))));
eerot[5]=(((x11*((x52+x60))))+((x10*x59)));
IkReal x64=((1.0)*x30);
eetrans[1]=(((x5*((((x27*x31))+(((-1.0)*x27*x64))))))+((x11*((((x29*x45))+((x15*x58))))))+(((0.025)*x9))+((x0*x16))+((x18*x34))+((x18*x33))+(((-1.0)*x26))+((x22*x31))+((x7*((((x28*x49))+((x14*x8))))))+((x17*x9))+((x10*((((x0*x20))+(((0.159)*x54))))))+(((-1.0)*x22*x64))+((x8*((((x24*x34))+((x24*x33)))))));
eerot[6]=(((x35*x41))+((x39*x5)));
eerot[7]=(((x11*x41*x8))+((x10*(((((-1.0)*x12*x43))+(((-1.0)*x21*x39)))))));
eerot[8]=(((x32*x41))+((x11*((x46+x42)))));
eetrans[2]=((0.45)+((x11*((((x29*x39))+((x15*x43))))))+(((-0.035)*x30))+((x35*(((((0.18613)*x30))+(((-0.18613)*x31))))))+(((-0.4195)*x34))+(((-0.4195)*x33))+((x5*(((((-0.18613)*x33))+(((-0.18613)*x34))))))+((x8*(((((-0.001)*x30))+(((0.001)*x31))))))+(((0.035)*x31))+(((0.454)*x3))+((x32*(((((-0.159)*x30))+(((0.159)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j6,cj6,sj6,htj6,j6mul,j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j11,cj11,sj11,htj11,j11mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij11[2], _nj11;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j11=numeric_limits<IkReal>::quiet_NaN(); _ij11[0] = -1; _ij11[1] = -1; _nj11 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((-0.159)*r02))+px+(((0.18613)*r00)));
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=((((-0.159)*r12))+(((0.18613)*r10))+py);
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((-0.45)+(((-0.159)*r22))+pz+(((0.18613)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=((0.001)*r20);
IkReal x69=((0.001)*r02);
IkReal x70=((1.0)*rxp2_2);
IkReal x71=((0.002)*r21);
IkReal x72=((0.839)*npz);
IkReal x73=((0.00175)*r22);
IkReal x74=((7.0e-5)*r10);
IkReal x75=((5.0e-5)*r01);
IkReal x76=((0.05)*px);
IkReal x77=((0.020975)*r02);
IkReal x78=((0.07)*rxp2_1);
IkReal x79=((0.002)*npy);
IkReal x80=((1.0)*pp);
IkReal x81=((7.0e-5)*r22);
IkReal x82=((0.07)*rxp2_0);
IkReal x83=((5.0e-5)*r11);
IkReal x84=((0.05)*py);
IkReal x85=((7.0e-5)*r00);
IkReal x86=((0.020975)*r12);
IkReal x87=((0.004)*npx);
IkReal x88=((0.0001)*r00);
IkReal x89=((0.00014)*r11);
IkReal x90=((2.0)*rxp0_2);
IkReal x91=((0.002)*r00);
IkReal x92=((0.002)*r22);
IkReal x93=((0.002)*r10);
IkReal x94=((0.004)*r01);
IkReal x95=((4.0)*rxp1_2);
IkReal x96=((0.0035)*r20);
IkReal x97=((1.678)*npx);
IkReal x98=((0.00014)*r12);
IkReal x99=((0.14)*rxp0_1);
IkReal x100=((0.04195)*r00);
IkReal x101=((0.00014)*r20);
IkReal x102=((0.00014)*r02);
IkReal x103=((0.14)*rxp0_0);
IkReal x104=((0.04195)*r10);
IkReal x105=((0.28)*rxp1_0);
IkReal x106=((0.0839)*r11);
IkReal x107=((0.00028)*r21);
IkReal x108=((3.356)*npy);
IkReal x109=((0.007)*r21);
IkReal x110=((0.28)*rxp1_1);
IkReal x111=((0.0839)*r01);
IkReal x112=((0.001)*r12);
IkReal x113=((0.00014)*r01);
IkReal x114=((0.0001)*r10);
IkReal x115=((-0.001)*r12);
IkReal x116=((-0.004)*r11);
IkReal x117=((-0.002)*r10);
IkReal x118=((-0.002)*r21);
IkReal x119=((((-1.0)*x114))+x113);
IkReal x120=((0.02828575)+x74);
IkReal x121=((5.0e-5)+x84);
IkReal x122=((-5.0e-5)+x84);
IkReal x123=((0.02828575)+x75);
IkReal x124=((((-1.0)*x113))+(((-1.0)*x114)));
IkReal x125=(x68+x69);
IkReal x126=(x89+x87);
IkReal x127=(x90+x92);
IkReal x128=(x104+x102);
IkReal x129=(x77+x78);
IkReal x130=(x75+x74);
IkReal x131=(x100+x99);
IkReal x132=(x76+x80);
IkReal x133=(x82+x81);
IkReal x134=(x82+x85);
IkReal x135=(x81+x86);
IkReal x136=(x83+x85);
IkReal x137=(x108+x109);
IkReal x138=(x111+x110);
IkReal x139=(x97+x96);
IkReal x140=(x101+x103);
IkReal x141=(x79+x80);
IkReal x142=((0.02828575)+x73+x72);
IkReal x143=(x75+x73+x72);
IkReal x144=(x74+x73+x72);
IkReal x145=(x142+x79);
IkReal x146=(x131+x139);
op[0]=((((-1.0)*x70))+(((-1.0)*x125)));
op[1]=x115;
op[2]=x71;
op[3]=0;
op[4]=((((-1.0)*x70))+x68+(((-1.0)*x69)));
op[5]=x115;
op[6]=x115;
op[7]=((((-1.0)*x70))+x69+(((-1.0)*x68)));
op[8]=0;
op[9]=x71;
op[10]=x115;
op[11]=((((-1.0)*x70))+x125);
op[12]=((((-1.0)*x129))+x145+(((-1.0)*x130))+x76+(((-1.0)*x80)));
op[13]=(x133+x122+x85+(((-1.0)*x86))+(((-1.0)*x83)));
op[14]=(x126+(((-1.0)*x88)));
op[15]=x124;
op[16]=((((-1.0)*x141))+(((-1.0)*x129))+x143+x120+x76);
op[17]=(x133+x122+x83+(((-1.0)*x86))+(((-1.0)*x85)));
op[18]=(x134+x121+(((-1.0)*x135))+(((-1.0)*x83)));
op[19]=(x143+x120+x129+(((-1.0)*x132))+x79);
op[20]=x124;
op[21]=(x88+x87+(((-1.0)*x89)));
op[22]=(x121+(((-1.0)*x135))+x82+x83+(((-1.0)*x85)));
op[23]=((((-1.0)*x79))+x142+x129+(((-1.0)*x132))+(((-1.0)*x130)));
op[24]=(x91+x90+(((-1.0)*x92)));
op[25]=x93;
op[26]=((((-1.0)*x94))+(((-1.0)*x95)));
op[27]=x116;
op[28]=((((-1.0)*x127))+(((-1.0)*x91)));
op[29]=x117;
op[30]=x93;
op[31]=(x90+(((-1.0)*x91))+(((-1.0)*x92)));
op[32]=x116;
op[33]=(x94+(((-1.0)*x95)));
op[34]=x117;
op[35]=((((-1.0)*x127))+x91);
op[36]=(x131+(((-1.0)*x139))+(((-1.0)*x98)));
op[37]=((((-1.0)*x140))+x128);
op[38]=(x137+(((-1.0)*x138)));
op[39]=((((-1.0)*x106))+x105+x107);
op[40]=(x139+(((-1.0)*x131))+(((-1.0)*x98)));
op[41]=((((-1.0)*x104))+x140+x102);
op[42]=((((-1.0)*x103))+x128+x101);
op[43]=((((-1.0)*x146))+x98);
op[44]=((((-1.0)*x107))+(((-1.0)*x106))+x105);
op[45]=(x137+x138);
op[46]=((((-1.0)*x101))+(((-1.0)*x104))+x102+x103);
op[47]=(x146+x98);
op[48]=(rxp2_2+x125);
op[49]=x112;
op[50]=x118;
op[51]=0;
op[52]=(rxp2_2+x69+(((-1.0)*x68)));
op[53]=x112;
op[54]=x112;
op[55]=(rxp2_2+x68+(((-1.0)*x69)));
op[56]=0;
op[57]=x118;
op[58]=x112;
op[59]=(rxp2_2+(((-1.0)*x125)));
op[60]=((((-1.0)*x143))+x120+x129+x76+x79+(((-1.0)*x80)));
op[61]=(x122+(((-1.0)*x136))+(((-1.0)*x133))+x86);
op[62]=(x87+(((-1.0)*x89))+(((-1.0)*x88)));
op[63]=x119;
op[64]=((((-1.0)*x144))+(((-1.0)*x141))+x123+x129+x76);
op[65]=(x136+x122+(((-1.0)*x133))+x86);
op[66]=(x135+x121+(((-1.0)*x134))+(((-1.0)*x83)));
op[67]=((((-1.0)*x144))+(((-1.0)*x129))+x123+(((-1.0)*x132))+x79);
op[68]=x119;
op[69]=(x126+x88);
op[70]=(x135+x136+x121+(((-1.0)*x82)));
op[71]=((((-1.0)*x143))+(((-1.0)*x79))+(((-1.0)*x129))+x120+(((-1.0)*x132)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j10array[16], cj10array[16], sj10array[16], j11array[16], cj11array[16], sj11array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij10 = 0; ij10 < numroots; ij10 += 3)
{
IkReal htj10 = zeror[ij10+0], htj11 = zeror[ij10+1], htj6 = zeror[ij10+2];
if(isnan(htj10)||isnan(htj11)||isnan(htj6)){
continue;
}
j10array[numsolutions]=((2.0)*(atan(htj10)));
j11array[numsolutions]=((2.0)*(atan(htj11)));
j6array[numsolutions]=((2.0)*(atan(htj6)));
if(isinf(htj10)){
cj10array[numsolutions] = IKcos(j10array[numsolutions]);
sj10array[numsolutions] = IKsin(j10array[numsolutions]);
}
else{
IkReal x147=htj10*htj10;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+x147),-1);
if(!x148.valid){
continue;
}
cj10array[numsolutions]=((x148.value)*(((1.0)+(((-1.0)*x147)))));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+(htj10*htj10)),-1);
if(!x149.valid){
continue;
}
sj10array[numsolutions]=((2.0)*htj10*(x149.value));
}
if(isinf(htj11)){
cj11array[numsolutions] = IKcos(j11array[numsolutions]);
sj11array[numsolutions] = IKsin(j11array[numsolutions]);
}
else{
IkReal x150=htj11*htj11;
CheckValue<IkReal> x151=IKPowWithIntegerCheck(((1.0)+x150),-1);
if(!x151.valid){
continue;
}
cj11array[numsolutions]=((x151.value)*(((1.0)+(((-1.0)*x150)))));
CheckValue<IkReal> x152=IKPowWithIntegerCheck(((1.0)+(htj11*htj11)),-1);
if(!x152.valid){
continue;
}
sj11array[numsolutions]=((2.0)*htj11*(x152.value));
}
if(isinf(htj6)){
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
}
else{
IkReal x153=htj6*htj6;
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((1.0)+x153),-1);
if(!x154.valid){
continue;
}
cj6array[numsolutions]=((x154.value)*(((1.0)+(((-1.0)*x153)))));
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((1.0)+(htj6*htj6)),-1);
if(!x155.valid){
continue;
}
sj6array[numsolutions]=((2.0)*htj6*(x155.value));
}
if( j10array[numsolutions] > IKPI )
{
    j10array[numsolutions]-=IK2PI;
}
else if( j10array[numsolutions] < -IKPI )
{
    j10array[numsolutions]+=IK2PI;
}
if( j11array[numsolutions] > IKPI )
{
    j11array[numsolutions]-=IK2PI;
}
else if( j11array[numsolutions] < -IKPI )
{
    j11array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j10valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj10 = 16;
_nj11 = 1;
_nj6 = 1;
for(int ij10 = 0; ij10 < numsolutions; ++ij10)
    {
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
_ij11[0] = 0; _ij11[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
for(int iij10 = ij10+1; iij10 < numsolutions; ++iij10)
{
if( !j10valid[iij10] ) { continue; }
if( IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(cj11array[ij10]-cj11array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj11array[ij10]-sj11array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij10]-cj6array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij10]-sj6array[iij10]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j10valid[iij10]=false; _ij10[1] = iij10; _ij11[1] = 0; _ij6[1] = 0;  break; 
}
}
    j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

    j11 = j11array[ij10]; cj11 = cj11array[ij10]; sj11 = sj11array[ij10];

    j6 = j6array[ij10]; cj6 = cj6array[ij10]; sj6 = sj6array[ij10];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j9eval[3];
IkReal x156=((1.0)*cj10);
IkReal x157=(cj6*r21);
IkReal x158=(cj6*r20);
IkReal x159=((1.0)*sj11);
IkReal x160=((((-1.0)*r02*x156))+((cj11*r00*sj10))+(((-1.0)*r01*sj10*x159)));
j9eval[0]=x160;
j9eval[1]=IKsign(x160);
j9eval[2]=((IKabs(((((-1.0)*sj11*x156*x157))+((cj6*r22*sj10))+((cj10*cj11*x158)))))+(IKabs(((((-1.0)*cj11*x157))+(((-1.0)*x158*x159))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
IkReal x161=((1.0)*sj11);
IkReal x162=(r20*sj6);
IkReal x163=(r21*sj6);
IkReal x164=((((-1.0)*r11*sj10*x161))+(((-1.0)*cj10*r12))+((cj11*r10*sj10)));
j9eval[0]=x164;
j9eval[1]=((IKabs(((((-1.0)*cj11*x163))+(((-1.0)*x161*x162)))))+(IKabs(((((-1.0)*cj10*x161*x163))+((r22*sj10*sj6))+((cj10*cj11*x162))))));
j9eval[2]=IKsign(x164);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
IkReal x165=((((-1.0)*cj11*r20*sj10))+((cj10*r22))+((r21*sj10*sj11)));
j9eval[0]=x165;
j9eval[1]=IKsign(x165);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j6))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x166=((1.0)*sj11);
IkReal x167=((1.0)*cj11);
IkReal x168=((((-1.0)*r20*sj10*x167))+((cj10*r22))+((r21*sj10*sj11)));
j9eval[0]=x168;
j9eval[1]=IKsign(x168);
j9eval[2]=((IKabs(((((-1.0)*r01*x167))+(((-1.0)*r00*x166)))))+(IKabs((((r02*sj10))+(((-1.0)*cj10*r01*x166))+((cj10*cj11*r00))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x169=((1.0)*r21);
IkReal x170=((1.0)*sj11);
IkReal x171=((((-1.0)*r01*sj10*x170))+((cj11*r00*sj10))+(((-1.0)*cj10*r02)));
j9eval[0]=x171;
j9eval[1]=IKsign(x171);
j9eval[2]=((IKabs(((((-1.0)*cj10*sj11*x169))+((r22*sj10))+((cj10*cj11*r20)))))+(IKabs(((((-1.0)*cj11*x169))+(((-1.0)*r20*x170))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=0;
cj6=1.0;
j6=0;
IkReal x172=cj11*cj11;
IkReal x173=cj10*cj10;
IkReal x174=r10*r10;
IkReal x175=r11*r11;
IkReal x176=r12*r12;
IkReal x177=(cj11*r11);
IkReal x178=((2.0)*r10);
IkReal x179=(cj10*cj11);
IkReal x180=((1.0)*r10);
IkReal x181=(r12*sj10);
IkReal x182=((1.0)*x174);
IkReal x183=((1.0)*x175);
IkReal x184=(cj10*r11*sj11);
IkReal x185=(x172*x173);
IkReal x186=((((-1.0)*x182))+((x172*x174))+((x173*x176))+(((-1.0)*x176))+((x175*x185))+(((2.0)*x181*x184))+((sj11*x173*x177*x178))+(((-1.0)*sj11*x177*x178))+(((-1.0)*x173*x183))+(((-1.0)*x172*x183))+(((-1.0)*x182*x185))+(((-1.0)*x178*x179*x181)));
j9eval[0]=x186;
j9eval[1]=IKsign(x186);
j9eval[2]=((IKabs(((((-1.0)*x181))+x184+(((-1.0)*x179*x180)))))+(IKabs(((((-1.0)*x177))+(((-1.0)*sj11*x180))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8, j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x187=cj11*cj11;
IkReal x188=cj10*cj10;
IkReal x189=r10*r10;
IkReal x190=r11*r11;
IkReal x191=r12*r12;
IkReal x192=(r10*sj11);
IkReal x193=(cj11*r11);
IkReal x194=(r12*sj10);
IkReal x195=((1.0)*x189);
IkReal x196=(cj10*cj11*r10);
IkReal x197=((1.0)*x190);
IkReal x198=(cj10*r11*sj11);
IkReal x199=(x187*x188);
CheckValue<IkReal> x200=IKPowWithIntegerCheck(IKsign(((((-1.0)*x188*x197))+(((-1.0)*x195*x199))+((x187*x189))+(((2.0)*x188*x192*x193))+(((-1.0)*x191))+((x188*x191))+(((-1.0)*x195))+(((-1.0)*x187*x197))+(((-2.0)*x194*x196))+(((-2.0)*x192*x193))+((x190*x199))+(((2.0)*x194*x198)))),-1);
if(!x200.valid){
continue;
}
CheckValue<IkReal> x201 = IKatan2WithCheck(IkReal(((((-1.0)*x196))+(((-1.0)*x194))+x198)),IkReal(((((-1.0)*x192))+(((-1.0)*x193)))),IKFAST_ATAN2_MAGTHRESH);
if(!x201.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x200.value)))+(x201.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x202=IKsin(j9);
IkReal x203=IKcos(j9);
IkReal x204=(cj11*r10);
IkReal x205=(cj11*r11);
IkReal x206=(r11*sj11);
IkReal x207=(r10*sj11);
IkReal x208=((1.0)*cj11);
IkReal x209=(cj10*x202);
IkReal x210=((1.0)*x203);
IkReal x211=((1.0)*sj10*x202);
evalcond[0]=(((cj10*x203*x206))+((x202*x205))+((x202*x207))+(((-1.0)*r12*sj10*x210))+(((-1.0)*cj10*x204*x210)));
evalcond[1]=((((-1.0)*r22*x211))+((r21*sj11*x209))+(((-1.0)*r20*x208*x209))+(((-1.0)*r21*x203*x208))+(((-1.0)*r20*sj11*x210)));
evalcond[2]=((((-1.0)*r00*sj11*x210))+(((-1.0)*r01*x203*x208))+(((-1.0)*r00*x208*x209))+((r01*sj11*x209))+(((-1.0)*r02*x211)));
evalcond[3]=((1.0)+(((-1.0)*x207*x210))+(((-1.0)*x205*x210))+(((-1.0)*r12*x211))+(((-1.0)*x204*x209))+((x206*x209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=1.0;
j6=0;
IkReal x212=((5.034)*px);
IkReal x213=((0.42)*pz);
IkReal x214=((12.0)*pz);
IkReal x215=(cj11*r01);
IkReal x216=(cj11*sj10);
IkReal x217=(cj10*r02);
IkReal x218=(r00*sj11);
IkReal x219=(cj11*r21);
IkReal x220=(r20*sj11);
IkReal x221=(cj10*r22);
IkReal x222=(r01*sj10*sj11);
IkReal x223=(r21*sj10*sj11);
IkReal x224=((2.126463)*r00*x216);
IkReal x225=((0.42)*r00*x216);
IkReal x226=((5.034)*r20*x216);
IkReal x227=(x212+x213+x224);
IkReal x228=(x214+x225+x226);
IkReal x229=((((2.126463)*x217))+(((0.005034)*x215))+(((0.005034)*x218))+(((2.126463)*x222))+(((0.00042)*x220))+(((0.00042)*x219)));
IkReal x230=((((5.034)*x221))+(((5.034)*x223))+(((0.42)*x222))+(((0.012)*x220))+(((0.012)*x219))+(((0.42)*x217)));
j7eval[0]=((6.094496)+(IKabs(((-0.18941)+x227+(((-1.0)*x229)))))+(IKabs(((1.816)+(((-0.14)*x222))+(((4.0)*pz))+(((-0.14)*x217))+(((1.678)*r20*x216))+(((-1.678)*x223))+(((-1.678)*x221))+(((-0.004)*x219))+(((0.14)*r00*x216))+(((-0.004)*x220)))))+(IKabs(((-1.816)+(((-1.0)*x230))+x228)))+(IKabs(((1.816)+(((-1.0)*x230))+x228)))+(IKabs(((-0.06229)+x227+(((-1.0)*x229)))))+(IKabs(((0.02161)+(((-0.001678)*x215))+(((-0.001678)*x218))+(((0.14)*pz))+(((0.708821)*r00*x216))+(((-0.708821)*x222))+(((-0.00014)*x219))+(((-0.00014)*x220))+(((1.678)*px))+(((-0.708821)*x217))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x231=((12.0)*pz);
IkReal x232=((4.0)*pz);
IkReal x233=(sj10*sj11);
IkReal x234=(r20*sj11);
IkReal x235=(cj10*r02);
IkReal x236=(cj11*r21);
IkReal x237=(cj10*r22);
IkReal x238=(cj11*r20*sj10);
IkReal x239=(cj11*r00*sj10);
IkReal x240=((0.42)*x239);
IkReal x241=((5.034)*x238);
IkReal x242=((1.678)*x238);
IkReal x243=((0.14)*x239);
IkReal x244=(x231+x241+x240);
IkReal x245=(x232+x243+x242);
IkReal x246=((((5.034)*x237))+(((0.012)*x234))+(((0.012)*x236))+(((0.42)*x235))+(((5.034)*r21*x233))+(((0.42)*r01*x233)));
IkReal x247=((((1.678)*x237))+(((1.678)*r21*x233))+(((0.14)*r01*x233))+(((0.004)*x236))+(((0.004)*x234))+(((0.14)*x235)));
op[0]=((1.816)+x245+(((-1.0)*x247)));
op[1]=0;
op[2]=((1.816)+x244+(((-1.0)*x246)));
op[3]=0;
op[4]=((-1.816)+x244+(((-1.0)*x246)));
op[5]=0;
op[6]=((-1.816)+x245+(((-1.0)*x247)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x248=((5.034)*px);
IkReal x249=((0.42)*pz);
IkReal x250=((0.14)*pz);
IkReal x251=((1.678)*px);
IkReal x252=(cj11*r01);
IkReal x253=(cj10*r02);
IkReal x254=(r00*sj11);
IkReal x255=(cj11*r21);
IkReal x256=(r20*sj11);
IkReal x257=((0.001678)*x252);
IkReal x258=((0.001678)*x254);
IkReal x259=((0.708821)*x253);
IkReal x260=((0.00014)*x256);
IkReal x261=((0.00014)*x255);
IkReal x262=(r01*sj10*sj11);
IkReal x263=(cj11*r00*sj10);
IkReal x264=((2.126463)*x263);
IkReal x265=((0.708821)*x263);
IkReal x266=((0.708821)*x262);
IkReal x267=(x250+x251+x265);
IkReal x268=(x264+x249+x248);
IkReal x269=((((2.126463)*x262))+(((0.005034)*x252))+(((0.005034)*x254))+(((2.126463)*x253))+(((0.00042)*x256))+(((0.00042)*x255)));
IkReal x270=(x258+x259+x257+x266+x261+x260);
j7evalpoly[0]=((-0.10551)+(((-1.523624)*htj7))+(((htj7*htj7)*(((-0.18941)+x268+(((-1.0)*x269))))))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+x267+(((-1.0)*x270))))))+x267+(((htj7*htj7*htj7*htj7)*(((-0.06229)+x268+(((-1.0)*x269))))))+(((-1.0)*x270))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x271=((1.0)*cj10);
IkReal x272=(sj10*sj11);
IkReal x273=((1.0)*r21);
IkReal x274=(cj11*cj7*sj10);
IkReal x275=(cj11*sj10*sj7);
if( IKabs(((((-1.0)*r01*sj7*x272))+(((-1.0)*cj7*r22*x271))+(((-1.0)*r02*sj7*x271))+(((-1.0)*cj7*x272*x273))+((r00*x275))+((r20*x274)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj10*cj7*r02))+(((-1.0)*sj7*x272*x273))+(((-1.0)*r00*x274))+((r20*x275))+((cj7*r01*x272))+(((-1.0)*r22*sj7*x271)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*sj7*x272))+(((-1.0)*cj7*r22*x271))+(((-1.0)*r02*sj7*x271))+(((-1.0)*cj7*x272*x273))+((r00*x275))+((r20*x274))))+IKsqr((((cj10*cj7*r02))+(((-1.0)*sj7*x272*x273))+(((-1.0)*r00*x274))+((r20*x275))+((cj7*r01*x272))+(((-1.0)*r22*sj7*x271))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*r01*sj7*x272))+(((-1.0)*cj7*r22*x271))+(((-1.0)*r02*sj7*x271))+(((-1.0)*cj7*x272*x273))+((r00*x275))+((r20*x274))), (((cj10*cj7*r02))+(((-1.0)*sj7*x272*x273))+(((-1.0)*r00*x274))+((r20*x275))+((cj7*r01*x272))+(((-1.0)*r22*sj7*x271))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x276=IKsin(j8);
IkReal x277=IKcos(j8);
IkReal x278=(r21*sj11);
IkReal x279=((1.0)*sj10);
IkReal x280=((0.035)*sj7);
IkReal x281=((1.0)*cj10);
IkReal x282=(cj10*cj9);
IkReal x283=(r01*sj11);
IkReal x284=((0.001)*cj11);
IkReal x285=(cj11*sj9);
IkReal x286=(sj11*sj9);
IkReal x287=(cj11*r20);
IkReal x288=(cj11*r00);
IkReal x289=((0.001)*sj11);
IkReal x290=((1.0)*x276);
IkReal x291=((0.4195)*x277);
IkReal x292=(cj7*x277);
IkReal x293=(cj7*x276);
IkReal x294=(sj7*x276);
IkReal x295=(cj7*x290);
IkReal x296=((1.0)*sj7*x277);
IkReal x297=(x295+x296);
evalcond[0]=((((-1.0)*r02*x281))+(((-1.0)*sj7*x290))+x292+((sj10*x288))+(((-1.0)*x279*x283)));
evalcond[1]=((((-1.0)*x297))+(((-1.0)*r22*x281))+(((-1.0)*x278*x279))+((sj10*x287)));
evalcond[2]=((((-1.0)*x292))+((x278*x282))+((r21*x285))+(((-1.0)*cj9*r22*x279))+x294+(((-1.0)*cj9*x281*x287))+((r20*x286)));
evalcond[3]=(((r01*x285))+((r00*x286))+(((-1.0)*x297))+(((-1.0)*cj9*x281*x288))+(((-1.0)*cj9*r02*x279))+((x282*x283)));
evalcond[4]=((((0.035)*x292))+(((0.454)*cj7))+(((-1.0)*x276*x280))+((r21*x284))+(((-1.0)*pz))+(((-1.0)*sj7*x291))+(((-0.4195)*x293))+((r20*x289)));
evalcond[5]=((0.025)+(((0.035)*x293))+((r01*x284))+((r00*x289))+(((-1.0)*px))+(((-0.4195)*x294))+(((0.454)*sj7))+((cj7*x291))+((x277*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x298=((1.0)*sj11);
CheckValue<IkReal> x299=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*sj10*x298))+((cj11*r00*sj10))+(((-1.0)*cj10*r02)))),-1);
if(!x299.valid){
continue;
}
CheckValue<IkReal> x300 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r21))+(((-1.0)*r20*x298)))),IkReal(((((-1.0)*cj10*r21*x298))+((r22*sj10))+((cj10*cj11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x300.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x299.value)))+(x300.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x301=IKsin(j9);
IkReal x302=IKcos(j9);
IkReal x303=(cj11*r10);
IkReal x304=(cj11*r11);
IkReal x305=(r11*sj11);
IkReal x306=(r10*sj11);
IkReal x307=((1.0)*cj11);
IkReal x308=(cj10*x301);
IkReal x309=((1.0)*x302);
IkReal x310=((1.0)*sj10*x301);
evalcond[0]=(((x301*x306))+((x301*x304))+((cj10*x302*x305))+(((-1.0)*cj10*x303*x309))+(((-1.0)*r12*sj10*x309)));
evalcond[1]=((((-1.0)*r21*x302*x307))+(((-1.0)*r20*sj11*x309))+((r21*sj11*x308))+(((-1.0)*r20*x307*x308))+(((-1.0)*r22*x310)));
evalcond[2]=((((-1.0)*r00*x307*x308))+(((-1.0)*r02*x310))+((r01*sj11*x308))+(((-1.0)*r01*x302*x307))+(((-1.0)*r00*sj11*x309)));
evalcond[3]=((1.0)+(((-1.0)*x303*x308))+(((-1.0)*r12*x310))+(((-1.0)*x306*x309))+((x305*x308))+(((-1.0)*x304*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=1.0;
j6=0;
IkReal x311=((5.034)*px);
IkReal x312=((0.42)*pz);
IkReal x313=((12.0)*pz);
IkReal x314=(cj11*r01);
IkReal x315=(cj11*sj10);
IkReal x316=(cj10*r02);
IkReal x317=(r00*sj11);
IkReal x318=(cj11*r21);
IkReal x319=(r20*sj11);
IkReal x320=(cj10*r22);
IkReal x321=(r01*sj10*sj11);
IkReal x322=(r21*sj10*sj11);
IkReal x323=((2.126463)*r00*x315);
IkReal x324=((0.42)*r00*x315);
IkReal x325=((5.034)*r20*x315);
IkReal x326=(x323+x311+x312);
IkReal x327=(x324+x325+x313);
IkReal x328=((((2.126463)*x321))+(((0.00042)*x319))+(((0.00042)*x318))+(((0.005034)*x314))+(((0.005034)*x317))+(((2.126463)*x316)));
IkReal x329=((((0.012)*x318))+(((0.012)*x319))+(((0.42)*x316))+(((0.42)*x321))+(((5.034)*x320))+(((5.034)*x322)));
j7eval[0]=((6.094496)+(IKabs(((-0.06229)+(((-1.0)*x328))+x326)))+(IKabs(((0.02161)+(((-0.708821)*x321))+(((-0.001678)*x314))+(((-0.001678)*x317))+(((-0.00014)*x318))+(((-0.00014)*x319))+(((0.14)*pz))+(((-0.708821)*x316))+(((0.708821)*r00*x315))+(((1.678)*px)))))+(IKabs(((-1.816)+(((-1.0)*x329))+x327)))+(IKabs(((1.816)+(((-1.0)*x329))+x327)))+(IKabs(((1.816)+(((0.14)*r00*x315))+(((-0.14)*x321))+(((1.678)*r20*x315))+(((4.0)*pz))+(((-1.678)*x322))+(((-1.678)*x320))+(((-0.004)*x318))+(((-0.004)*x319))+(((-0.14)*x316)))))+(IKabs(((-0.18941)+(((-1.0)*x328))+x326))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x330=((12.0)*pz);
IkReal x331=((4.0)*pz);
IkReal x332=(sj10*sj11);
IkReal x333=(r20*sj11);
IkReal x334=(cj10*r02);
IkReal x335=(cj11*r21);
IkReal x336=(cj10*r22);
IkReal x337=(cj11*r20*sj10);
IkReal x338=(cj11*r00*sj10);
IkReal x339=((0.42)*x338);
IkReal x340=((5.034)*x337);
IkReal x341=((1.678)*x337);
IkReal x342=((0.14)*x338);
IkReal x343=(x339+x330+x340);
IkReal x344=(x331+x342+x341);
IkReal x345=((((0.012)*x335))+(((0.012)*x333))+(((5.034)*r21*x332))+(((5.034)*x336))+(((0.42)*r01*x332))+(((0.42)*x334)));
IkReal x346=((((0.004)*x333))+(((0.004)*x335))+(((0.14)*x334))+(((1.678)*x336))+(((1.678)*r21*x332))+(((0.14)*r01*x332)));
op[0]=((1.816)+x344+(((-1.0)*x346)));
op[1]=0;
op[2]=((1.816)+x343+(((-1.0)*x345)));
op[3]=0;
op[4]=((-1.816)+x343+(((-1.0)*x345)));
op[5]=0;
op[6]=((-1.816)+x344+(((-1.0)*x346)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x347=((5.034)*px);
IkReal x348=((0.42)*pz);
IkReal x349=((0.14)*pz);
IkReal x350=((1.678)*px);
IkReal x351=(cj11*r01);
IkReal x352=(cj10*r02);
IkReal x353=(r00*sj11);
IkReal x354=(cj11*r21);
IkReal x355=(r20*sj11);
IkReal x356=((0.001678)*x351);
IkReal x357=((0.001678)*x353);
IkReal x358=((0.708821)*x352);
IkReal x359=((0.00014)*x355);
IkReal x360=((0.00014)*x354);
IkReal x361=(r01*sj10*sj11);
IkReal x362=(cj11*r00*sj10);
IkReal x363=((2.126463)*x362);
IkReal x364=((0.708821)*x362);
IkReal x365=((0.708821)*x361);
IkReal x366=(x350+x349+x364);
IkReal x367=(x347+x348+x363);
IkReal x368=((((0.005034)*x353))+(((0.005034)*x351))+(((2.126463)*x361))+(((2.126463)*x352))+(((0.00042)*x355))+(((0.00042)*x354)));
IkReal x369=(x357+x356+x359+x358+x360+x365);
j7evalpoly[0]=((-0.10551)+(((-1.523624)*htj7))+(((-1.0)*x369))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+(((-1.0)*x369))+x366))))+(((htj7*htj7)*(((-0.18941)+(((-1.0)*x368))+x367))))+x366+(((htj7*htj7*htj7*htj7)*(((-0.06229)+(((-1.0)*x368))+x367))))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x370=((1.0)*cj10);
IkReal x371=(sj10*sj11);
IkReal x372=((1.0)*r21);
IkReal x373=(cj11*cj7*sj10);
IkReal x374=(cj11*sj10*sj7);
if( IKabs((((r20*x373))+(((-1.0)*cj7*x371*x372))+((r00*x374))+(((-1.0)*r02*sj7*x370))+(((-1.0)*r01*sj7*x371))+(((-1.0)*cj7*r22*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x374))+((cj10*cj7*r02))+(((-1.0)*r00*x373))+(((-1.0)*sj7*x371*x372))+((cj7*r01*x371))+(((-1.0)*r22*sj7*x370)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x373))+(((-1.0)*cj7*x371*x372))+((r00*x374))+(((-1.0)*r02*sj7*x370))+(((-1.0)*r01*sj7*x371))+(((-1.0)*cj7*r22*x370))))+IKsqr((((r20*x374))+((cj10*cj7*r02))+(((-1.0)*r00*x373))+(((-1.0)*sj7*x371*x372))+((cj7*r01*x371))+(((-1.0)*r22*sj7*x370))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r20*x373))+(((-1.0)*cj7*x371*x372))+((r00*x374))+(((-1.0)*r02*sj7*x370))+(((-1.0)*r01*sj7*x371))+(((-1.0)*cj7*r22*x370))), (((r20*x374))+((cj10*cj7*r02))+(((-1.0)*r00*x373))+(((-1.0)*sj7*x371*x372))+((cj7*r01*x371))+(((-1.0)*r22*sj7*x370))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x375=IKsin(j8);
IkReal x376=IKcos(j8);
IkReal x377=(r21*sj11);
IkReal x378=((1.0)*sj10);
IkReal x379=((0.035)*sj7);
IkReal x380=((1.0)*cj10);
IkReal x381=(cj10*cj9);
IkReal x382=(r01*sj11);
IkReal x383=((0.001)*cj11);
IkReal x384=(cj11*sj9);
IkReal x385=(sj11*sj9);
IkReal x386=(cj11*r20);
IkReal x387=(cj11*r00);
IkReal x388=((0.001)*sj11);
IkReal x389=((1.0)*x375);
IkReal x390=((0.4195)*x376);
IkReal x391=(cj7*x376);
IkReal x392=(cj7*x375);
IkReal x393=(sj7*x375);
IkReal x394=(cj7*x389);
IkReal x395=((1.0)*sj7*x376);
IkReal x396=(x395+x394);
evalcond[0]=((((-1.0)*sj7*x389))+x391+(((-1.0)*x378*x382))+(((-1.0)*r02*x380))+((sj10*x387)));
evalcond[1]=((((-1.0)*x396))+(((-1.0)*r22*x380))+(((-1.0)*x377*x378))+((sj10*x386)));
evalcond[2]=(((x377*x381))+(((-1.0)*x391))+(((-1.0)*cj9*x380*x386))+((r21*x384))+(((-1.0)*cj9*r22*x378))+x393+((r20*x385)));
evalcond[3]=((((-1.0)*x396))+(((-1.0)*cj9*x380*x387))+(((-1.0)*cj9*r02*x378))+((r00*x385))+((x381*x382))+((r01*x384)));
evalcond[4]=((((0.454)*cj7))+((r21*x383))+(((0.035)*x391))+(((-1.0)*pz))+((r20*x388))+(((-1.0)*sj7*x390))+(((-1.0)*x375*x379))+(((-0.4195)*x392)));
evalcond[5]=((0.025)+(((0.035)*x392))+(((-1.0)*px))+((x376*x379))+(((0.454)*sj7))+((r00*x388))+(((-0.4195)*x393))+((r01*x383))+((cj7*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x397=((1.0)*sj11);
IkReal x398=((1.0)*cj11);
CheckValue<IkReal> x399 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x397))+(((-1.0)*r01*x398)))),IkReal((((r02*sj10))+(((-1.0)*cj10*r01*x397))+((cj10*cj11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x399.valid){
continue;
}
CheckValue<IkReal> x400=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj10*x398))+((cj10*r22))+((r21*sj10*sj11)))),-1);
if(!x400.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x399.value)+(((1.5707963267949)*(x400.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x401=IKsin(j9);
IkReal x402=IKcos(j9);
IkReal x403=(cj11*r10);
IkReal x404=(cj11*r11);
IkReal x405=(r11*sj11);
IkReal x406=(r10*sj11);
IkReal x407=((1.0)*cj11);
IkReal x408=(cj10*x401);
IkReal x409=((1.0)*x402);
IkReal x410=((1.0)*sj10*x401);
evalcond[0]=(((cj10*x402*x405))+(((-1.0)*cj10*x403*x409))+((x401*x406))+((x401*x404))+(((-1.0)*r12*sj10*x409)));
evalcond[1]=((((-1.0)*r20*x407*x408))+(((-1.0)*r20*sj11*x409))+(((-1.0)*r22*x410))+((r21*sj11*x408))+(((-1.0)*r21*x402*x407)));
evalcond[2]=(((r01*sj11*x408))+(((-1.0)*r00*sj11*x409))+(((-1.0)*r02*x410))+(((-1.0)*r00*x407*x408))+(((-1.0)*r01*x402*x407)));
evalcond[3]=((1.0)+((x405*x408))+(((-1.0)*x406*x409))+(((-1.0)*x403*x408))+(((-1.0)*x404*x409))+(((-1.0)*r12*x410)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=1.0;
j6=0;
IkReal x411=((5.034)*px);
IkReal x412=((0.42)*pz);
IkReal x413=((12.0)*pz);
IkReal x414=(cj11*r01);
IkReal x415=(cj11*sj10);
IkReal x416=(cj10*r02);
IkReal x417=(r00*sj11);
IkReal x418=(cj11*r21);
IkReal x419=(r20*sj11);
IkReal x420=(cj10*r22);
IkReal x421=(r01*sj10*sj11);
IkReal x422=(r21*sj10*sj11);
IkReal x423=((2.126463)*r00*x415);
IkReal x424=((0.42)*r00*x415);
IkReal x425=((5.034)*r20*x415);
IkReal x426=(x412+x411+x423);
IkReal x427=(x413+x425+x424);
IkReal x428=((((2.126463)*x421))+(((0.00042)*x418))+(((0.00042)*x419))+(((2.126463)*x416))+(((0.005034)*x417))+(((0.005034)*x414)));
IkReal x429=((((0.42)*x421))+(((5.034)*x422))+(((5.034)*x420))+(((0.012)*x419))+(((0.012)*x418))+(((0.42)*x416)));
j7eval[0]=((6.094496)+(IKabs(((1.816)+(((-0.14)*x416))+(((0.14)*r00*x415))+(((-0.004)*x419))+(((-0.004)*x418))+(((4.0)*pz))+(((-0.14)*x421))+(((-1.678)*x420))+(((-1.678)*x422))+(((1.678)*r20*x415)))))+(IKabs(((-0.18941)+(((-1.0)*x428))+x426)))+(IKabs(((0.02161)+(((0.708821)*r00*x415))+(((-0.001678)*x417))+(((-0.001678)*x414))+(((0.14)*pz))+(((-0.708821)*x416))+(((-0.00014)*x419))+(((-0.00014)*x418))+(((-0.708821)*x421))+(((1.678)*px)))))+(IKabs(((1.816)+(((-1.0)*x429))+x427)))+(IKabs(((-1.816)+(((-1.0)*x429))+x427)))+(IKabs(((-0.06229)+(((-1.0)*x428))+x426))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x430=((12.0)*pz);
IkReal x431=((4.0)*pz);
IkReal x432=(sj10*sj11);
IkReal x433=(r20*sj11);
IkReal x434=(cj10*r02);
IkReal x435=(cj11*r21);
IkReal x436=(cj10*r22);
IkReal x437=(cj11*r20*sj10);
IkReal x438=(cj11*r00*sj10);
IkReal x439=((0.42)*x438);
IkReal x440=((5.034)*x437);
IkReal x441=((1.678)*x437);
IkReal x442=((0.14)*x438);
IkReal x443=(x439+x430+x440);
IkReal x444=(x431+x441+x442);
IkReal x445=((((5.034)*x436))+(((0.42)*x434))+(((0.012)*x435))+(((0.012)*x433))+(((5.034)*r21*x432))+(((0.42)*r01*x432)));
IkReal x446=((((0.004)*x435))+(((0.004)*x433))+(((0.14)*x434))+(((1.678)*x436))+(((1.678)*r21*x432))+(((0.14)*r01*x432)));
op[0]=((1.816)+(((-1.0)*x446))+x444);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x445))+x443);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x445))+x443);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x446))+x444);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x447=((5.034)*px);
IkReal x448=((0.42)*pz);
IkReal x449=((0.14)*pz);
IkReal x450=((1.678)*px);
IkReal x451=(cj11*r01);
IkReal x452=(cj10*r02);
IkReal x453=(r00*sj11);
IkReal x454=(cj11*r21);
IkReal x455=(r20*sj11);
IkReal x456=((0.001678)*x451);
IkReal x457=((0.001678)*x453);
IkReal x458=((0.708821)*x452);
IkReal x459=((0.00014)*x455);
IkReal x460=((0.00014)*x454);
IkReal x461=(r01*sj10*sj11);
IkReal x462=(cj11*r00*sj10);
IkReal x463=((2.126463)*x462);
IkReal x464=((0.708821)*x462);
IkReal x465=((0.708821)*x461);
IkReal x466=(x449+x450+x464);
IkReal x467=(x448+x447+x463);
IkReal x468=((((0.00042)*x454))+(((0.00042)*x455))+(((0.005034)*x453))+(((0.005034)*x451))+(((2.126463)*x452))+(((2.126463)*x461)));
IkReal x469=(x458+x459+x456+x457+x460+x465);
j7evalpoly[0]=((-0.10551)+(((-1.523624)*htj7))+(((htj7*htj7*htj7*htj7)*(((-0.06229)+(((-1.0)*x468))+x467))))+(((-1.0)*x469))+x466+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+(((-1.0)*x469))+x466))))+(((htj7*htj7)*(((-0.18941)+(((-1.0)*x468))+x467))))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x470=((1.0)*cj10);
IkReal x471=(sj10*sj11);
IkReal x472=((1.0)*r21);
IkReal x473=(cj11*cj7*sj10);
IkReal x474=(cj11*sj10*sj7);
if( IKabs((((r20*x473))+(((-1.0)*r02*sj7*x470))+(((-1.0)*r01*sj7*x471))+(((-1.0)*cj7*x471*x472))+(((-1.0)*cj7*r22*x470))+((r00*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj10*cj7*r02))+((r20*x474))+(((-1.0)*r22*sj7*x470))+((cj7*r01*x471))+(((-1.0)*sj7*x471*x472))+(((-1.0)*r00*x473)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x473))+(((-1.0)*r02*sj7*x470))+(((-1.0)*r01*sj7*x471))+(((-1.0)*cj7*x471*x472))+(((-1.0)*cj7*r22*x470))+((r00*x474))))+IKsqr((((cj10*cj7*r02))+((r20*x474))+(((-1.0)*r22*sj7*x470))+((cj7*r01*x471))+(((-1.0)*sj7*x471*x472))+(((-1.0)*r00*x473))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r20*x473))+(((-1.0)*r02*sj7*x470))+(((-1.0)*r01*sj7*x471))+(((-1.0)*cj7*x471*x472))+(((-1.0)*cj7*r22*x470))+((r00*x474))), (((cj10*cj7*r02))+((r20*x474))+(((-1.0)*r22*sj7*x470))+((cj7*r01*x471))+(((-1.0)*sj7*x471*x472))+(((-1.0)*r00*x473))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x475=IKsin(j8);
IkReal x476=IKcos(j8);
IkReal x477=(r21*sj11);
IkReal x478=((1.0)*sj10);
IkReal x479=((0.035)*sj7);
IkReal x480=((1.0)*cj10);
IkReal x481=(cj10*cj9);
IkReal x482=(r01*sj11);
IkReal x483=((0.001)*cj11);
IkReal x484=(cj11*sj9);
IkReal x485=(sj11*sj9);
IkReal x486=(cj11*r20);
IkReal x487=(cj11*r00);
IkReal x488=((0.001)*sj11);
IkReal x489=((1.0)*x475);
IkReal x490=((0.4195)*x476);
IkReal x491=(cj7*x476);
IkReal x492=(cj7*x475);
IkReal x493=(sj7*x475);
IkReal x494=(cj7*x489);
IkReal x495=((1.0)*sj7*x476);
IkReal x496=(x494+x495);
evalcond[0]=(((sj10*x487))+(((-1.0)*sj7*x489))+x491+(((-1.0)*x478*x482))+(((-1.0)*r02*x480)));
evalcond[1]=(((sj10*x486))+(((-1.0)*x496))+(((-1.0)*x477*x478))+(((-1.0)*r22*x480)));
evalcond[2]=((((-1.0)*cj9*x480*x486))+((r20*x485))+(((-1.0)*x491))+x493+((r21*x484))+(((-1.0)*cj9*r22*x478))+((x477*x481)));
evalcond[3]=((((-1.0)*cj9*x480*x487))+(((-1.0)*x496))+((x481*x482))+((r01*x484))+(((-1.0)*cj9*r02*x478))+((r00*x485)));
evalcond[4]=((((-0.4195)*x492))+((r20*x488))+(((0.454)*cj7))+(((-1.0)*x475*x479))+(((-1.0)*pz))+(((0.035)*x491))+((r21*x483))+(((-1.0)*sj7*x490)));
evalcond[5]=((0.025)+(((-0.4195)*x493))+((cj7*x490))+(((-1.0)*px))+(((0.035)*x492))+((r01*x483))+(((0.454)*sj7))+((r00*x488))+((x476*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x497=((1.0)*cj11);
IkReal x498=((1.0)*sj11);
IkReal x499=((((-1.0)*r00*sj10*x497))+((r01*sj10*sj11))+((cj10*r02)));
j9eval[0]=x499;
j9eval[1]=IKsign(x499);
j9eval[2]=((IKabs(((((-1.0)*r21*x497))+(((-1.0)*r20*x498)))))+(IKabs((((r22*sj10))+(((-1.0)*cj10*r21*x498))+((cj10*cj11*r20))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x500=((1.0)*sj11);
IkReal x501=((((-1.0)*cj10*r22))+((cj11*r20*sj10))+(((-1.0)*r21*sj10*x500)));
j9eval[0]=x501;
j9eval[1]=((IKabs(((((-1.0)*cj11*r01))+(((-1.0)*r00*x500)))))+(IKabs((((r02*sj10))+(((-1.0)*cj10*r01*x500))+((cj10*cj11*r00))))));
j9eval[2]=IKsign(x501);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x502=r11*r11;
IkReal x503=cj10*cj10;
IkReal x504=cj11*cj11;
IkReal x505=r10*r10;
IkReal x506=r12*r12;
IkReal x507=(r10*sj11);
IkReal x508=(cj11*r11);
IkReal x509=((1.0)*x503);
IkReal x510=(cj10*cj11*r10);
IkReal x511=((2.0)*r12*sj10);
IkReal x512=(cj10*r11*sj11);
IkReal x513=(x502*x504);
IkReal x514=(x504*x505);
IkReal x515=((((2.0)*x507*x508))+(((-1.0)*x506*x509))+(((-1.0)*x511*x512))+((x510*x511))+(((-2.0)*x503*x507*x508))+((x503*x514))+(((-1.0)*x514))+x505+x506+x513+((x502*x503))+(((-1.0)*x509*x513)));
j9eval[0]=x515;
j9eval[1]=IKsign(x515);
j9eval[2]=((IKabs(((((-1.0)*x507))+(((-1.0)*x508)))))+(IKabs(((((-1.0)*x510))+x512+(((-1.0)*r12*sj10))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8, j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x516=r11*r11;
IkReal x517=cj10*cj10;
IkReal x518=cj11*cj11;
IkReal x519=r10*r10;
IkReal x520=r12*r12;
IkReal x521=(r10*sj11);
IkReal x522=(cj11*r11);
IkReal x523=((1.0)*x517);
IkReal x524=(cj10*cj11*r10);
IkReal x525=((2.0)*r12*sj10);
IkReal x526=(cj10*r11*sj11);
IkReal x527=(x516*x518);
IkReal x528=(x518*x519);
CheckValue<IkReal> x529 = IKatan2WithCheck(IkReal(((((-1.0)*x524))+x526+(((-1.0)*r12*sj10)))),IkReal(((((-1.0)*x521))+(((-1.0)*x522)))),IKFAST_ATAN2_MAGTHRESH);
if(!x529.valid){
continue;
}
CheckValue<IkReal> x530=IKPowWithIntegerCheck(IKsign(((((2.0)*x521*x522))+(((-1.0)*x525*x526))+(((-1.0)*x520*x523))+(((-1.0)*x523*x527))+(((-1.0)*x528))+((x517*x528))+(((-2.0)*x517*x521*x522))+((x516*x517))+x520+x527+x519+((x524*x525)))),-1);
if(!x530.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x529.value)+(((1.5707963267949)*(x530.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x531=IKsin(j9);
IkReal x532=IKcos(j9);
IkReal x533=(cj11*r10);
IkReal x534=(cj11*r11);
IkReal x535=(r11*sj11);
IkReal x536=(r10*sj11);
IkReal x537=((1.0)*cj11);
IkReal x538=(cj10*x531);
IkReal x539=((1.0)*x532);
IkReal x540=((1.0)*sj10*x531);
evalcond[0]=((((-1.0)*cj10*x533*x539))+((x531*x534))+((x531*x536))+((cj10*x532*x535))+(((-1.0)*r12*sj10*x539)));
evalcond[1]=((((-1.0)*r22*x540))+(((-1.0)*r21*x532*x537))+((r21*sj11*x538))+(((-1.0)*r20*x537*x538))+(((-1.0)*r20*sj11*x539)));
evalcond[2]=((((-1.0)*r00*sj11*x539))+(((-1.0)*r01*x532*x537))+(((-1.0)*r02*x540))+((r01*sj11*x538))+(((-1.0)*r00*x537*x538)));
evalcond[3]=((-1.0)+(((-1.0)*x534*x539))+(((-1.0)*x533*x538))+((x535*x538))+(((-1.0)*r12*x540))+(((-1.0)*x536*x539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x541=((4.0)*pz);
IkReal x542=((12.0)*pz);
IkReal x543=((0.42)*cj11);
IkReal x544=(r00*sj10);
IkReal x545=((0.42)*sj11);
IkReal x546=(r20*sj9);
IkReal x547=((0.14)*cj10);
IkReal x548=(cj9*r20);
IkReal x549=((1.678)*sj10);
IkReal x550=(r21*sj11);
IkReal x551=(cj11*r20);
IkReal x552=(r01*sj10);
IkReal x553=((5.034)*sj10);
IkReal x554=((0.14)*sj11);
IkReal x555=(cj11*r21);
IkReal x556=(r20*sj11);
IkReal x557=(cj10*r22);
IkReal x558=((0.004)*x555);
IkReal x559=((0.004)*x556);
IkReal x560=((1.678)*x557);
IkReal x561=((5.034)*x557);
IkReal x562=((0.012)*x555);
IkReal x563=((0.012)*x556);
IkReal x564=(cj9*r22*sj10);
IkReal x565=(x549*x550);
IkReal x566=(x549*x551);
IkReal x567=(x550*x553);
IkReal x568=(x551*x553);
IkReal x569=(r21*sj9*x543);
IkReal x570=(x545*x546);
IkReal x571=(x543*x544);
IkReal x572=(cj10*cj9*r21*x545);
IkReal x573=(x542+x568);
IkReal x574=(x541+x566);
IkReal x575=(x573+(((0.42)*cj10*r02))+((x545*x552)));
IkReal x576=(x567+x562+x563+x561);
IkReal x577=(x570+x572+x569);
IkReal x578=((-1.816)+x559+x558+x565+x560);
IkReal x579=((((0.42)*x564))+((cj10*x543*x548))+x573);
j7eval[0]=((IKabs(((1.816)+(((-1.0)*x579))+x577+x576)))+(IKabs(((((0.14)*cj11*x544))+(((-1.0)*r02*x547))+(((-1.0)*x552*x554))+(((-1.0)*x574))+x578)))+(IKabs(((-1.816)+(((-1.0)*x579))+x577+x576)))+(IKabs(((-1.816)+(((-1.0)*x575))+x576+x571)))+(IKabs(((1.816)+(((-1.0)*x575))+x576+x571)))+(IKabs(((((-0.14)*x564))+(((-1.0)*cj11*x547*x548))+(((-1.0)*x574))+x578+((cj9*x547*x550))+((x546*x554))+(((0.14)*sj9*x555))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x580=(sj10*sj11);
IkReal x581=(r20*sj11);
IkReal x582=(cj10*r02);
IkReal x583=(cj11*r21);
IkReal x584=(cj10*r22);
IkReal x585=((5.034)*x584);
IkReal x586=((0.012)*x583);
IkReal x587=((0.012)*x581);
IkReal x588=((0.004)*x583);
IkReal x589=((0.004)*x581);
IkReal x590=((1.678)*x584);
IkReal x591=(cj11*r20*sj10);
IkReal x592=(cj11*r00*sj10);
IkReal x593=((0.42)*x592);
IkReal x594=((5.034)*r21*x580);
IkReal x595=((1.678)*r21*x580);
IkReal x596=((0.14)*x592);
IkReal x597=((((12.0)*pz))+(((0.42)*r01*x580))+(((5.034)*x591))+(((0.42)*x582)));
IkReal x598=((((4.0)*pz))+(((0.14)*r01*x580))+(((0.14)*x582))+(((1.678)*x591)));
IkReal x599=(x588+x589+x596+x595+x590);
IkReal x600=(x585+x586+x587+x594+x593);
op[0]=((-1.816)+(((-1.0)*x598))+x599);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x597))+x600);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x597))+x600);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x598))+x599);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x601=((0.42)*r20);
IkReal x602=(sj11*sj9);
IkReal x603=((0.14)*r20);
IkReal x604=((1.678)*sj10);
IkReal x605=(r21*sj11);
IkReal x606=(cj11*r20);
IkReal x607=((0.42)*cj9);
IkReal x608=(r22*sj10);
IkReal x609=((5.034)*sj10);
IkReal x610=(cj11*r21);
IkReal x611=(r20*sj11);
IkReal x612=((0.14)*cj9);
IkReal x613=(cj10*r22);
IkReal x614=((0.004)*x610);
IkReal x615=((0.004)*x611);
IkReal x616=((1.678)*x613);
IkReal x617=((5.034)*x613);
IkReal x618=((0.012)*x610);
IkReal x619=((0.012)*x611);
IkReal x620=(cj10*cj11*cj9);
IkReal x621=(x604*x605);
IkReal x622=(x602*x603);
IkReal x623=(x605*x609);
IkReal x624=((0.42)*sj9*x610);
IkReal x625=(x601*x602);
IkReal x626=((0.14)*sj9*x610);
IkReal x627=(cj10*x605*x612);
IkReal x628=(cj10*x605*x607);
IkReal x629=((((12.0)*pz))+((x607*x608))+((x606*x609))+((x601*x620)));
IkReal x630=(((x603*x620))+((x608*x612))+((x604*x606))+(((4.0)*pz)));
IkReal x631=(x618+x619+x617+x625+x624+x623+x628);
IkReal x632=(x614+x615+x616+x627+x626+x621+x622);
j7evalpoly[0]=((1.816)+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x630))+x632))))+(((-1.0)*x630))+(((htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x629))+x631))))+x632+(((htj7*htj7)*(((1.816)+(((-1.0)*x629))+x631)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x633=((1.0)*cj7);
IkReal x634=(cj10*r22);
IkReal x635=(sj10*sj11);
IkReal x636=((1.0)*sj7);
IkReal x637=(cj10*r02);
IkReal x638=(sj7*x635);
IkReal x639=(cj11*r00*sj10);
IkReal x640=(cj11*r20*sj10);
if( IKabs(((((-1.0)*r21*x633*x635))+(((-1.0)*x633*x634))+(((-1.0)*x636*x639))+((r01*x638))+((sj7*x637))+((cj7*x640)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x633*x637))+(((-1.0)*r01*x633*x635))+(((-1.0)*r21*x635*x636))+((sj7*x640))+(((-1.0)*x634*x636))+((cj7*x639)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x633*x635))+(((-1.0)*x633*x634))+(((-1.0)*x636*x639))+((r01*x638))+((sj7*x637))+((cj7*x640))))+IKsqr(((((-1.0)*x633*x637))+(((-1.0)*r01*x633*x635))+(((-1.0)*r21*x635*x636))+((sj7*x640))+(((-1.0)*x634*x636))+((cj7*x639))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*r21*x633*x635))+(((-1.0)*x633*x634))+(((-1.0)*x636*x639))+((r01*x638))+((sj7*x637))+((cj7*x640))), ((((-1.0)*x633*x637))+(((-1.0)*r01*x633*x635))+(((-1.0)*r21*x635*x636))+((sj7*x640))+(((-1.0)*x634*x636))+((cj7*x639))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x641=IKsin(j8);
IkReal x642=IKcos(j8);
IkReal x643=(r21*sj11);
IkReal x644=((1.0)*sj10);
IkReal x645=((0.035)*sj7);
IkReal x646=((1.0)*cj10);
IkReal x647=(cj10*cj9);
IkReal x648=(r01*sj11);
IkReal x649=((0.001)*cj11);
IkReal x650=(cj11*sj9);
IkReal x651=(sj11*sj9);
IkReal x652=(cj11*r20);
IkReal x653=(cj11*r00);
IkReal x654=((0.001)*sj11);
IkReal x655=(sj7*x641);
IkReal x656=(cj7*x641);
IkReal x657=(sj7*x642);
IkReal x658=(cj7*x642);
IkReal x659=((1.0)*x658);
evalcond[0]=(((sj10*x653))+(((-1.0)*r02*x646))+(((-1.0)*x659))+(((-1.0)*x644*x648))+x655);
evalcond[1]=(((sj10*x652))+(((-1.0)*x656))+(((-1.0)*x657))+(((-1.0)*r22*x646))+(((-1.0)*x643*x644)));
evalcond[2]=((((-1.0)*cj9*x646*x653))+(((-1.0)*cj9*r02*x644))+x656+x657+((r00*x651))+((r01*x650))+((x647*x648)));
evalcond[3]=(((x643*x647))+(((-1.0)*cj9*x646*x652))+(((-1.0)*x659))+x655+(((-1.0)*cj9*r22*x644))+((r21*x650))+((r20*x651)));
evalcond[4]=((((0.454)*cj7))+(((-1.0)*x641*x645))+(((0.035)*x658))+(((-0.4195)*x657))+(((-0.4195)*x656))+(((-1.0)*pz))+((r21*x649))+((r20*x654)));
evalcond[5]=((-0.025)+(((-1.0)*x642*x645))+(((-0.035)*x656))+(((-0.4195)*x658))+(((0.4195)*x655))+(((-1.0)*px))+(((-0.454)*sj7))+((r01*x649))+((r00*x654)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x660=((1.0)*sj11);
CheckValue<IkReal> x661=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj10*r22))+((cj11*r20*sj10))+(((-1.0)*r21*sj10*x660)))),-1);
if(!x661.valid){
continue;
}
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r01))+(((-1.0)*r00*x660)))),IkReal(((((-1.0)*cj10*r01*x660))+((r02*sj10))+((cj10*cj11*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x661.value)))+(x662.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x663=IKsin(j9);
IkReal x664=IKcos(j9);
IkReal x665=(cj11*r10);
IkReal x666=(cj11*r11);
IkReal x667=(r11*sj11);
IkReal x668=(r10*sj11);
IkReal x669=((1.0)*cj11);
IkReal x670=(cj10*x663);
IkReal x671=((1.0)*x664);
IkReal x672=((1.0)*sj10*x663);
evalcond[0]=(((cj10*x664*x667))+(((-1.0)*r12*sj10*x671))+((x663*x668))+((x663*x666))+(((-1.0)*cj10*x665*x671)));
evalcond[1]=((((-1.0)*r22*x672))+((r21*sj11*x670))+(((-1.0)*r20*sj11*x671))+(((-1.0)*r21*x664*x669))+(((-1.0)*r20*x669*x670)));
evalcond[2]=(((r01*sj11*x670))+(((-1.0)*r02*x672))+(((-1.0)*r00*sj11*x671))+(((-1.0)*r00*x669*x670))+(((-1.0)*r01*x664*x669)));
evalcond[3]=((-1.0)+(((-1.0)*x668*x671))+((x667*x670))+(((-1.0)*x666*x671))+(((-1.0)*x665*x670))+(((-1.0)*r12*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x673=((4.0)*pz);
IkReal x674=((12.0)*pz);
IkReal x675=((0.42)*cj11);
IkReal x676=(r00*sj10);
IkReal x677=((0.42)*sj11);
IkReal x678=(r20*sj9);
IkReal x679=((0.14)*cj10);
IkReal x680=(cj9*r20);
IkReal x681=((1.678)*sj10);
IkReal x682=(r21*sj11);
IkReal x683=(cj11*r20);
IkReal x684=(r01*sj10);
IkReal x685=((5.034)*sj10);
IkReal x686=((0.14)*sj11);
IkReal x687=(cj11*r21);
IkReal x688=(r20*sj11);
IkReal x689=(cj10*r22);
IkReal x690=((0.004)*x687);
IkReal x691=((0.004)*x688);
IkReal x692=((1.678)*x689);
IkReal x693=((5.034)*x689);
IkReal x694=((0.012)*x687);
IkReal x695=((0.012)*x688);
IkReal x696=(cj9*r22*sj10);
IkReal x697=(x681*x682);
IkReal x698=(x681*x683);
IkReal x699=(x682*x685);
IkReal x700=(x683*x685);
IkReal x701=(r21*sj9*x675);
IkReal x702=(x677*x678);
IkReal x703=(x675*x676);
IkReal x704=(cj10*cj9*r21*x677);
IkReal x705=(x674+x700);
IkReal x706=(x673+x698);
IkReal x707=(((x677*x684))+x705+(((0.42)*cj10*r02)));
IkReal x708=(x694+x695+x693+x699);
IkReal x709=(x702+x701+x704);
IkReal x710=((-1.816)+x697+x690+x691+x692);
IkReal x711=(((cj10*x675*x680))+(((0.42)*x696))+x705);
j7eval[0]=((IKabs(((1.816)+(((-1.0)*x711))+x708+x709)))+(IKabs(((1.816)+(((-1.0)*x707))+x708+x703)))+(IKabs(((((-1.0)*r02*x679))+(((-1.0)*x684*x686))+(((-1.0)*x706))+x710+(((0.14)*cj11*x676)))))+(IKabs(((-1.816)+(((-1.0)*x711))+x708+x709)))+(IKabs(((-1.816)+(((-1.0)*x707))+x708+x703)))+(IKabs((((x678*x686))+(((0.14)*sj9*x687))+(((-1.0)*x706))+x710+((cj9*x679*x682))+(((-0.14)*x696))+(((-1.0)*cj11*x679*x680))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x712=(sj10*sj11);
IkReal x713=(r20*sj11);
IkReal x714=(cj10*r02);
IkReal x715=(cj11*r21);
IkReal x716=(cj10*r22);
IkReal x717=((5.034)*x716);
IkReal x718=((0.012)*x715);
IkReal x719=((0.012)*x713);
IkReal x720=((0.004)*x715);
IkReal x721=((0.004)*x713);
IkReal x722=((1.678)*x716);
IkReal x723=(cj11*r20*sj10);
IkReal x724=(cj11*r00*sj10);
IkReal x725=((0.42)*x724);
IkReal x726=((5.034)*r21*x712);
IkReal x727=((1.678)*r21*x712);
IkReal x728=((0.14)*x724);
IkReal x729=((((12.0)*pz))+(((5.034)*x723))+(((0.42)*r01*x712))+(((0.42)*x714)));
IkReal x730=((((0.14)*x714))+(((4.0)*pz))+(((0.14)*r01*x712))+(((1.678)*x723)));
IkReal x731=(x720+x721+x722+x727+x728);
IkReal x732=(x719+x718+x717+x725+x726);
op[0]=((-1.816)+(((-1.0)*x730))+x731);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x729))+x732);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x729))+x732);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x730))+x731);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x733=((0.42)*r20);
IkReal x734=(sj11*sj9);
IkReal x735=((0.14)*r20);
IkReal x736=((1.678)*sj10);
IkReal x737=(r21*sj11);
IkReal x738=(cj11*r20);
IkReal x739=((0.42)*cj9);
IkReal x740=(r22*sj10);
IkReal x741=((5.034)*sj10);
IkReal x742=(cj11*r21);
IkReal x743=(r20*sj11);
IkReal x744=((0.14)*cj9);
IkReal x745=(cj10*r22);
IkReal x746=((0.004)*x742);
IkReal x747=((0.004)*x743);
IkReal x748=((1.678)*x745);
IkReal x749=((5.034)*x745);
IkReal x750=((0.012)*x742);
IkReal x751=((0.012)*x743);
IkReal x752=(cj10*cj11*cj9);
IkReal x753=(x736*x737);
IkReal x754=(x734*x735);
IkReal x755=(x737*x741);
IkReal x756=((0.42)*sj9*x742);
IkReal x757=(x733*x734);
IkReal x758=((0.14)*sj9*x742);
IkReal x759=(cj10*x737*x744);
IkReal x760=(cj10*x737*x739);
IkReal x761=(((x738*x741))+(((12.0)*pz))+((x739*x740))+((x733*x752)));
IkReal x762=(((x735*x752))+(((4.0)*pz))+((x736*x738))+((x740*x744)));
IkReal x763=(x755+x757+x756+x751+x750+x749+x760);
IkReal x764=(x754+x753+x759+x758+x746+x747+x748);
j7evalpoly[0]=((1.816)+(((htj7*htj7)*(((1.816)+(((-1.0)*x761))+x763))))+(((-1.0)*x762))+x764+(((htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x761))+x763))))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x762))+x764)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x765=((1.0)*cj7);
IkReal x766=(cj10*r22);
IkReal x767=(sj10*sj11);
IkReal x768=((1.0)*sj7);
IkReal x769=(cj10*r02);
IkReal x770=(sj7*x767);
IkReal x771=(cj11*r00*sj10);
IkReal x772=(cj11*r20*sj10);
if( IKabs(((((-1.0)*x768*x771))+(((-1.0)*x765*x766))+((sj7*x769))+(((-1.0)*r21*x765*x767))+((cj7*x772))+((r01*x770)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x765*x769))+(((-1.0)*x766*x768))+(((-1.0)*r21*x767*x768))+((sj7*x772))+((cj7*x771))+(((-1.0)*r01*x765*x767)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x768*x771))+(((-1.0)*x765*x766))+((sj7*x769))+(((-1.0)*r21*x765*x767))+((cj7*x772))+((r01*x770))))+IKsqr(((((-1.0)*x765*x769))+(((-1.0)*x766*x768))+(((-1.0)*r21*x767*x768))+((sj7*x772))+((cj7*x771))+(((-1.0)*r01*x765*x767))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x768*x771))+(((-1.0)*x765*x766))+((sj7*x769))+(((-1.0)*r21*x765*x767))+((cj7*x772))+((r01*x770))), ((((-1.0)*x765*x769))+(((-1.0)*x766*x768))+(((-1.0)*r21*x767*x768))+((sj7*x772))+((cj7*x771))+(((-1.0)*r01*x765*x767))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x773=IKsin(j8);
IkReal x774=IKcos(j8);
IkReal x775=(r21*sj11);
IkReal x776=((1.0)*sj10);
IkReal x777=((0.035)*sj7);
IkReal x778=((1.0)*cj10);
IkReal x779=(cj10*cj9);
IkReal x780=(r01*sj11);
IkReal x781=((0.001)*cj11);
IkReal x782=(cj11*sj9);
IkReal x783=(sj11*sj9);
IkReal x784=(cj11*r20);
IkReal x785=(cj11*r00);
IkReal x786=((0.001)*sj11);
IkReal x787=(sj7*x773);
IkReal x788=(cj7*x773);
IkReal x789=(sj7*x774);
IkReal x790=(cj7*x774);
IkReal x791=((1.0)*x790);
evalcond[0]=((((-1.0)*x791))+(((-1.0)*x776*x780))+(((-1.0)*r02*x778))+((sj10*x785))+x787);
evalcond[1]=((((-1.0)*r22*x778))+(((-1.0)*x775*x776))+((sj10*x784))+(((-1.0)*x789))+(((-1.0)*x788)));
evalcond[2]=(((r00*x783))+((r01*x782))+((x779*x780))+(((-1.0)*cj9*x778*x785))+(((-1.0)*cj9*r02*x776))+x788+x789);
evalcond[3]=(((r20*x783))+(((-1.0)*x791))+(((-1.0)*cj9*r22*x776))+(((-1.0)*cj9*x778*x784))+((r21*x782))+x787+((x775*x779)));
evalcond[4]=(((r20*x786))+(((-0.4195)*x789))+(((-0.4195)*x788))+(((0.454)*cj7))+(((-1.0)*pz))+((r21*x781))+(((-1.0)*x773*x777))+(((0.035)*x790)));
evalcond[5]=((-0.025)+((r00*x786))+(((-0.035)*x788))+((r01*x781))+(((-0.4195)*x790))+(((-1.0)*x774*x777))+(((0.4195)*x787))+(((-1.0)*px))+(((-0.454)*sj7)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x792=((1.0)*cj11);
IkReal x793=((1.0)*sj11);
CheckValue<IkReal> x794 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x793))+(((-1.0)*r21*x792)))),IkReal((((r22*sj10))+(((-1.0)*cj10*r21*x793))+((cj10*cj11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj10*x792))+((r01*sj10*sj11))+((cj10*r02)))),-1);
if(!x795.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x794.value)+(((1.5707963267949)*(x795.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x796=IKsin(j9);
IkReal x797=IKcos(j9);
IkReal x798=(cj11*r10);
IkReal x799=(cj11*r11);
IkReal x800=(r11*sj11);
IkReal x801=(r10*sj11);
IkReal x802=((1.0)*cj11);
IkReal x803=(cj10*x796);
IkReal x804=((1.0)*x797);
IkReal x805=((1.0)*sj10*x796);
evalcond[0]=(((x796*x799))+((cj10*x797*x800))+(((-1.0)*r12*sj10*x804))+(((-1.0)*cj10*x798*x804))+((x796*x801)));
evalcond[1]=((((-1.0)*r20*sj11*x804))+(((-1.0)*r22*x805))+(((-1.0)*r20*x802*x803))+((r21*sj11*x803))+(((-1.0)*r21*x797*x802)));
evalcond[2]=((((-1.0)*r00*x802*x803))+(((-1.0)*r00*sj11*x804))+(((-1.0)*r02*x805))+((r01*sj11*x803))+(((-1.0)*r01*x797*x802)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x805))+(((-1.0)*x799*x804))+((x800*x803))+(((-1.0)*x798*x803))+(((-1.0)*x801*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=0;
cj6=-1.0;
j6=3.14159265358979;
IkReal x806=((4.0)*pz);
IkReal x807=((12.0)*pz);
IkReal x808=((0.42)*cj11);
IkReal x809=(r00*sj10);
IkReal x810=((0.42)*sj11);
IkReal x811=(r20*sj9);
IkReal x812=((0.14)*cj10);
IkReal x813=(cj9*r20);
IkReal x814=((1.678)*sj10);
IkReal x815=(r21*sj11);
IkReal x816=(cj11*r20);
IkReal x817=(r01*sj10);
IkReal x818=((5.034)*sj10);
IkReal x819=((0.14)*sj11);
IkReal x820=(cj11*r21);
IkReal x821=(r20*sj11);
IkReal x822=(cj10*r22);
IkReal x823=((0.004)*x820);
IkReal x824=((0.004)*x821);
IkReal x825=((1.678)*x822);
IkReal x826=((5.034)*x822);
IkReal x827=((0.012)*x820);
IkReal x828=((0.012)*x821);
IkReal x829=(cj9*r22*sj10);
IkReal x830=(x814*x815);
IkReal x831=(x814*x816);
IkReal x832=(x815*x818);
IkReal x833=(x816*x818);
IkReal x834=(r21*sj9*x808);
IkReal x835=(x810*x811);
IkReal x836=(x808*x809);
IkReal x837=(cj10*cj9*r21*x810);
IkReal x838=(x833+x807);
IkReal x839=(x831+x806);
IkReal x840=(((x810*x817))+(((0.42)*cj10*r02))+x838);
IkReal x841=(x828+x827+x826+x832);
IkReal x842=(x834+x835+x837);
IkReal x843=((-1.816)+x823+x825+x824+x830);
IkReal x844=((((0.42)*x829))+((cj10*x808*x813))+x838);
j7eval[0]=((IKabs(((((-1.0)*x817*x819))+(((-1.0)*x839))+x843+(((-1.0)*r02*x812))+(((0.14)*cj11*x809)))))+(IKabs(((1.816)+(((-1.0)*x840))+x836+x841)))+(IKabs(((-1.816)+(((-1.0)*x840))+x836+x841)))+(IKabs(((1.816)+(((-1.0)*x844))+x841+x842)))+(IKabs(((-1.816)+(((-1.0)*x844))+x841+x842)))+(IKabs(((((-0.14)*x829))+((x811*x819))+(((-1.0)*x839))+x843+(((0.14)*sj9*x820))+(((-1.0)*cj11*x812*x813))+((cj9*x812*x815))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x845=(sj10*sj11);
IkReal x846=(r20*sj11);
IkReal x847=(cj10*r02);
IkReal x848=(cj11*r21);
IkReal x849=(cj10*r22);
IkReal x850=((5.034)*x849);
IkReal x851=((0.012)*x848);
IkReal x852=((0.012)*x846);
IkReal x853=((0.004)*x848);
IkReal x854=((0.004)*x846);
IkReal x855=((1.678)*x849);
IkReal x856=(cj11*r20*sj10);
IkReal x857=(cj11*r00*sj10);
IkReal x858=((0.42)*x857);
IkReal x859=((5.034)*r21*x845);
IkReal x860=((1.678)*r21*x845);
IkReal x861=((0.14)*x857);
IkReal x862=((((12.0)*pz))+(((0.42)*r01*x845))+(((5.034)*x856))+(((0.42)*x847)));
IkReal x863=((((4.0)*pz))+(((1.678)*x856))+(((0.14)*r01*x845))+(((0.14)*x847)));
IkReal x864=(x853+x854+x855+x861+x860);
IkReal x865=(x852+x850+x851+x858+x859);
op[0]=((-1.816)+(((-1.0)*x863))+x864);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x862))+x865);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x862))+x865);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x863))+x864);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x866=((0.42)*r20);
IkReal x867=(sj11*sj9);
IkReal x868=((0.14)*r20);
IkReal x869=((1.678)*sj10);
IkReal x870=(r21*sj11);
IkReal x871=(cj11*r20);
IkReal x872=((0.42)*cj9);
IkReal x873=(r22*sj10);
IkReal x874=((5.034)*sj10);
IkReal x875=(cj11*r21);
IkReal x876=(r20*sj11);
IkReal x877=((0.14)*cj9);
IkReal x878=(cj10*r22);
IkReal x879=((0.004)*x875);
IkReal x880=((0.004)*x876);
IkReal x881=((1.678)*x878);
IkReal x882=((5.034)*x878);
IkReal x883=((0.012)*x875);
IkReal x884=((0.012)*x876);
IkReal x885=(cj10*cj11*cj9);
IkReal x886=(x869*x870);
IkReal x887=(x867*x868);
IkReal x888=(x870*x874);
IkReal x889=((0.42)*sj9*x875);
IkReal x890=(x866*x867);
IkReal x891=((0.14)*sj9*x875);
IkReal x892=(cj10*x870*x877);
IkReal x893=(cj10*x870*x872);
IkReal x894=(((x872*x873))+((x871*x874))+(((12.0)*pz))+((x866*x885)));
IkReal x895=(((x868*x885))+(((4.0)*pz))+((x873*x877))+((x869*x871)));
IkReal x896=(x884+x883+x882+x889+x888+x893+x890);
IkReal x897=(x879+x887+x886+x881+x880+x892+x891);
j7evalpoly[0]=((1.816)+(((htj7*htj7)*(((1.816)+(((-1.0)*x894))+x896))))+(((-1.0)*x895))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x895))+x897))))+(((htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x894))+x896))))+x897);
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x898=((1.0)*cj7);
IkReal x899=(cj10*r22);
IkReal x900=(sj10*sj11);
IkReal x901=((1.0)*sj7);
IkReal x902=(cj10*r02);
IkReal x903=(sj7*x900);
IkReal x904=(cj11*r00*sj10);
IkReal x905=(cj11*r20*sj10);
if( IKabs(((((-1.0)*x898*x899))+((r01*x903))+((sj7*x902))+((cj7*x905))+(((-1.0)*x901*x904))+(((-1.0)*r21*x898*x900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x900*x901))+(((-1.0)*x898*x902))+((sj7*x905))+((cj7*x904))+(((-1.0)*r01*x898*x900))+(((-1.0)*x899*x901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x898*x899))+((r01*x903))+((sj7*x902))+((cj7*x905))+(((-1.0)*x901*x904))+(((-1.0)*r21*x898*x900))))+IKsqr(((((-1.0)*r21*x900*x901))+(((-1.0)*x898*x902))+((sj7*x905))+((cj7*x904))+(((-1.0)*r01*x898*x900))+(((-1.0)*x899*x901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x898*x899))+((r01*x903))+((sj7*x902))+((cj7*x905))+(((-1.0)*x901*x904))+(((-1.0)*r21*x898*x900))), ((((-1.0)*r21*x900*x901))+(((-1.0)*x898*x902))+((sj7*x905))+((cj7*x904))+(((-1.0)*r01*x898*x900))+(((-1.0)*x899*x901))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x906=IKsin(j8);
IkReal x907=IKcos(j8);
IkReal x908=(r21*sj11);
IkReal x909=((1.0)*sj10);
IkReal x910=((0.035)*sj7);
IkReal x911=((1.0)*cj10);
IkReal x912=(cj10*cj9);
IkReal x913=(r01*sj11);
IkReal x914=((0.001)*cj11);
IkReal x915=(cj11*sj9);
IkReal x916=(sj11*sj9);
IkReal x917=(cj11*r20);
IkReal x918=(cj11*r00);
IkReal x919=((0.001)*sj11);
IkReal x920=(sj7*x906);
IkReal x921=(cj7*x906);
IkReal x922=(sj7*x907);
IkReal x923=(cj7*x907);
IkReal x924=((1.0)*x923);
evalcond[0]=((((-1.0)*x924))+(((-1.0)*r02*x911))+((sj10*x918))+x920+(((-1.0)*x909*x913)));
evalcond[1]=((((-1.0)*x908*x909))+(((-1.0)*r22*x911))+(((-1.0)*x921))+(((-1.0)*x922))+((sj10*x917)));
evalcond[2]=((((-1.0)*cj9*r02*x909))+(((-1.0)*cj9*x911*x918))+((x912*x913))+x922+x921+((r01*x915))+((r00*x916)));
evalcond[3]=((((-1.0)*cj9*r22*x909))+(((-1.0)*x924))+(((-1.0)*cj9*x911*x917))+((r20*x916))+((x908*x912))+((r21*x915))+x920);
evalcond[4]=((((-1.0)*x906*x910))+(((-0.4195)*x921))+(((-0.4195)*x922))+(((0.454)*cj7))+(((0.035)*x923))+((r20*x919))+(((-1.0)*pz))+((r21*x914)));
evalcond[5]=((-0.025)+(((-0.4195)*x923))+(((0.4195)*x920))+(((-1.0)*px))+(((-0.454)*sj7))+(((-0.035)*x921))+(((-1.0)*x907*x910))+((r01*x914))+((r00*x919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x925=((1.0)*sj11);
IkReal x926=((1.0)*cj11);
IkReal x927=(((cj10*r22))+(((-1.0)*r20*sj10*x926))+((r21*sj10*sj11)));
j9eval[0]=x927;
j9eval[1]=IKsign(x927);
j9eval[2]=((IKabs((((r12*sj10))+((cj10*cj11*r10))+(((-1.0)*cj10*r11*x925)))))+(IKabs(((((-1.0)*r11*x926))+(((-1.0)*r10*x925))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x928=((1.0)*sj11);
IkReal x929=((((-1.0)*r11*sj10*x928))+(((-1.0)*cj10*r12))+((cj11*r10*sj10)));
j9eval[0]=x929;
j9eval[1]=((IKabs(((((-1.0)*cj11*r21))+(((-1.0)*r20*x928)))))+(IKabs(((((-1.0)*cj10*r21*x928))+((r22*sj10))+((cj10*cj11*r20))))));
j9eval[2]=IKsign(x929);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x930=r01*r01;
IkReal x931=cj10*cj10;
IkReal x932=cj11*cj11;
IkReal x933=r00*r00;
IkReal x934=r02*r02;
IkReal x935=(r01*sj11);
IkReal x936=(r02*sj10);
IkReal x937=((1.0)*r00);
IkReal x938=((2.0)*cj11*r00);
IkReal x939=(x931*x932);
IkReal x940=(((x935*x938))+(((-1.0)*x931*x934))+((x930*x932))+((x930*x931))+(((-1.0)*x930*x939))+(((-1.0)*x931*x935*x938))+(((-1.0)*x932*x933))+(((-2.0)*cj10*x935*x936))+x934+x933+((x933*x939))+((cj10*x936*x938)));
j9eval[0]=x940;
j9eval[1]=((IKabs(((((-1.0)*x936))+(((-1.0)*cj10*cj11*x937))+((cj10*x935)))))+(IKabs(((((-1.0)*cj11*r01))+(((-1.0)*sj11*x937))))));
j9eval[2]=IKsign(x940);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8, j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x941=r01*r01;
IkReal x942=cj10*cj10;
IkReal x943=cj11*cj11;
IkReal x944=r00*r00;
IkReal x945=r02*r02;
IkReal x946=(cj11*r00);
IkReal x947=(r02*sj10);
IkReal x948=((2.0)*r01*sj11);
IkReal x949=((1.0)*x942);
IkReal x950=(x941*x943);
IkReal x951=(x943*x944);
CheckValue<IkReal> x952=IKPowWithIntegerCheck(IKsign(((((-1.0)*x942*x946*x948))+(((-1.0)*cj10*x947*x948))+((x946*x948))+(((-1.0)*x945*x949))+(((-1.0)*x951))+((x941*x942))+(((2.0)*cj10*x946*x947))+((x942*x951))+(((-1.0)*x949*x950))+x950+x944+x945)),-1);
if(!x952.valid){
continue;
}
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((((-1.0)*cj10*x946))+(((-1.0)*x947))+((cj10*r01*sj11)))),IkReal(((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x952.value)))+(x953.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x954=IKsin(j9);
IkReal x955=IKcos(j9);
IkReal x956=(cj10*r00);
IkReal x957=((1.0)*r20);
IkReal x958=(r00*sj11);
IkReal x959=(cj10*x954);
IkReal x960=((1.0)*x955);
IkReal x961=(cj11*x954);
IkReal x962=(sj11*x955);
IkReal x963=(cj11*x960);
IkReal x964=((1.0)*sj10*x954);
evalcond[0]=(((cj10*r01*x962))+(((-1.0)*x956*x963))+(((-1.0)*r02*sj10*x960))+((r01*x961))+((x954*x958)));
evalcond[1]=((((-1.0)*r21*x963))+(((-1.0)*x957*x962))+(((-1.0)*r22*x964))+(((-1.0)*cj11*x957*x959))+((r21*sj11*x959)));
evalcond[2]=((((-1.0)*r10*sj11*x960))+((r11*sj11*x959))+(((-1.0)*cj11*r10*x959))+(((-1.0)*r12*x964))+(((-1.0)*r11*x963)));
evalcond[3]=((-1.0)+(((-1.0)*x956*x961))+(((-1.0)*r01*x963))+(((-1.0)*x958*x960))+((r01*sj11*x959))+(((-1.0)*r02*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x965=((5.034)*py);
IkReal x966=((0.42)*pz);
IkReal x967=((12.0)*pz);
IkReal x968=(cj11*sj10);
IkReal x969=(r10*sj11);
IkReal x970=(cj10*r12);
IkReal x971=(cj11*r21);
IkReal x972=(r20*sj11);
IkReal x973=(cj11*r11);
IkReal x974=(cj10*r22);
IkReal x975=(r11*sj10*sj11);
IkReal x976=(r21*sj10*sj11);
IkReal x977=((2.126463)*r10*x968);
IkReal x978=((0.42)*r10*x968);
IkReal x979=((5.034)*r20*x968);
IkReal x980=(x977+x966+x965);
IkReal x981=(x979+x978+x967);
IkReal x982=((((0.00042)*x972))+(((0.00042)*x971))+(((2.126463)*x970))+(((2.126463)*x975))+(((0.005034)*x973))+(((0.005034)*x969)));
IkReal x983=((((0.42)*x970))+(((0.42)*x975))+(((5.034)*x974))+(((5.034)*x976))+(((0.012)*x972))+(((0.012)*x971)));
j7eval[0]=((6.094496)+(IKabs(((-0.18941)+(((-1.0)*x982))+x980)))+(IKabs(((-0.06229)+(((-1.0)*x982))+x980)))+(IKabs(((1.816)+(((-1.0)*x983))+x981)))+(IKabs(((1.816)+(((4.0)*pz))+(((-0.14)*x975))+(((-0.14)*x970))+(((1.678)*r20*x968))+(((-1.678)*x976))+(((-1.678)*x974))+(((0.14)*r10*x968))+(((-0.004)*x971))+(((-0.004)*x972)))))+(IKabs(((0.02161)+(((-0.001678)*x969))+(((-0.00014)*x971))+(((-0.00014)*x972))+(((0.14)*pz))+(((0.708821)*r10*x968))+(((-0.708821)*x975))+(((-0.708821)*x970))+(((1.678)*py))+(((-0.001678)*x973)))))+(IKabs(((-1.816)+(((-1.0)*x983))+x981))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x984=((12.0)*pz);
IkReal x985=((4.0)*pz);
IkReal x986=(cj10*r12);
IkReal x987=(r20*sj11);
IkReal x988=(cj11*r21);
IkReal x989=(cj10*r22);
IkReal x990=(r21*sj10*sj11);
IkReal x991=(cj11*r10*sj10);
IkReal x992=(cj11*r20*sj10);
IkReal x993=(r11*sj10*sj11);
IkReal x994=((0.42)*x991);
IkReal x995=((5.034)*x992);
IkReal x996=((0.14)*x991);
IkReal x997=((1.678)*x992);
IkReal x998=(x997+x996+x985);
IkReal x999=(x995+x994+x984);
IkReal x1000=((((0.42)*x986))+(((5.034)*x989))+(((5.034)*x990))+(((0.012)*x987))+(((0.012)*x988))+(((0.42)*x993)));
IkReal x1001=((((0.14)*x993))+(((1.678)*x989))+(((0.004)*x988))+(((0.004)*x987))+(((0.14)*x986))+(((1.678)*x990)));
op[0]=((1.816)+(((-1.0)*x1001))+x998);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x1000))+x999);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x1000))+x999);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x1001))+x998);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1002=((5.034)*py);
IkReal x1003=((0.42)*pz);
IkReal x1004=((0.14)*pz);
IkReal x1005=((1.678)*py);
IkReal x1006=(r10*sj11);
IkReal x1007=(cj10*r12);
IkReal x1008=(cj11*r21);
IkReal x1009=(r20*sj11);
IkReal x1010=(cj11*r11);
IkReal x1011=((0.001678)*x1010);
IkReal x1012=((0.708821)*x1007);
IkReal x1013=((0.00014)*x1009);
IkReal x1014=((0.00014)*x1008);
IkReal x1015=((0.001678)*x1006);
IkReal x1016=(cj11*r10*sj10);
IkReal x1017=(r11*sj10*sj11);
IkReal x1018=((2.126463)*x1016);
IkReal x1019=((0.708821)*x1016);
IkReal x1020=((0.708821)*x1017);
IkReal x1021=(x1018+x1003+x1002);
IkReal x1022=(x1019+x1005+x1004);
IkReal x1023=((((0.005034)*x1010))+(((0.00042)*x1009))+(((0.00042)*x1008))+(((2.126463)*x1007))+(((0.005034)*x1006))+(((2.126463)*x1017)));
IkReal x1024=(x1014+x1015+x1011+x1012+x1013+x1020);
j7evalpoly[0]=((-0.10551)+(((htj7*htj7*htj7*htj7)*(((-0.06229)+x1021+(((-1.0)*x1023))))))+(((-1.523624)*htj7))+x1022+(((-1.0)*x1024))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+x1022+(((-1.0)*x1024))))))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7)))+(((htj7*htj7)*(((-0.18941)+x1021+(((-1.0)*x1023)))))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1025=((1.0)*cj10);
IkReal x1026=(sj10*sj7);
IkReal x1027=((1.0)*sj11);
IkReal x1028=(cj11*r10);
IkReal x1029=(cj7*sj10);
IkReal x1030=(cj11*r20);
if( IKabs(((((-1.0)*r12*sj7*x1025))+(((-1.0)*cj7*r22*x1025))+(((-1.0)*r11*x1026*x1027))+((x1026*x1028))+((x1029*x1030))+(((-1.0)*r21*x1027*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj10*cj7*r12))+((x1026*x1030))+((r11*sj11*x1029))+(((-1.0)*r21*x1026*x1027))+(((-1.0)*r22*sj7*x1025))+(((-1.0)*x1028*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj7*x1025))+(((-1.0)*cj7*r22*x1025))+(((-1.0)*r11*x1026*x1027))+((x1026*x1028))+((x1029*x1030))+(((-1.0)*r21*x1027*x1029))))+IKsqr((((cj10*cj7*r12))+((x1026*x1030))+((r11*sj11*x1029))+(((-1.0)*r21*x1026*x1027))+(((-1.0)*r22*sj7*x1025))+(((-1.0)*x1028*x1029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*r12*sj7*x1025))+(((-1.0)*cj7*r22*x1025))+(((-1.0)*r11*x1026*x1027))+((x1026*x1028))+((x1029*x1030))+(((-1.0)*r21*x1027*x1029))), (((cj10*cj7*r12))+((x1026*x1030))+((r11*sj11*x1029))+(((-1.0)*r21*x1026*x1027))+(((-1.0)*r22*sj7*x1025))+(((-1.0)*x1028*x1029))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1031=IKsin(j8);
IkReal x1032=IKcos(j8);
IkReal x1033=((0.035)*sj7);
IkReal x1034=((0.001)*sj11);
IkReal x1035=(cj11*sj10);
IkReal x1036=(cj11*r21);
IkReal x1037=((1.0)*r22);
IkReal x1038=(cj9*sj10);
IkReal x1039=(sj11*sj9);
IkReal x1040=(cj11*r11);
IkReal x1041=((1.0)*r12);
IkReal x1042=((1.0)*sj10*sj11);
IkReal x1043=(cj10*cj9*sj11);
IkReal x1044=((0.4195)*x1032);
IkReal x1045=(sj7*x1031);
IkReal x1046=(cj7*x1032);
IkReal x1047=(cj7*x1031);
IkReal x1048=((1.0)*x1047);
IkReal x1049=((1.0)*sj7*x1032);
IkReal x1050=((1.0)*cj10*cj11*cj9);
IkReal x1051=(x1049+x1048);
evalcond[0]=((((-1.0)*cj10*x1041))+((r10*x1035))+x1046+(((-1.0)*r11*x1042))+(((-1.0)*x1045)));
evalcond[1]=((((-1.0)*x1051))+((r20*x1035))+(((-1.0)*cj10*x1037))+(((-1.0)*r21*x1042)));
evalcond[2]=((((-1.0)*x1037*x1038))+x1045+((r20*x1039))+((r21*x1043))+(((-1.0)*x1046))+(((-1.0)*r20*x1050))+((sj9*x1036)));
evalcond[3]=(((sj9*x1040))+(((-1.0)*x1051))+((r10*x1039))+(((-1.0)*x1038*x1041))+((r11*x1043))+(((-1.0)*r10*x1050)));
evalcond[4]=((((-1.0)*sj7*x1044))+(((0.454)*cj7))+(((-1.0)*pz))+(((-0.4195)*x1047))+((r20*x1034))+(((-1.0)*x1031*x1033))+(((0.035)*x1046))+(((0.001)*x1036)));
evalcond[5]=((0.025)+((r10*x1034))+(((0.001)*x1040))+((cj7*x1044))+(((-1.0)*py))+(((-0.4195)*x1045))+(((0.454)*sj7))+(((0.035)*x1047))+((x1032*x1033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1052=((1.0)*sj11);
CheckValue<IkReal> x1053 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*r21))+(((-1.0)*r20*x1052)))),IkReal(((((-1.0)*cj10*r21*x1052))+((r22*sj10))+((cj10*cj11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1053.valid){
continue;
}
CheckValue<IkReal> x1054=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj10*x1052))+(((-1.0)*cj10*r12))+((cj11*r10*sj10)))),-1);
if(!x1054.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1053.value)+(((1.5707963267949)*(x1054.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x1055=IKsin(j9);
IkReal x1056=IKcos(j9);
IkReal x1057=(cj10*r00);
IkReal x1058=((1.0)*r20);
IkReal x1059=(r00*sj11);
IkReal x1060=(cj10*x1055);
IkReal x1061=((1.0)*x1056);
IkReal x1062=(cj11*x1055);
IkReal x1063=(sj11*x1056);
IkReal x1064=(cj11*x1061);
IkReal x1065=((1.0)*sj10*x1055);
evalcond[0]=(((x1055*x1059))+((cj10*r01*x1063))+(((-1.0)*x1057*x1064))+((r01*x1062))+(((-1.0)*r02*sj10*x1061)));
evalcond[1]=((((-1.0)*r21*x1064))+(((-1.0)*r22*x1065))+(((-1.0)*x1058*x1063))+(((-1.0)*cj11*x1058*x1060))+((r21*sj11*x1060)));
evalcond[2]=((((-1.0)*r11*x1064))+(((-1.0)*r12*x1065))+(((-1.0)*r10*sj11*x1061))+((r11*sj11*x1060))+(((-1.0)*cj11*r10*x1060)));
evalcond[3]=((-1.0)+(((-1.0)*x1057*x1062))+(((-1.0)*r01*x1064))+(((-1.0)*r02*x1065))+(((-1.0)*x1059*x1061))+((r01*sj11*x1060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1066=((5.034)*py);
IkReal x1067=((0.42)*pz);
IkReal x1068=((12.0)*pz);
IkReal x1069=(cj11*sj10);
IkReal x1070=(r10*sj11);
IkReal x1071=(cj10*r12);
IkReal x1072=(cj11*r21);
IkReal x1073=(r20*sj11);
IkReal x1074=(cj11*r11);
IkReal x1075=(cj10*r22);
IkReal x1076=(r11*sj10*sj11);
IkReal x1077=(r21*sj10*sj11);
IkReal x1078=((2.126463)*r10*x1069);
IkReal x1079=((0.42)*r10*x1069);
IkReal x1080=((5.034)*r20*x1069);
IkReal x1081=(x1078+x1067+x1066);
IkReal x1082=(x1079+x1068+x1080);
IkReal x1083=((((0.00042)*x1072))+(((0.00042)*x1073))+(((0.005034)*x1070))+(((0.005034)*x1074))+(((2.126463)*x1071))+(((2.126463)*x1076)));
IkReal x1084=((((0.42)*x1071))+(((0.42)*x1076))+(((5.034)*x1075))+(((5.034)*x1077))+(((0.012)*x1073))+(((0.012)*x1072)));
j7eval[0]=((6.094496)+(IKabs(((1.816)+(((4.0)*pz))+(((1.678)*r20*x1069))+(((-0.14)*x1071))+(((-0.14)*x1076))+(((0.14)*r10*x1069))+(((-0.004)*x1073))+(((-0.004)*x1072))+(((-1.678)*x1077))+(((-1.678)*x1075)))))+(IKabs(((-0.06229)+x1081+(((-1.0)*x1083)))))+(IKabs(((-0.18941)+x1081+(((-1.0)*x1083)))))+(IKabs(((-1.816)+x1082+(((-1.0)*x1084)))))+(IKabs(((1.816)+x1082+(((-1.0)*x1084)))))+(IKabs(((0.02161)+(((-0.708821)*x1076))+(((-0.708821)*x1071))+(((-0.00014)*x1073))+(((-0.00014)*x1072))+(((0.14)*pz))+(((0.708821)*r10*x1069))+(((-0.001678)*x1074))+(((-0.001678)*x1070))+(((1.678)*py))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1085=((12.0)*pz);
IkReal x1086=((4.0)*pz);
IkReal x1087=(cj10*r12);
IkReal x1088=(r20*sj11);
IkReal x1089=(cj11*r21);
IkReal x1090=(cj10*r22);
IkReal x1091=(r21*sj10*sj11);
IkReal x1092=(cj11*r10*sj10);
IkReal x1093=(cj11*r20*sj10);
IkReal x1094=(r11*sj10*sj11);
IkReal x1095=((0.42)*x1092);
IkReal x1096=((5.034)*x1093);
IkReal x1097=((0.14)*x1092);
IkReal x1098=((1.678)*x1093);
IkReal x1099=(x1097+x1098+x1086);
IkReal x1100=(x1095+x1096+x1085);
IkReal x1101=((((0.42)*x1087))+(((0.42)*x1094))+(((0.012)*x1088))+(((0.012)*x1089))+(((5.034)*x1091))+(((5.034)*x1090)));
IkReal x1102=((((0.14)*x1094))+(((1.678)*x1090))+(((1.678)*x1091))+(((0.14)*x1087))+(((0.004)*x1088))+(((0.004)*x1089)));
op[0]=((1.816)+x1099+(((-1.0)*x1102)));
op[1]=0;
op[2]=((1.816)+x1100+(((-1.0)*x1101)));
op[3]=0;
op[4]=((-1.816)+x1100+(((-1.0)*x1101)));
op[5]=0;
op[6]=((-1.816)+x1099+(((-1.0)*x1102)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1103=((5.034)*py);
IkReal x1104=((0.42)*pz);
IkReal x1105=((0.14)*pz);
IkReal x1106=((1.678)*py);
IkReal x1107=(r10*sj11);
IkReal x1108=(cj10*r12);
IkReal x1109=(cj11*r21);
IkReal x1110=(r20*sj11);
IkReal x1111=(cj11*r11);
IkReal x1112=((0.001678)*x1111);
IkReal x1113=((0.708821)*x1108);
IkReal x1114=((0.00014)*x1110);
IkReal x1115=((0.00014)*x1109);
IkReal x1116=((0.001678)*x1107);
IkReal x1117=(cj11*r10*sj10);
IkReal x1118=(r11*sj10*sj11);
IkReal x1119=((2.126463)*x1117);
IkReal x1120=((0.708821)*x1117);
IkReal x1121=((0.708821)*x1118);
IkReal x1122=(x1104+x1103+x1119);
IkReal x1123=(x1106+x1105+x1120);
IkReal x1124=((((0.00042)*x1110))+(((0.00042)*x1109))+(((2.126463)*x1118))+(((2.126463)*x1108))+(((0.005034)*x1107))+(((0.005034)*x1111)));
IkReal x1125=(x1113+x1112+x1115+x1114+x1116+x1121);
j7evalpoly[0]=((-0.10551)+(((htj7*htj7)*(((-0.18941)+x1122+(((-1.0)*x1124))))))+x1123+(((-1.523624)*htj7))+(((htj7*htj7*htj7*htj7)*(((-0.06229)+x1122+(((-1.0)*x1124))))))+(((-1.0)*x1125))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+x1123+(((-1.0)*x1125))))))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1126=((1.0)*cj10);
IkReal x1127=(sj10*sj7);
IkReal x1128=((1.0)*sj11);
IkReal x1129=(cj11*r10);
IkReal x1130=(cj7*sj10);
IkReal x1131=(cj11*r20);
if( IKabs(((((-1.0)*r12*sj7*x1126))+((x1127*x1129))+((x1130*x1131))+(((-1.0)*r21*x1128*x1130))+(((-1.0)*r11*x1127*x1128))+(((-1.0)*cj7*r22*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1129*x1130))+((r11*sj11*x1130))+((cj10*cj7*r12))+(((-1.0)*r21*x1127*x1128))+(((-1.0)*r22*sj7*x1126))+((x1127*x1131)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj7*x1126))+((x1127*x1129))+((x1130*x1131))+(((-1.0)*r21*x1128*x1130))+(((-1.0)*r11*x1127*x1128))+(((-1.0)*cj7*r22*x1126))))+IKsqr(((((-1.0)*x1129*x1130))+((r11*sj11*x1130))+((cj10*cj7*r12))+(((-1.0)*r21*x1127*x1128))+(((-1.0)*r22*sj7*x1126))+((x1127*x1131))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*r12*sj7*x1126))+((x1127*x1129))+((x1130*x1131))+(((-1.0)*r21*x1128*x1130))+(((-1.0)*r11*x1127*x1128))+(((-1.0)*cj7*r22*x1126))), ((((-1.0)*x1129*x1130))+((r11*sj11*x1130))+((cj10*cj7*r12))+(((-1.0)*r21*x1127*x1128))+(((-1.0)*r22*sj7*x1126))+((x1127*x1131))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1132=IKsin(j8);
IkReal x1133=IKcos(j8);
IkReal x1134=((0.035)*sj7);
IkReal x1135=((0.001)*sj11);
IkReal x1136=(cj11*sj10);
IkReal x1137=(cj11*r21);
IkReal x1138=((1.0)*r22);
IkReal x1139=(cj9*sj10);
IkReal x1140=(sj11*sj9);
IkReal x1141=(cj11*r11);
IkReal x1142=((1.0)*r12);
IkReal x1143=((1.0)*sj10*sj11);
IkReal x1144=(cj10*cj9*sj11);
IkReal x1145=((0.4195)*x1133);
IkReal x1146=(sj7*x1132);
IkReal x1147=(cj7*x1133);
IkReal x1148=(cj7*x1132);
IkReal x1149=((1.0)*x1148);
IkReal x1150=((1.0)*sj7*x1133);
IkReal x1151=((1.0)*cj10*cj11*cj9);
IkReal x1152=(x1149+x1150);
evalcond[0]=(x1147+((r10*x1136))+(((-1.0)*x1146))+(((-1.0)*cj10*x1142))+(((-1.0)*r11*x1143)));
evalcond[1]=((((-1.0)*x1152))+(((-1.0)*cj10*x1138))+(((-1.0)*r21*x1143))+((r20*x1136)));
evalcond[2]=(x1146+(((-1.0)*x1147))+((r20*x1140))+(((-1.0)*x1138*x1139))+(((-1.0)*r20*x1151))+((r21*x1144))+((sj9*x1137)));
evalcond[3]=(((sj9*x1141))+(((-1.0)*x1152))+((r11*x1144))+(((-1.0)*r10*x1151))+(((-1.0)*x1139*x1142))+((r10*x1140)));
evalcond[4]=((((-0.4195)*x1148))+(((0.035)*x1147))+(((0.454)*cj7))+(((0.001)*x1137))+(((-1.0)*sj7*x1145))+(((-1.0)*pz))+(((-1.0)*x1132*x1134))+((r20*x1135)));
evalcond[5]=((0.025)+(((-0.4195)*x1146))+(((0.035)*x1148))+((r10*x1135))+(((-1.0)*py))+(((0.001)*x1141))+(((0.454)*sj7))+((x1133*x1134))+((cj7*x1145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1153=((1.0)*sj11);
IkReal x1154=((1.0)*cj11);
CheckValue<IkReal> x1155=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj10*x1154))+((cj10*r22))+((r21*sj10*sj11)))),-1);
if(!x1155.valid){
continue;
}
CheckValue<IkReal> x1156 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1154))+(((-1.0)*r10*x1153)))),IkReal(((((-1.0)*cj10*r11*x1153))+((r12*sj10))+((cj10*cj11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1156.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1155.value)))+(x1156.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x1157=IKsin(j9);
IkReal x1158=IKcos(j9);
IkReal x1159=(cj10*r00);
IkReal x1160=((1.0)*r20);
IkReal x1161=(r00*sj11);
IkReal x1162=(cj10*x1157);
IkReal x1163=((1.0)*x1158);
IkReal x1164=(cj11*x1157);
IkReal x1165=(sj11*x1158);
IkReal x1166=(cj11*x1163);
IkReal x1167=((1.0)*sj10*x1157);
evalcond[0]=((((-1.0)*x1159*x1166))+((r01*x1164))+((x1157*x1161))+((cj10*r01*x1165))+(((-1.0)*r02*sj10*x1163)));
evalcond[1]=((((-1.0)*cj11*x1160*x1162))+(((-1.0)*r21*x1166))+((r21*sj11*x1162))+(((-1.0)*r22*x1167))+(((-1.0)*x1160*x1165)));
evalcond[2]=((((-1.0)*cj11*r10*x1162))+(((-1.0)*r10*sj11*x1163))+(((-1.0)*r12*x1167))+(((-1.0)*r11*x1166))+((r11*sj11*x1162)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x1167))+(((-1.0)*x1159*x1164))+((r01*sj11*x1162))+(((-1.0)*r01*x1166))+(((-1.0)*x1161*x1163)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=1.0;
cj6=0;
j6=1.5707963267949;
IkReal x1168=((5.034)*py);
IkReal x1169=((0.42)*pz);
IkReal x1170=((12.0)*pz);
IkReal x1171=(cj11*sj10);
IkReal x1172=(r10*sj11);
IkReal x1173=(cj10*r12);
IkReal x1174=(cj11*r21);
IkReal x1175=(r20*sj11);
IkReal x1176=(cj11*r11);
IkReal x1177=(cj10*r22);
IkReal x1178=(r11*sj10*sj11);
IkReal x1179=(r21*sj10*sj11);
IkReal x1180=((2.126463)*r10*x1171);
IkReal x1181=((0.42)*r10*x1171);
IkReal x1182=((5.034)*r20*x1171);
IkReal x1183=(x1180+x1168+x1169);
IkReal x1184=(x1182+x1181+x1170);
IkReal x1185=((((0.00042)*x1174))+(((0.00042)*x1175))+(((0.005034)*x1176))+(((0.005034)*x1172))+(((2.126463)*x1178))+(((2.126463)*x1173)));
IkReal x1186=((((0.012)*x1175))+(((0.012)*x1174))+(((0.42)*x1178))+(((0.42)*x1173))+(((5.034)*x1177))+(((5.034)*x1179)));
j7eval[0]=((6.094496)+(IKabs(((1.816)+x1184+(((-1.0)*x1186)))))+(IKabs(((0.02161)+(((-0.00014)*x1174))+(((-0.00014)*x1175))+(((-0.708821)*x1173))+(((-0.708821)*x1178))+(((0.708821)*r10*x1171))+(((0.14)*pz))+(((1.678)*py))+(((-0.001678)*x1172))+(((-0.001678)*x1176)))))+(IKabs(((-0.18941)+x1183+(((-1.0)*x1185)))))+(IKabs(((-0.06229)+x1183+(((-1.0)*x1185)))))+(IKabs(((-1.816)+x1184+(((-1.0)*x1186)))))+(IKabs(((1.816)+(((4.0)*pz))+(((-0.14)*x1178))+(((-0.14)*x1173))+(((-1.678)*x1179))+(((-1.678)*x1177))+(((-0.004)*x1175))+(((-0.004)*x1174))+(((0.14)*r10*x1171))+(((1.678)*r20*x1171))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1187=((12.0)*pz);
IkReal x1188=((4.0)*pz);
IkReal x1189=(cj10*r12);
IkReal x1190=(r20*sj11);
IkReal x1191=(cj11*r21);
IkReal x1192=(cj10*r22);
IkReal x1193=(r21*sj10*sj11);
IkReal x1194=(cj11*r10*sj10);
IkReal x1195=(cj11*r20*sj10);
IkReal x1196=(r11*sj10*sj11);
IkReal x1197=((0.42)*x1194);
IkReal x1198=((5.034)*x1195);
IkReal x1199=((0.14)*x1194);
IkReal x1200=((1.678)*x1195);
IkReal x1201=(x1188+x1199+x1200);
IkReal x1202=(x1187+x1198+x1197);
IkReal x1203=((((0.012)*x1190))+(((0.012)*x1191))+(((0.42)*x1189))+(((0.42)*x1196))+(((5.034)*x1192))+(((5.034)*x1193)));
IkReal x1204=((((1.678)*x1193))+(((1.678)*x1192))+(((0.14)*x1189))+(((0.14)*x1196))+(((0.004)*x1191))+(((0.004)*x1190)));
op[0]=((1.816)+x1201+(((-1.0)*x1204)));
op[1]=0;
op[2]=((1.816)+x1202+(((-1.0)*x1203)));
op[3]=0;
op[4]=((-1.816)+x1202+(((-1.0)*x1203)));
op[5]=0;
op[6]=((-1.816)+x1201+(((-1.0)*x1204)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1205=((5.034)*py);
IkReal x1206=((0.42)*pz);
IkReal x1207=((0.14)*pz);
IkReal x1208=((1.678)*py);
IkReal x1209=(r10*sj11);
IkReal x1210=(cj10*r12);
IkReal x1211=(cj11*r21);
IkReal x1212=(r20*sj11);
IkReal x1213=(cj11*r11);
IkReal x1214=((0.001678)*x1213);
IkReal x1215=((0.708821)*x1210);
IkReal x1216=((0.00014)*x1212);
IkReal x1217=((0.00014)*x1211);
IkReal x1218=((0.001678)*x1209);
IkReal x1219=(cj11*r10*sj10);
IkReal x1220=(r11*sj10*sj11);
IkReal x1221=((2.126463)*x1219);
IkReal x1222=((0.708821)*x1219);
IkReal x1223=((0.708821)*x1220);
IkReal x1224=(x1205+x1206+x1221);
IkReal x1225=(x1208+x1207+x1222);
IkReal x1226=((((2.126463)*x1210))+(((0.005034)*x1209))+(((0.00042)*x1212))+(((0.00042)*x1211))+(((0.005034)*x1213))+(((2.126463)*x1220)));
IkReal x1227=(x1223+x1216+x1217+x1214+x1215+x1218);
j7evalpoly[0]=((-0.10551)+x1225+(((htj7*htj7)*(((-0.18941)+x1224+(((-1.0)*x1226))))))+(((-1.523624)*htj7))+(((-1.0)*x1227))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((0.02161)+x1225+(((-1.0)*x1227))))))+(((htj7*htj7*htj7*htj7)*(((-0.06229)+x1224+(((-1.0)*x1226))))))+(((-1.523624)*(htj7*htj7*htj7*htj7*htj7)))+(((-3.047248)*(htj7*htj7*htj7))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1228=((1.0)*cj10);
IkReal x1229=(sj10*sj7);
IkReal x1230=((1.0)*sj11);
IkReal x1231=(cj11*r10);
IkReal x1232=(cj7*sj10);
IkReal x1233=(cj11*r20);
if( IKabs(((((-1.0)*r12*sj7*x1228))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*cj7*r22*x1228))+((x1232*x1233))+((x1229*x1231))+(((-1.0)*r11*x1229*x1230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*sj7*x1228))+(((-1.0)*x1231*x1232))+((cj10*cj7*r12))+((r11*sj11*x1232))+(((-1.0)*r21*x1229*x1230))+((x1229*x1233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r12*sj7*x1228))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*cj7*r22*x1228))+((x1232*x1233))+((x1229*x1231))+(((-1.0)*r11*x1229*x1230))))+IKsqr(((((-1.0)*r22*sj7*x1228))+(((-1.0)*x1231*x1232))+((cj10*cj7*r12))+((r11*sj11*x1232))+(((-1.0)*r21*x1229*x1230))+((x1229*x1233))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*r12*sj7*x1228))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*cj7*r22*x1228))+((x1232*x1233))+((x1229*x1231))+(((-1.0)*r11*x1229*x1230))), ((((-1.0)*r22*sj7*x1228))+(((-1.0)*x1231*x1232))+((cj10*cj7*r12))+((r11*sj11*x1232))+(((-1.0)*r21*x1229*x1230))+((x1229*x1233))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1234=IKsin(j8);
IkReal x1235=IKcos(j8);
IkReal x1236=((0.035)*sj7);
IkReal x1237=((0.001)*sj11);
IkReal x1238=(cj11*sj10);
IkReal x1239=(cj11*r21);
IkReal x1240=((1.0)*r22);
IkReal x1241=(cj9*sj10);
IkReal x1242=(sj11*sj9);
IkReal x1243=(cj11*r11);
IkReal x1244=((1.0)*r12);
IkReal x1245=((1.0)*sj10*sj11);
IkReal x1246=(cj10*cj9*sj11);
IkReal x1247=((0.4195)*x1235);
IkReal x1248=(sj7*x1234);
IkReal x1249=(cj7*x1235);
IkReal x1250=(cj7*x1234);
IkReal x1251=((1.0)*x1250);
IkReal x1252=((1.0)*sj7*x1235);
IkReal x1253=((1.0)*cj10*cj11*cj9);
IkReal x1254=(x1252+x1251);
evalcond[0]=(x1249+(((-1.0)*x1248))+((r10*x1238))+(((-1.0)*r11*x1245))+(((-1.0)*cj10*x1244)));
evalcond[1]=((((-1.0)*x1254))+((r20*x1238))+(((-1.0)*r21*x1245))+(((-1.0)*cj10*x1240)));
evalcond[2]=((((-1.0)*r20*x1253))+x1248+(((-1.0)*x1249))+((r20*x1242))+((sj9*x1239))+(((-1.0)*x1240*x1241))+((r21*x1246)));
evalcond[3]=((((-1.0)*x1254))+((sj9*x1243))+((r11*x1246))+(((-1.0)*x1241*x1244))+((r10*x1242))+(((-1.0)*r10*x1253)));
evalcond[4]=((((-0.4195)*x1250))+((r20*x1237))+(((0.454)*cj7))+(((-1.0)*pz))+(((-1.0)*x1234*x1236))+(((0.035)*x1249))+(((-1.0)*sj7*x1247))+(((0.001)*x1239)));
evalcond[5]=((0.025)+((x1235*x1236))+(((0.035)*x1250))+((r10*x1237))+(((-1.0)*py))+((cj7*x1247))+(((-0.4195)*x1248))+(((0.454)*sj7))+(((0.001)*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1255=((1.0)*r21);
IkReal x1256=(((r11*sj10*sj11))+((cj10*r12))+(((-1.0)*cj11*r10*sj10)));
j9eval[0]=x1256;
j9eval[1]=IKsign(x1256);
j9eval[2]=((IKabs(((((-1.0)*r20*sj11))+(((-1.0)*cj11*x1255)))))+(IKabs(((((-1.0)*cj10*sj11*x1255))+((r22*sj10))+((cj10*cj11*r20))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1257=((1.0)*sj11);
IkReal x1258=((((-1.0)*r21*sj10*x1257))+(((-1.0)*cj10*r22))+((cj11*r20*sj10)));
j9eval[0]=x1258;
j9eval[1]=((IKabs(((((-1.0)*cj11*r11))+(((-1.0)*r10*x1257)))))+(IKabs((((r12*sj10))+((cj10*cj11*r10))+(((-1.0)*cj10*r11*x1257))))));
j9eval[2]=IKsign(x1258);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1259=cj10*cj10;
IkReal x1260=cj11*cj11;
IkReal x1261=r01*r01;
IkReal x1262=r00*r00;
IkReal x1263=r02*r02;
IkReal x1264=(cj11*r01);
IkReal x1265=(r02*sj10);
IkReal x1266=((2.0)*cj10);
IkReal x1267=(r01*sj11);
IkReal x1268=(cj11*r00);
IkReal x1269=(r00*sj11);
IkReal x1270=((1.0)*x1261);
IkReal x1271=(x1260*x1262);
IkReal x1272=(((x1259*x1260*x1261))+(((-1.0)*x1259*x1270))+x1271+(((-1.0)*x1260*x1270))+(((-1.0)*x1265*x1266*x1268))+((x1259*x1263))+(((2.0)*x1259*x1264*x1269))+((x1265*x1266*x1267))+(((-1.0)*x1263))+(((-1.0)*x1262))+(((-1.0)*x1259*x1271))+(((-2.0)*x1264*x1269)));
j9eval[0]=x1272;
j9eval[1]=((IKabs(((((-1.0)*x1264))+(((-1.0)*x1269)))))+(IKabs(((((-1.0)*cj10*x1268))+((cj10*x1267))+(((-1.0)*x1265))))));
j9eval[2]=IKsign(x1272);
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j7, j8, j9]

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1273=cj10*cj10;
IkReal x1274=cj11*cj11;
IkReal x1275=r01*r01;
IkReal x1276=r00*r00;
IkReal x1277=r02*r02;
IkReal x1278=(r02*sj10);
IkReal x1279=(cj10*cj11*r00);
IkReal x1280=((1.0)*x1275);
IkReal x1281=(cj10*r01*sj11);
IkReal x1282=(x1274*x1276);
IkReal x1283=((2.0)*cj11*r00*r01*sj11);
CheckValue<IkReal> x1284=IKPowWithIntegerCheck(IKsign((x1282+(((-1.0)*x1273*x1282))+(((2.0)*x1278*x1281))+((x1273*x1277))+(((-1.0)*x1273*x1280))+((x1273*x1274*x1275))+(((-2.0)*x1278*x1279))+(((-1.0)*x1276))+(((-1.0)*x1277))+(((-1.0)*x1283))+(((-1.0)*x1274*x1280))+((x1273*x1283)))),-1);
if(!x1284.valid){
continue;
}
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal((x1281+(((-1.0)*x1278))+(((-1.0)*x1279)))),IkReal(((((-1.0)*cj11*r01))+(((-1.0)*r00*sj11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1284.value)))+(x1285.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x1286=IKsin(j9);
IkReal x1287=IKcos(j9);
IkReal x1288=(cj10*r00);
IkReal x1289=((1.0)*r20);
IkReal x1290=(r00*sj11);
IkReal x1291=(cj10*x1286);
IkReal x1292=((1.0)*x1287);
IkReal x1293=(cj11*x1286);
IkReal x1294=(sj11*x1287);
IkReal x1295=(cj11*x1292);
IkReal x1296=((1.0)*sj10*x1286);
evalcond[0]=(((x1286*x1290))+((cj10*r01*x1294))+(((-1.0)*x1288*x1295))+(((-1.0)*r02*sj10*x1292))+((r01*x1293)));
evalcond[1]=((((-1.0)*cj11*x1289*x1291))+(((-1.0)*r21*x1295))+(((-1.0)*x1289*x1294))+((r21*sj11*x1291))+(((-1.0)*r22*x1296)));
evalcond[2]=(((r11*sj11*x1291))+(((-1.0)*cj11*r10*x1291))+(((-1.0)*r10*sj11*x1292))+(((-1.0)*r11*x1295))+(((-1.0)*r12*x1296)));
evalcond[3]=((1.0)+(((-1.0)*r01*x1295))+((r01*sj11*x1291))+(((-1.0)*x1290*x1292))+(((-1.0)*r02*x1296))+(((-1.0)*x1288*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1297=((4.0)*pz);
IkReal x1298=((12.0)*pz);
IkReal x1299=((0.42)*r20);
IkReal x1300=(sj11*sj9);
IkReal x1301=((0.14)*r20);
IkReal x1302=(sj10*sj11);
IkReal x1303=(cj11*sj10);
IkReal x1304=((0.42)*cj9);
IkReal x1305=(r22*sj10);
IkReal x1306=(cj11*r21);
IkReal x1307=(r20*sj11);
IkReal x1308=((0.14)*cj9);
IkReal x1309=(cj10*r12);
IkReal x1310=(cj10*r22);
IkReal x1311=((0.004)*x1306);
IkReal x1312=((0.004)*x1307);
IkReal x1313=((1.678)*x1310);
IkReal x1314=((5.034)*x1310);
IkReal x1315=((0.012)*x1306);
IkReal x1316=((0.012)*x1307);
IkReal x1317=(cj10*cj11*cj9);
IkReal x1318=(cj10*r21*sj11);
IkReal x1319=((1.678)*r21*x1302);
IkReal x1320=((1.678)*r20*x1303);
IkReal x1321=((5.034)*r21*x1302);
IkReal x1322=((5.034)*r20*x1303);
IkReal x1323=((0.42)*sj9*x1306);
IkReal x1324=(x1299*x1300);
IkReal x1325=((0.42)*r10*x1303);
IkReal x1326=(x1304*x1318);
IkReal x1327=(x1322+x1298);
IkReal x1328=(x1320+x1297);
IkReal x1329=(x1327+(((0.42)*x1309))+(((0.42)*r11*x1302)));
IkReal x1330=(x1316+x1315+x1314+x1321);
IkReal x1331=(x1323+x1326+x1324);
IkReal x1332=((-1.816)+x1313+x1312+x1311+x1319);
IkReal x1333=(x1327+((x1304*x1305))+((x1299*x1317)));
j7eval[0]=((IKabs((x1332+(((-1.0)*x1328))+(((-0.14)*r11*x1302))+(((-0.14)*x1309))+(((0.14)*r10*x1303)))))+(IKabs(((-1.816)+x1325+x1330+(((-1.0)*x1329)))))+(IKabs(((-1.816)+x1331+x1330+(((-1.0)*x1333)))))+(IKabs(((1.816)+x1325+x1330+(((-1.0)*x1329)))))+(IKabs((x1332+(((-1.0)*x1328))+((x1308*x1318))+((x1300*x1301))+(((-1.0)*x1305*x1308))+(((0.14)*sj9*x1306))+(((-1.0)*x1301*x1317)))))+(IKabs(((1.816)+x1331+x1330+(((-1.0)*x1333))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1334=(cj10*r12);
IkReal x1335=(cj11*sj10);
IkReal x1336=(r20*sj11);
IkReal x1337=(cj11*r21);
IkReal x1338=(cj10*r22);
IkReal x1339=((5.034)*x1338);
IkReal x1340=((0.012)*x1337);
IkReal x1341=((0.012)*x1336);
IkReal x1342=((0.004)*x1337);
IkReal x1343=((0.004)*x1336);
IkReal x1344=((1.678)*x1338);
IkReal x1345=(r21*sj10*sj11);
IkReal x1346=(r11*sj10*sj11);
IkReal x1347=((5.034)*x1345);
IkReal x1348=((0.42)*r10*x1335);
IkReal x1349=((0.14)*r10*x1335);
IkReal x1350=((1.678)*x1345);
IkReal x1351=((((12.0)*pz))+(((0.42)*x1334))+(((5.034)*r20*x1335))+(((0.42)*x1346)));
IkReal x1352=((((0.14)*x1334))+(((4.0)*pz))+(((1.678)*r20*x1335))+(((0.14)*x1346)));
IkReal x1353=(x1348+x1340+x1341+x1347+x1339);
IkReal x1354=(x1349+x1342+x1343+x1344+x1350);
op[0]=((-1.816)+x1354+(((-1.0)*x1352)));
op[1]=0;
op[2]=((-1.816)+x1353+(((-1.0)*x1351)));
op[3]=0;
op[4]=((1.816)+x1353+(((-1.0)*x1351)));
op[5]=0;
op[6]=((1.816)+x1354+(((-1.0)*x1352)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1355=((0.42)*r20);
IkReal x1356=(sj11*sj9);
IkReal x1357=((0.14)*r20);
IkReal x1358=((1.678)*sj10);
IkReal x1359=(r21*sj11);
IkReal x1360=(cj11*r20);
IkReal x1361=((0.42)*cj9);
IkReal x1362=(r22*sj10);
IkReal x1363=((5.034)*sj10);
IkReal x1364=(cj11*r21);
IkReal x1365=(r20*sj11);
IkReal x1366=((0.14)*cj9);
IkReal x1367=(cj10*r22);
IkReal x1368=((0.004)*x1364);
IkReal x1369=((0.004)*x1365);
IkReal x1370=((1.678)*x1367);
IkReal x1371=((5.034)*x1367);
IkReal x1372=((0.012)*x1364);
IkReal x1373=((0.012)*x1365);
IkReal x1374=(cj10*cj11*cj9);
IkReal x1375=(x1358*x1359);
IkReal x1376=(x1356*x1357);
IkReal x1377=(x1359*x1363);
IkReal x1378=((0.42)*sj9*x1364);
IkReal x1379=(x1355*x1356);
IkReal x1380=((0.14)*sj9*x1364);
IkReal x1381=(cj10*x1359*x1366);
IkReal x1382=(cj10*x1359*x1361);
IkReal x1383=((((12.0)*pz))+((x1361*x1362))+((x1360*x1363))+((x1355*x1374)));
IkReal x1384=((((4.0)*pz))+((x1358*x1360))+((x1357*x1374))+((x1362*x1366)));
IkReal x1385=(x1371+x1373+x1372+x1377+x1379+x1378+x1382);
IkReal x1386=(x1368+x1369+x1370+x1375+x1376+x1380+x1381);
j7evalpoly[0]=((1.816)+(((-1.0)*x1384))+x1386+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x1384))+x1386))))+(((htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x1383))+x1385))))+(((htj7*htj7)*(((1.816)+(((-1.0)*x1383))+x1385)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1387=((1.0)*cj7);
IkReal x1388=(cj10*r22);
IkReal x1389=(sj10*sj11);
IkReal x1390=((1.0)*sj7);
IkReal x1391=(cj10*r12);
IkReal x1392=(cj11*sj10);
IkReal x1393=(cj7*x1392);
if( IKabs((((r11*sj7*x1389))+((sj7*x1391))+(((-1.0)*r21*x1387*x1389))+((r20*x1393))+(((-1.0)*r10*x1390*x1392))+(((-1.0)*x1387*x1388)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1393))+(((-1.0)*r11*x1387*x1389))+(((-1.0)*r21*x1389*x1390))+(((-1.0)*x1388*x1390))+(((-1.0)*x1387*x1391))+((r20*sj7*x1392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj7*x1389))+((sj7*x1391))+(((-1.0)*r21*x1387*x1389))+((r20*x1393))+(((-1.0)*r10*x1390*x1392))+(((-1.0)*x1387*x1388))))+IKsqr((((r10*x1393))+(((-1.0)*r11*x1387*x1389))+(((-1.0)*r21*x1389*x1390))+(((-1.0)*x1388*x1390))+(((-1.0)*x1387*x1391))+((r20*sj7*x1392))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r11*sj7*x1389))+((sj7*x1391))+(((-1.0)*r21*x1387*x1389))+((r20*x1393))+(((-1.0)*r10*x1390*x1392))+(((-1.0)*x1387*x1388))), (((r10*x1393))+(((-1.0)*r11*x1387*x1389))+(((-1.0)*r21*x1389*x1390))+(((-1.0)*x1388*x1390))+(((-1.0)*x1387*x1391))+((r20*sj7*x1392))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1394=IKsin(j8);
IkReal x1395=IKcos(j8);
IkReal x1396=((0.035)*sj7);
IkReal x1397=((0.001)*sj11);
IkReal x1398=(cj11*sj10);
IkReal x1399=(cj11*r21);
IkReal x1400=((1.0)*r22);
IkReal x1401=(cj9*sj10);
IkReal x1402=(sj11*sj9);
IkReal x1403=(cj11*r11);
IkReal x1404=((1.0)*r12);
IkReal x1405=(sj7*x1394);
IkReal x1406=((1.0)*sj10*sj11);
IkReal x1407=(cj7*x1394);
IkReal x1408=(cj10*cj9*sj11);
IkReal x1409=((0.4195)*x1395);
IkReal x1410=(sj7*x1395);
IkReal x1411=(cj7*x1395);
IkReal x1412=((1.0)*x1411);
IkReal x1413=((1.0)*cj10*cj11*cj9);
evalcond[0]=(((r10*x1398))+(((-1.0)*r11*x1406))+(((-1.0)*x1412))+x1405+(((-1.0)*cj10*x1404)));
evalcond[1]=((((-1.0)*x1407))+((r20*x1398))+(((-1.0)*cj10*x1400))+(((-1.0)*r21*x1406))+(((-1.0)*x1410)));
evalcond[2]=(((sj9*x1403))+(((-1.0)*r10*x1413))+((r11*x1408))+x1410+x1407+(((-1.0)*x1401*x1404))+((r10*x1402)));
evalcond[3]=(((sj9*x1399))+(((-1.0)*x1412))+((r20*x1402))+((r21*x1408))+x1405+(((-1.0)*x1400*x1401))+(((-1.0)*r20*x1413)));
evalcond[4]=((((0.454)*cj7))+(((-1.0)*x1394*x1396))+(((-0.4195)*x1407))+((r20*x1397))+(((-1.0)*pz))+(((0.035)*x1411))+(((-1.0)*sj7*x1409))+(((0.001)*x1399)));
evalcond[5]=((-0.025)+(((-1.0)*cj7*x1409))+((r10*x1397))+(((0.4195)*x1405))+(((-1.0)*x1395*x1396))+(((0.001)*x1403))+(((-1.0)*py))+(((-0.454)*sj7))+(((-0.035)*x1407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1414=((1.0)*sj11);
CheckValue<IkReal> x1415=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj10*r22))+((cj11*r20*sj10))+(((-1.0)*r21*sj10*x1414)))),-1);
if(!x1415.valid){
continue;
}
CheckValue<IkReal> x1416 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1414))+(((-1.0)*cj11*r11)))),IkReal((((r12*sj10))+((cj10*cj11*r10))+(((-1.0)*cj10*r11*x1414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1416.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1415.value)))+(x1416.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x1417=IKsin(j9);
IkReal x1418=IKcos(j9);
IkReal x1419=(cj10*r00);
IkReal x1420=((1.0)*r20);
IkReal x1421=(r00*sj11);
IkReal x1422=(cj10*x1417);
IkReal x1423=((1.0)*x1418);
IkReal x1424=(cj11*x1417);
IkReal x1425=(sj11*x1418);
IkReal x1426=(cj11*x1423);
IkReal x1427=((1.0)*sj10*x1417);
evalcond[0]=(((r01*x1424))+((cj10*r01*x1425))+(((-1.0)*r02*sj10*x1423))+(((-1.0)*x1419*x1426))+((x1417*x1421)));
evalcond[1]=((((-1.0)*r21*x1426))+(((-1.0)*cj11*x1420*x1422))+(((-1.0)*x1420*x1425))+((r21*sj11*x1422))+(((-1.0)*r22*x1427)));
evalcond[2]=((((-1.0)*r10*sj11*x1423))+(((-1.0)*r11*x1426))+(((-1.0)*r12*x1427))+(((-1.0)*cj11*r10*x1422))+((r11*sj11*x1422)));
evalcond[3]=((1.0)+(((-1.0)*x1421*x1423))+(((-1.0)*x1419*x1424))+((r01*sj11*x1422))+(((-1.0)*r01*x1426))+(((-1.0)*r02*x1427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1428=((4.0)*pz);
IkReal x1429=((12.0)*pz);
IkReal x1430=((0.42)*r20);
IkReal x1431=(sj11*sj9);
IkReal x1432=((0.14)*r20);
IkReal x1433=(sj10*sj11);
IkReal x1434=(cj11*sj10);
IkReal x1435=((0.42)*cj9);
IkReal x1436=(r22*sj10);
IkReal x1437=(cj11*r21);
IkReal x1438=(r20*sj11);
IkReal x1439=((0.14)*cj9);
IkReal x1440=(cj10*r12);
IkReal x1441=(cj10*r22);
IkReal x1442=((0.004)*x1437);
IkReal x1443=((0.004)*x1438);
IkReal x1444=((1.678)*x1441);
IkReal x1445=((5.034)*x1441);
IkReal x1446=((0.012)*x1437);
IkReal x1447=((0.012)*x1438);
IkReal x1448=(cj10*cj11*cj9);
IkReal x1449=(cj10*r21*sj11);
IkReal x1450=((1.678)*r21*x1433);
IkReal x1451=((1.678)*r20*x1434);
IkReal x1452=((5.034)*r21*x1433);
IkReal x1453=((5.034)*r20*x1434);
IkReal x1454=((0.42)*sj9*x1437);
IkReal x1455=(x1430*x1431);
IkReal x1456=((0.42)*r10*x1434);
IkReal x1457=(x1435*x1449);
IkReal x1458=(x1429+x1453);
IkReal x1459=(x1428+x1451);
IkReal x1460=((((0.42)*r11*x1433))+x1458+(((0.42)*x1440)));
IkReal x1461=(x1452+x1447+x1446+x1445);
IkReal x1462=(x1454+x1455+x1457);
IkReal x1463=((-1.816)+x1450+x1444+x1443+x1442);
IkReal x1464=(((x1435*x1436))+((x1430*x1448))+x1458);
j7eval[0]=((IKabs(((-1.816)+(((-1.0)*x1464))+x1461+x1462)))+(IKabs(((((-1.0)*x1436*x1439))+((x1439*x1449))+(((-1.0)*x1459))+(((-1.0)*x1432*x1448))+x1463+((x1431*x1432))+(((0.14)*sj9*x1437)))))+(IKabs(((1.816)+(((-1.0)*x1460))+x1461+x1456)))+(IKabs(((1.816)+(((-1.0)*x1464))+x1461+x1462)))+(IKabs(((-1.816)+(((-1.0)*x1460))+x1461+x1456)))+(IKabs(((((-1.0)*x1459))+(((0.14)*r10*x1434))+(((-0.14)*x1440))+x1463+(((-0.14)*r11*x1433))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1465=(cj10*r12);
IkReal x1466=(cj11*sj10);
IkReal x1467=(r20*sj11);
IkReal x1468=(cj11*r21);
IkReal x1469=(cj10*r22);
IkReal x1470=((5.034)*x1469);
IkReal x1471=((0.012)*x1468);
IkReal x1472=((0.012)*x1467);
IkReal x1473=((0.004)*x1468);
IkReal x1474=((0.004)*x1467);
IkReal x1475=((1.678)*x1469);
IkReal x1476=(r21*sj10*sj11);
IkReal x1477=(r11*sj10*sj11);
IkReal x1478=((5.034)*x1476);
IkReal x1479=((0.42)*r10*x1466);
IkReal x1480=((0.14)*r10*x1466);
IkReal x1481=((1.678)*x1476);
IkReal x1482=((((12.0)*pz))+(((5.034)*r20*x1466))+(((0.42)*x1465))+(((0.42)*x1477)));
IkReal x1483=((((0.14)*x1465))+(((1.678)*r20*x1466))+(((4.0)*pz))+(((0.14)*x1477)));
IkReal x1484=(x1472+x1470+x1471+x1478+x1479);
IkReal x1485=(x1473+x1474+x1475+x1481+x1480);
op[0]=((-1.816)+(((-1.0)*x1483))+x1485);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x1482))+x1484);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x1482))+x1484);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x1483))+x1485);
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1486=((0.42)*r20);
IkReal x1487=(sj11*sj9);
IkReal x1488=((0.14)*r20);
IkReal x1489=((1.678)*sj10);
IkReal x1490=(r21*sj11);
IkReal x1491=(cj11*r20);
IkReal x1492=((0.42)*cj9);
IkReal x1493=(r22*sj10);
IkReal x1494=((5.034)*sj10);
IkReal x1495=(cj11*r21);
IkReal x1496=(r20*sj11);
IkReal x1497=((0.14)*cj9);
IkReal x1498=(cj10*r22);
IkReal x1499=((0.004)*x1495);
IkReal x1500=((0.004)*x1496);
IkReal x1501=((1.678)*x1498);
IkReal x1502=((5.034)*x1498);
IkReal x1503=((0.012)*x1495);
IkReal x1504=((0.012)*x1496);
IkReal x1505=(cj10*cj11*cj9);
IkReal x1506=(x1489*x1490);
IkReal x1507=(x1487*x1488);
IkReal x1508=(x1490*x1494);
IkReal x1509=((0.42)*sj9*x1495);
IkReal x1510=(x1486*x1487);
IkReal x1511=((0.14)*sj9*x1495);
IkReal x1512=(cj10*x1490*x1497);
IkReal x1513=(cj10*x1490*x1492);
IkReal x1514=((((12.0)*pz))+((x1491*x1494))+((x1492*x1493))+((x1486*x1505)));
IkReal x1515=(((x1488*x1505))+((x1489*x1491))+(((4.0)*pz))+((x1493*x1497)));
IkReal x1516=(x1502+x1503+x1504+x1508+x1509+x1510+x1513);
IkReal x1517=(x1500+x1501+x1506+x1507+x1511+x1512+x1499);
j7evalpoly[0]=((1.816)+(((-1.0)*x1515))+(((htj7*htj7)*(((1.816)+(((-1.0)*x1514))+x1516))))+x1517+(((htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x1514))+x1516))))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+(((-1.0)*x1515))+x1517)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1518=((1.0)*cj7);
IkReal x1519=(cj10*r22);
IkReal x1520=(sj10*sj11);
IkReal x1521=((1.0)*sj7);
IkReal x1522=(cj10*r12);
IkReal x1523=(cj11*sj10);
IkReal x1524=(cj7*x1523);
if( IKabs((((r11*sj7*x1520))+(((-1.0)*x1518*x1519))+((r20*x1524))+(((-1.0)*r21*x1518*x1520))+((sj7*x1522))+(((-1.0)*r10*x1521*x1523)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1524))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1522))+(((-1.0)*r21*x1520*x1521))+((r20*sj7*x1523))+(((-1.0)*r11*x1518*x1520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj7*x1520))+(((-1.0)*x1518*x1519))+((r20*x1524))+(((-1.0)*r21*x1518*x1520))+((sj7*x1522))+(((-1.0)*r10*x1521*x1523))))+IKsqr((((r10*x1524))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1522))+(((-1.0)*r21*x1520*x1521))+((r20*sj7*x1523))+(((-1.0)*r11*x1518*x1520))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r11*sj7*x1520))+(((-1.0)*x1518*x1519))+((r20*x1524))+(((-1.0)*r21*x1518*x1520))+((sj7*x1522))+(((-1.0)*r10*x1521*x1523))), (((r10*x1524))+(((-1.0)*x1519*x1521))+(((-1.0)*x1518*x1522))+(((-1.0)*r21*x1520*x1521))+((r20*sj7*x1523))+(((-1.0)*r11*x1518*x1520))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1525=IKsin(j8);
IkReal x1526=IKcos(j8);
IkReal x1527=((0.035)*sj7);
IkReal x1528=((0.001)*sj11);
IkReal x1529=(cj11*sj10);
IkReal x1530=(cj11*r21);
IkReal x1531=((1.0)*r22);
IkReal x1532=(cj9*sj10);
IkReal x1533=(sj11*sj9);
IkReal x1534=(cj11*r11);
IkReal x1535=((1.0)*r12);
IkReal x1536=(sj7*x1525);
IkReal x1537=((1.0)*sj10*sj11);
IkReal x1538=(cj7*x1525);
IkReal x1539=(cj10*cj9*sj11);
IkReal x1540=((0.4195)*x1526);
IkReal x1541=(sj7*x1526);
IkReal x1542=(cj7*x1526);
IkReal x1543=((1.0)*x1542);
IkReal x1544=((1.0)*cj10*cj11*cj9);
evalcond[0]=((((-1.0)*r11*x1537))+((r10*x1529))+(((-1.0)*cj10*x1535))+x1536+(((-1.0)*x1543)));
evalcond[1]=((((-1.0)*x1541))+(((-1.0)*x1538))+(((-1.0)*cj10*x1531))+((r20*x1529))+(((-1.0)*r21*x1537)));
evalcond[2]=(((r10*x1533))+((r11*x1539))+(((-1.0)*x1532*x1535))+x1541+x1538+(((-1.0)*r10*x1544))+((sj9*x1534)));
evalcond[3]=((((-1.0)*x1531*x1532))+((r20*x1533))+((r21*x1539))+x1536+(((-1.0)*r20*x1544))+(((-1.0)*x1543))+((sj9*x1530)));
evalcond[4]=((((-1.0)*sj7*x1540))+(((0.454)*cj7))+(((-1.0)*x1525*x1527))+((r20*x1528))+(((-1.0)*pz))+(((0.035)*x1542))+(((-0.4195)*x1538))+(((0.001)*x1530)));
evalcond[5]=((-0.025)+((r10*x1528))+(((-1.0)*cj7*x1540))+(((-1.0)*py))+(((-0.454)*sj7))+(((-1.0)*x1526*x1527))+(((0.001)*x1534))+(((0.4195)*x1536))+(((-0.035)*x1538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1545=((1.0)*r21);
CheckValue<IkReal> x1546=IKPowWithIntegerCheck(IKsign((((r11*sj10*sj11))+((cj10*r12))+(((-1.0)*cj11*r10*sj10)))),-1);
if(!x1546.valid){
continue;
}
CheckValue<IkReal> x1547 = IKatan2WithCheck(IkReal(((((-1.0)*cj11*x1545))+(((-1.0)*r20*sj11)))),IkReal(((((-1.0)*cj10*sj11*x1545))+((r22*sj10))+((cj10*cj11*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1547.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1546.value)))+(x1547.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x1548=IKsin(j9);
IkReal x1549=IKcos(j9);
IkReal x1550=(cj10*r00);
IkReal x1551=((1.0)*r20);
IkReal x1552=(r00*sj11);
IkReal x1553=(cj10*x1548);
IkReal x1554=((1.0)*x1549);
IkReal x1555=(cj11*x1548);
IkReal x1556=(sj11*x1549);
IkReal x1557=(cj11*x1554);
IkReal x1558=((1.0)*sj10*x1548);
evalcond[0]=(((r01*x1555))+(((-1.0)*r02*sj10*x1554))+(((-1.0)*x1550*x1557))+((x1548*x1552))+((cj10*r01*x1556)));
evalcond[1]=(((r21*sj11*x1553))+(((-1.0)*r22*x1558))+(((-1.0)*cj11*x1551*x1553))+(((-1.0)*x1551*x1556))+(((-1.0)*r21*x1557)));
evalcond[2]=((((-1.0)*cj11*r10*x1553))+(((-1.0)*r10*sj11*x1554))+(((-1.0)*r12*x1558))+(((-1.0)*r11*x1557))+((r11*sj11*x1553)));
evalcond[3]=((1.0)+(((-1.0)*x1550*x1555))+(((-1.0)*x1552*x1554))+(((-1.0)*r02*x1558))+((r01*sj11*x1553))+(((-1.0)*r01*x1557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
sj6=-1.0;
cj6=0;
j6=-1.5707963267949;
IkReal x1559=((4.0)*pz);
IkReal x1560=((12.0)*pz);
IkReal x1561=((0.42)*r20);
IkReal x1562=(sj11*sj9);
IkReal x1563=((0.14)*r20);
IkReal x1564=(sj10*sj11);
IkReal x1565=(cj11*sj10);
IkReal x1566=((0.42)*cj9);
IkReal x1567=(r22*sj10);
IkReal x1568=(cj11*r21);
IkReal x1569=(r20*sj11);
IkReal x1570=((0.14)*cj9);
IkReal x1571=(cj10*r12);
IkReal x1572=(cj10*r22);
IkReal x1573=((0.004)*x1568);
IkReal x1574=((0.004)*x1569);
IkReal x1575=((1.678)*x1572);
IkReal x1576=((5.034)*x1572);
IkReal x1577=((0.012)*x1568);
IkReal x1578=((0.012)*x1569);
IkReal x1579=(cj10*cj11*cj9);
IkReal x1580=(cj10*r21*sj11);
IkReal x1581=((1.678)*r21*x1564);
IkReal x1582=((1.678)*r20*x1565);
IkReal x1583=((5.034)*r21*x1564);
IkReal x1584=((5.034)*r20*x1565);
IkReal x1585=((0.42)*sj9*x1568);
IkReal x1586=(x1561*x1562);
IkReal x1587=((0.42)*r10*x1565);
IkReal x1588=(x1566*x1580);
IkReal x1589=(x1560+x1584);
IkReal x1590=(x1559+x1582);
IkReal x1591=(x1589+(((0.42)*x1571))+(((0.42)*r11*x1564)));
IkReal x1592=(x1578+x1577+x1576+x1583);
IkReal x1593=(x1588+x1586+x1585);
IkReal x1594=((-1.816)+x1573+x1575+x1574+x1581);
IkReal x1595=(((x1566*x1567))+x1589+((x1561*x1579)));
j7eval[0]=((IKabs(((-1.816)+(((-1.0)*x1595))+x1593+x1592)))+(IKabs(((1.816)+(((-1.0)*x1595))+x1593+x1592)))+(IKabs(((((-1.0)*x1590))+((x1570*x1580))+(((0.14)*sj9*x1568))+(((-1.0)*x1567*x1570))+x1594+(((-1.0)*x1563*x1579))+((x1562*x1563)))))+(IKabs(((((-1.0)*x1590))+(((0.14)*r10*x1565))+(((-0.14)*r11*x1564))+(((-0.14)*x1571))+x1594)))+(IKabs(((1.816)+(((-1.0)*x1591))+x1587+x1592)))+(IKabs(((-1.816)+(((-1.0)*x1591))+x1587+x1592))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1596=(cj10*r12);
IkReal x1597=(cj11*sj10);
IkReal x1598=(r20*sj11);
IkReal x1599=(cj11*r21);
IkReal x1600=(cj10*r22);
IkReal x1601=((5.034)*x1600);
IkReal x1602=((0.012)*x1599);
IkReal x1603=((0.012)*x1598);
IkReal x1604=((0.004)*x1599);
IkReal x1605=((0.004)*x1598);
IkReal x1606=((1.678)*x1600);
IkReal x1607=(r21*sj10*sj11);
IkReal x1608=(r11*sj10*sj11);
IkReal x1609=((5.034)*x1607);
IkReal x1610=((0.42)*r10*x1597);
IkReal x1611=((0.14)*r10*x1597);
IkReal x1612=((1.678)*x1607);
IkReal x1613=((((12.0)*pz))+(((5.034)*r20*x1597))+(((0.42)*x1596))+(((0.42)*x1608)));
IkReal x1614=((((0.14)*x1596))+(((4.0)*pz))+(((0.14)*x1608))+(((1.678)*r20*x1597)));
IkReal x1615=(x1610+x1609+x1601+x1603+x1602);
IkReal x1616=(x1612+x1611+x1605+x1604+x1606);
op[0]=((-1.816)+x1616+(((-1.0)*x1614)));
op[1]=0;
op[2]=((-1.816)+x1615+(((-1.0)*x1613)));
op[3]=0;
op[4]=((1.816)+x1615+(((-1.0)*x1613)));
op[5]=0;
op[6]=((1.816)+x1616+(((-1.0)*x1614)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1617=((0.42)*r20);
IkReal x1618=(sj11*sj9);
IkReal x1619=((0.14)*r20);
IkReal x1620=((1.678)*sj10);
IkReal x1621=(r21*sj11);
IkReal x1622=(cj11*r20);
IkReal x1623=((0.42)*cj9);
IkReal x1624=(r22*sj10);
IkReal x1625=((5.034)*sj10);
IkReal x1626=(cj11*r21);
IkReal x1627=(r20*sj11);
IkReal x1628=((0.14)*cj9);
IkReal x1629=(cj10*r22);
IkReal x1630=((0.004)*x1626);
IkReal x1631=((0.004)*x1627);
IkReal x1632=((1.678)*x1629);
IkReal x1633=((5.034)*x1629);
IkReal x1634=((0.012)*x1626);
IkReal x1635=((0.012)*x1627);
IkReal x1636=(cj10*cj11*cj9);
IkReal x1637=(x1620*x1621);
IkReal x1638=(x1618*x1619);
IkReal x1639=(x1621*x1625);
IkReal x1640=((0.42)*sj9*x1626);
IkReal x1641=(x1617*x1618);
IkReal x1642=((0.14)*sj9*x1626);
IkReal x1643=(cj10*x1621*x1628);
IkReal x1644=(cj10*x1621*x1623);
IkReal x1645=((((12.0)*pz))+((x1623*x1624))+((x1622*x1625))+((x1617*x1636)));
IkReal x1646=(((x1620*x1622))+(((4.0)*pz))+((x1619*x1636))+((x1624*x1628)));
IkReal x1647=(x1644+x1641+x1640+x1633+x1634+x1635+x1639);
IkReal x1648=(x1643+x1642+x1630+x1631+x1632+x1637+x1638);
j7evalpoly[0]=((1.816)+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((-1.816)+x1648+(((-1.0)*x1646))))))+(((htj7*htj7*htj7*htj7)*(((-1.816)+x1647+(((-1.0)*x1645))))))+x1648+(((-1.0)*x1646))+(((htj7*htj7)*(((1.816)+x1647+(((-1.0)*x1645)))))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1649=((1.0)*cj7);
IkReal x1650=(cj10*r22);
IkReal x1651=(sj10*sj11);
IkReal x1652=((1.0)*sj7);
IkReal x1653=(cj10*r12);
IkReal x1654=(cj11*sj10);
IkReal x1655=(cj7*x1654);
if( IKabs((((r11*sj7*x1651))+(((-1.0)*r21*x1649*x1651))+((r20*x1655))+(((-1.0)*x1649*x1650))+(((-1.0)*r10*x1652*x1654))+((sj7*x1653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1655))+((r20*sj7*x1654))+(((-1.0)*r21*x1651*x1652))+(((-1.0)*x1650*x1652))+(((-1.0)*x1649*x1653))+(((-1.0)*r11*x1649*x1651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*sj7*x1651))+(((-1.0)*r21*x1649*x1651))+((r20*x1655))+(((-1.0)*x1649*x1650))+(((-1.0)*r10*x1652*x1654))+((sj7*x1653))))+IKsqr((((r10*x1655))+((r20*sj7*x1654))+(((-1.0)*r21*x1651*x1652))+(((-1.0)*x1650*x1652))+(((-1.0)*x1649*x1653))+(((-1.0)*r11*x1649*x1651))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r11*sj7*x1651))+(((-1.0)*r21*x1649*x1651))+((r20*x1655))+(((-1.0)*x1649*x1650))+(((-1.0)*r10*x1652*x1654))+((sj7*x1653))), (((r10*x1655))+((r20*sj7*x1654))+(((-1.0)*r21*x1651*x1652))+(((-1.0)*x1650*x1652))+(((-1.0)*x1649*x1653))+(((-1.0)*r11*x1649*x1651))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[6];
IkReal x1656=IKsin(j8);
IkReal x1657=IKcos(j8);
IkReal x1658=((0.035)*sj7);
IkReal x1659=((0.001)*sj11);
IkReal x1660=(cj11*sj10);
IkReal x1661=(cj11*r21);
IkReal x1662=((1.0)*r22);
IkReal x1663=(cj9*sj10);
IkReal x1664=(sj11*sj9);
IkReal x1665=(cj11*r11);
IkReal x1666=((1.0)*r12);
IkReal x1667=(sj7*x1656);
IkReal x1668=((1.0)*sj10*sj11);
IkReal x1669=(cj7*x1656);
IkReal x1670=(cj10*cj9*sj11);
IkReal x1671=((0.4195)*x1657);
IkReal x1672=(sj7*x1657);
IkReal x1673=(cj7*x1657);
IkReal x1674=((1.0)*x1673);
IkReal x1675=((1.0)*cj10*cj11*cj9);
evalcond[0]=(((r10*x1660))+x1667+(((-1.0)*r11*x1668))+(((-1.0)*cj10*x1666))+(((-1.0)*x1674)));
evalcond[1]=((((-1.0)*x1669))+((r20*x1660))+(((-1.0)*r21*x1668))+(((-1.0)*cj10*x1662))+(((-1.0)*x1672)));
evalcond[2]=(((r10*x1664))+x1669+x1672+(((-1.0)*x1663*x1666))+(((-1.0)*r10*x1675))+((sj9*x1665))+((r11*x1670)));
evalcond[3]=(((r21*x1670))+(((-1.0)*x1662*x1663))+x1667+((r20*x1664))+((sj9*x1661))+(((-1.0)*x1674))+(((-1.0)*r20*x1675)));
evalcond[4]=((((-1.0)*x1656*x1658))+(((0.035)*x1673))+(((0.001)*x1661))+(((0.454)*cj7))+((r20*x1659))+(((-1.0)*pz))+(((-0.4195)*x1669))+(((-1.0)*sj7*x1671)));
evalcond[5]=((-0.025)+(((-1.0)*cj7*x1671))+((r10*x1659))+(((0.001)*x1665))+(((0.4195)*x1667))+(((-1.0)*py))+(((-0.454)*sj7))+(((-1.0)*x1657*x1658))+(((-0.035)*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j8, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1676=(cj10*cj11);
IkReal x1677=(cj6*r00);
IkReal x1678=(r10*sj6);
IkReal x1679=((1.0)*cj11);
IkReal x1680=(cj6*r01);
IkReal x1681=(r11*sj6);
IkReal x1682=((1.0)*sj11);
CheckValue<IkReal> x1683 = IKatan2WithCheck(IkReal(((((-1.0)*x1677*x1682))+(((-1.0)*x1678*x1682))+(((-1.0)*x1679*x1680))+(((-1.0)*x1679*x1681)))),IkReal((((x1676*x1678))+((x1676*x1677))+((cj6*r02*sj10))+(((-1.0)*cj10*x1681*x1682))+(((-1.0)*cj10*x1680*x1682))+((r12*sj10*sj6)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1683.valid){
continue;
}
CheckValue<IkReal> x1684=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj10*x1679))+((cj10*r22))+((r21*sj10*sj11)))),-1);
if(!x1684.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1683.value)+(((1.5707963267949)*(x1684.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1685=IKcos(j9);
IkReal x1686=IKsin(j9);
IkReal x1687=((1.0)*cj11);
IkReal x1688=((1.0)*x1685);
IkReal x1689=(cj10*x1686);
IkReal x1690=((1.0)*sj10*x1686);
evalcond[0]=((((-1.0)*r22*x1690))+((r21*sj11*x1689))+(((-1.0)*r20*x1687*x1689))+(((-1.0)*r21*x1685*x1687))+(((-1.0)*r20*sj11*x1688)));
evalcond[1]=(((r11*sj11*x1689))+cj6+(((-1.0)*r10*x1687*x1689))+(((-1.0)*r12*x1690))+(((-1.0)*r10*sj11*x1688))+(((-1.0)*r11*x1685*x1687)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r01*x1685*x1687))+(((-1.0)*r00*sj11*x1688))+(((-1.0)*r02*x1690))+((r01*sj11*x1689))+(((-1.0)*r00*x1687*x1689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1691=((1.816)*cj6);
IkReal x1692=((1.816)*sj6);
IkReal x1693=(cj11*cj6);
IkReal x1694=((0.012)*r21);
IkReal x1695=((0.42)*sj10);
IkReal x1696=(cj11*r00);
IkReal x1697=(cj10*r02);
IkReal x1698=(sj10*sj11);
IkReal x1699=(pz*sj6);
IkReal x1700=(r20*sj10);
IkReal x1701=((5.034)*sj6);
IkReal x1702=((0.14)*sj10);
IkReal x1703=((1.678)*r21);
IkReal x1704=(cj10*r12);
IkReal x1705=(cj11*r10);
IkReal x1706=((5.034)*cj6);
IkReal x1707=(cj10*r22);
IkReal x1708=((0.004)*r21);
IkReal x1709=(cj11*sj6);
IkReal x1710=(cj6*pz);
IkReal x1711=((12.0)*x1710);
IkReal x1712=((0.42)*x1697);
IkReal x1713=((12.0)*x1699);
IkReal x1714=((0.42)*x1704);
IkReal x1715=(r20*sj11*sj6);
IkReal x1716=(cj6*r20*sj11);
IkReal x1717=(x1695*x1696);
IkReal x1718=(x1706*x1707);
IkReal x1719=(x1693*x1694);
IkReal x1720=(r01*sj11*x1695);
IkReal x1721=((0.012)*x1716);
IkReal x1722=(x1695*x1705);
IkReal x1723=(x1701*x1707);
IkReal x1724=(x1694*x1709);
IkReal x1725=(r11*sj11*x1695);
IkReal x1726=((0.012)*x1715);
IkReal x1727=((5.034)*x1693*x1700);
IkReal x1728=(r21*x1698*x1706);
IkReal x1729=(cj11*x1700*x1701);
IkReal x1730=(r21*x1698*x1701);
IkReal x1731=(x1729+x1722+x1713);
IkReal x1732=(x1727+x1711+x1717);
IkReal x1733=(x1728+x1720+x1721+x1712+x1719+x1718);
IkReal x1734=(x1726+x1724+x1725+x1723+x1730+x1714);
j7eval[0]=((IKabs(((((-1.0)*x1692))+x1731+(((-1.0)*x1734)))))+(IKabs((x1731+x1692+(((-1.0)*x1734)))))+(IKabs(((((-1.0)*cj6*x1698*x1703))+((x1696*x1702))+x1691+(((4.0)*x1710))+(((-0.004)*x1716))+(((-0.14)*r01*x1698))+(((-1.0)*x1693*x1708))+(((-0.14)*x1697))+(((1.678)*x1693*x1700))+(((-1.678)*cj6*x1707)))))+(IKabs((x1732+x1691+(((-1.0)*x1733)))))+(IKabs(((((-1.0)*x1691))+x1732+(((-1.0)*x1733)))))+(IKabs(((((4.0)*x1699))+x1692+(((-1.0)*x1708*x1709))+(((-1.678)*sj6*x1707))+(((-0.14)*r11*x1698))+(((-0.004)*x1715))+((x1702*x1705))+(((1.678)*x1700*x1709))+(((-0.14)*x1704))+(((-1.0)*sj6*x1698*x1703))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1735=((1.816)*cj6);
IkReal x1736=(cj6*pz);
IkReal x1737=((1.678)*cj6);
IkReal x1738=(cj10*r22);
IkReal x1739=(cj11*sj10);
IkReal x1740=((5.034)*cj6);
IkReal x1741=(cj10*r02);
IkReal x1742=((12.0)*x1736);
IkReal x1743=((0.42)*x1741);
IkReal x1744=((4.0)*x1736);
IkReal x1745=((0.14)*x1741);
IkReal x1746=(cj11*cj6*r21);
IkReal x1747=(r01*sj10*sj11);
IkReal x1748=(cj6*r20*sj11);
IkReal x1749=(r21*sj10*sj11);
IkReal x1750=((0.42)*r00*x1739);
IkReal x1751=(x1738*x1740);
IkReal x1752=((0.012)*x1746);
IkReal x1753=((0.42)*x1747);
IkReal x1754=((0.012)*x1748);
IkReal x1755=((0.14)*r00*x1739);
IkReal x1756=(x1737*x1738);
IkReal x1757=((0.004)*x1746);
IkReal x1758=((0.14)*x1747);
IkReal x1759=((0.004)*x1748);
IkReal x1760=(r20*x1739*x1740);
IkReal x1761=(x1740*x1749);
IkReal x1762=(r20*x1737*x1739);
IkReal x1763=(x1737*x1749);
IkReal x1764=(x1760+x1742+x1750);
IkReal x1765=(x1762+x1744+x1755);
IkReal x1766=(x1761+x1743+x1754+x1753+x1752+x1751);
IkReal x1767=(x1763+x1745+x1759+x1758+x1757+x1756);
op[0]=((((-1.0)*x1767))+x1735+x1765);
op[1]=0;
op[2]=((((-1.0)*x1766))+x1735+x1764);
op[3]=0;
op[4]=((((-1.0)*x1766))+x1764+(((-1.0)*x1735)));
op[5]=0;
op[6]=((((-1.0)*x1767))+x1765+(((-1.0)*x1735)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1768=((1.816)*sj6);
IkReal x1769=(sj10*sj11);
IkReal x1770=(pz*sj6);
IkReal x1771=(r21*sj6);
IkReal x1772=(cj10*r12);
IkReal x1773=(cj11*sj10);
IkReal x1774=(r20*sj6);
IkReal x1775=((12.0)*x1770);
IkReal x1776=((0.42)*x1772);
IkReal x1777=((4.0)*x1770);
IkReal x1778=((0.14)*x1772);
IkReal x1779=(sj11*x1774);
IkReal x1780=(cj10*r22*sj6);
IkReal x1781=((0.42)*r10*x1773);
IkReal x1782=((5.034)*x1780);
IkReal x1783=((0.012)*cj11*x1771);
IkReal x1784=((0.42)*r11*x1769);
IkReal x1785=((0.012)*x1779);
IkReal x1786=((0.14)*r10*x1773);
IkReal x1787=((1.678)*x1780);
IkReal x1788=((0.004)*cj11*x1771);
IkReal x1789=((0.14)*r11*x1769);
IkReal x1790=((0.004)*x1779);
IkReal x1791=((5.034)*x1773*x1774);
IkReal x1792=((5.034)*x1769*x1771);
IkReal x1793=((1.678)*x1773*x1774);
IkReal x1794=((1.678)*x1769*x1771);
IkReal x1795=(x1781+x1791+x1775);
IkReal x1796=(x1786+x1793+x1777);
IkReal x1797=(x1782+x1783+x1784+x1785+x1792+x1776);
IkReal x1798=(x1788+x1789+x1787+x1790+x1794+x1778);
j7evalpoly[0]=((((-1.0)*x1798))+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x1797))+x1795+x1768))))+(((-1.0)*x1768))+x1796+(((htj7*htj7)*(((((-1.0)*x1797))+(((-1.0)*x1768))+x1795))))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((((-1.0)*x1798))+x1796+x1768)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1799=(cj10*cj7);
IkReal x1800=((1.0)*r22);
IkReal x1801=(r21*sj10);
IkReal x1802=(r20*sj9);
IkReal x1803=(cj11*cj7);
IkReal x1804=(r21*sj9);
IkReal x1805=(cj9*r21);
IkReal x1806=(cj10*sj7);
IkReal x1807=(cj7*sj11);
IkReal x1808=(r20*sj10);
IkReal x1809=(cj9*sj10);
IkReal x1810=(cj11*sj7);
IkReal x1811=((1.0)*sj11*sj7);
IkReal x1812=(cj11*cj9*r20);
if( IKabs(((((-1.0)*x1804*x1810))+(((-1.0)*x1799*x1800))+(((-1.0)*sj11*x1805*x1806))+((r22*sj7*x1809))+((x1803*x1808))+((x1806*x1812))+(((-1.0)*x1801*x1807))+(((-1.0)*x1802*x1811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1802*x1807))+((x1803*x1804))+((sj11*x1799*x1805))+(((-1.0)*x1800*x1806))+((x1808*x1810))+(((-1.0)*cj7*x1800*x1809))+(((-1.0)*x1801*x1811))+(((-1.0)*x1799*x1812)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1804*x1810))+(((-1.0)*x1799*x1800))+(((-1.0)*sj11*x1805*x1806))+((r22*sj7*x1809))+((x1803*x1808))+((x1806*x1812))+(((-1.0)*x1801*x1807))+(((-1.0)*x1802*x1811))))+IKsqr((((x1802*x1807))+((x1803*x1804))+((sj11*x1799*x1805))+(((-1.0)*x1800*x1806))+((x1808*x1810))+(((-1.0)*cj7*x1800*x1809))+(((-1.0)*x1801*x1811))+(((-1.0)*x1799*x1812))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x1804*x1810))+(((-1.0)*x1799*x1800))+(((-1.0)*sj11*x1805*x1806))+((r22*sj7*x1809))+((x1803*x1808))+((x1806*x1812))+(((-1.0)*x1801*x1807))+(((-1.0)*x1802*x1811))), (((x1802*x1807))+((x1803*x1804))+((sj11*x1799*x1805))+(((-1.0)*x1800*x1806))+((x1808*x1810))+(((-1.0)*cj7*x1800*x1809))+(((-1.0)*x1801*x1811))+(((-1.0)*x1799*x1812))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x1813=IKcos(j8);
IkReal x1814=IKsin(j8);
IkReal x1815=((0.001)*sj11);
IkReal x1816=((1.0)*cj10);
IkReal x1817=(cj11*r10);
IkReal x1818=(cj6*cj7);
IkReal x1819=(cj6*sj7);
IkReal x1820=((0.001)*cj11);
IkReal x1821=(cj7*sj6);
IkReal x1822=(cj11*sj9);
IkReal x1823=(sj11*sj9);
IkReal x1824=(cj11*r20);
IkReal x1825=(sj6*sj7);
IkReal x1826=(cj11*r00);
IkReal x1827=((1.0)*sj10*sj11);
IkReal x1828=((0.035)*x1814);
IkReal x1829=(cj10*cj9*sj11);
IkReal x1830=((0.035)*x1813);
IkReal x1831=((0.4195)*x1814);
IkReal x1832=((0.4195)*x1813);
IkReal x1833=((1.0)*cj9*sj10);
IkReal x1834=((1.0)*x1813);
IkReal x1835=(sj7*x1814);
IkReal x1836=((1.0)*x1814);
IkReal x1837=(x1813*x1821);
evalcond[0]=((((-1.0)*cj7*x1836))+((sj10*x1824))+(((-1.0)*sj7*x1834))+(((-1.0)*r21*x1827))+(((-1.0)*r22*x1816)));
evalcond[1]=(((x1813*x1818))+(((-1.0)*r02*x1816))+((sj10*x1826))+(((-1.0)*x1819*x1836))+(((-1.0)*r01*x1827)));
evalcond[2]=((((-1.0)*x1825*x1836))+(((-1.0)*r12*x1816))+x1837+(((-1.0)*r11*x1827))+((sj10*x1817)));
evalcond[3]=((((-1.0)*cj7*x1834))+x1835+(((-1.0)*r22*x1833))+((r21*x1822))+((r21*x1829))+(((-1.0)*cj9*x1816*x1824))+((r20*x1823)));
evalcond[4]=((((0.454)*cj7))+(((-1.0)*cj7*x1831))+((cj7*x1830))+((r20*x1815))+(((-1.0)*sj7*x1828))+(((-1.0)*pz))+((r21*x1820))+(((-1.0)*sj7*x1832)));
evalcond[5]=(((r00*x1823))+((r01*x1829))+((r01*x1822))+(((-1.0)*x1818*x1836))+(((-1.0)*x1819*x1834))+(((-1.0)*r02*x1833))+(((-1.0)*cj9*x1816*x1826)));
evalcond[6]=(((r10*x1823))+(((-1.0)*x1825*x1834))+(((-1.0)*r12*x1833))+((r11*x1822))+((r11*x1829))+(((-1.0)*cj9*x1816*x1817))+(((-1.0)*x1821*x1836)));
evalcond[7]=(((x1818*x1828))+(((0.454)*x1819))+((r01*x1820))+(((0.001)*sj6))+(((-1.0)*px))+(((-1.0)*x1819*x1831))+((x1819*x1830))+((r00*x1815))+((x1818*x1832))+(((0.025)*cj6)));
evalcond[8]=((((-1.0)*x1825*x1831))+(((-0.001)*cj6))+((x1821*x1832))+(((0.454)*x1825))+(((-1.0)*py))+((x1821*x1828))+((x1825*x1830))+((r11*x1820))+((r10*x1815))+(((0.025)*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1838=((1.0)*sj11);
IkReal x1839=(r20*sj6);
IkReal x1840=(r21*sj6);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-1.0)*x1838*x1839))+(((-1.0)*cj11*x1840)))),IkReal((((r22*sj10*sj6))+(((-1.0)*cj10*x1838*x1840))+((cj10*cj11*x1839)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj10*x1838))+(((-1.0)*cj10*r12))+((cj11*r10*sj10)))),-1);
if(!x1842.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x1841.value)+(((1.5707963267949)*(x1842.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x1843=IKcos(j9);
IkReal x1844=IKsin(j9);
IkReal x1845=((1.0)*cj11);
IkReal x1846=((1.0)*x1843);
IkReal x1847=(cj10*x1844);
IkReal x1848=((1.0)*sj10*x1844);
evalcond[0]=((((-1.0)*r22*x1848))+(((-1.0)*r21*x1843*x1845))+(((-1.0)*r20*x1845*x1847))+(((-1.0)*r20*sj11*x1846))+((r21*sj11*x1847)));
evalcond[1]=(cj6+(((-1.0)*r11*x1843*x1845))+(((-1.0)*r12*x1848))+(((-1.0)*r10*sj11*x1846))+((r11*sj11*x1847))+(((-1.0)*r10*x1845*x1847)));
evalcond[2]=((((-1.0)*sj6))+(((-1.0)*r00*sj11*x1846))+(((-1.0)*r02*x1848))+(((-1.0)*r00*x1845*x1847))+((r01*sj11*x1847))+(((-1.0)*r01*x1843*x1845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x1849=((1.816)*cj6);
IkReal x1850=((1.816)*sj6);
IkReal x1851=(cj11*cj6);
IkReal x1852=((0.012)*r21);
IkReal x1853=((0.42)*sj10);
IkReal x1854=(cj11*r00);
IkReal x1855=(cj10*r02);
IkReal x1856=(sj10*sj11);
IkReal x1857=(pz*sj6);
IkReal x1858=(r20*sj10);
IkReal x1859=((5.034)*sj6);
IkReal x1860=((0.14)*sj10);
IkReal x1861=((1.678)*r21);
IkReal x1862=(cj10*r12);
IkReal x1863=(cj11*r10);
IkReal x1864=((5.034)*cj6);
IkReal x1865=(cj10*r22);
IkReal x1866=((0.004)*r21);
IkReal x1867=(cj11*sj6);
IkReal x1868=(cj6*pz);
IkReal x1869=((12.0)*x1868);
IkReal x1870=((0.42)*x1855);
IkReal x1871=((12.0)*x1857);
IkReal x1872=((0.42)*x1862);
IkReal x1873=(r20*sj11*sj6);
IkReal x1874=(cj6*r20*sj11);
IkReal x1875=(x1853*x1854);
IkReal x1876=(x1864*x1865);
IkReal x1877=(x1851*x1852);
IkReal x1878=(r01*sj11*x1853);
IkReal x1879=((0.012)*x1874);
IkReal x1880=(x1853*x1863);
IkReal x1881=(x1859*x1865);
IkReal x1882=(x1852*x1867);
IkReal x1883=(r11*sj11*x1853);
IkReal x1884=((0.012)*x1873);
IkReal x1885=((5.034)*x1851*x1858);
IkReal x1886=(r21*x1856*x1864);
IkReal x1887=(cj11*x1858*x1859);
IkReal x1888=(r21*x1856*x1859);
IkReal x1889=(x1871+x1887+x1880);
IkReal x1890=(x1869+x1875+x1885);
IkReal x1891=(x1876+x1877+x1870+x1878+x1879+x1886);
IkReal x1892=(x1872+x1888+x1884+x1883+x1882+x1881);
j7eval[0]=((IKabs(((((-1.0)*x1849))+x1890+(((-1.0)*x1891)))))+(IKabs(((((-0.004)*x1874))+(((1.678)*x1851*x1858))+(((-1.0)*x1851*x1866))+(((-1.678)*cj6*x1865))+(((4.0)*x1868))+(((-1.0)*cj6*x1856*x1861))+x1849+(((-0.14)*x1855))+((x1854*x1860))+(((-0.14)*r01*x1856)))))+(IKabs((x1889+(((-1.0)*x1892))+(((-1.0)*x1850)))))+(IKabs(((((-1.0)*sj6*x1856*x1861))+(((-0.004)*x1873))+(((-1.0)*x1866*x1867))+((x1860*x1863))+(((-1.678)*sj6*x1865))+(((-0.14)*r11*x1856))+(((4.0)*x1857))+x1850+(((-0.14)*x1862))+(((1.678)*x1858*x1867)))))+(IKabs((x1849+x1890+(((-1.0)*x1891)))))+(IKabs((x1850+x1889+(((-1.0)*x1892))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x1893=((1.816)*cj6);
IkReal x1894=(cj6*pz);
IkReal x1895=((1.678)*cj6);
IkReal x1896=(cj10*r22);
IkReal x1897=(cj11*sj10);
IkReal x1898=((5.034)*cj6);
IkReal x1899=(cj10*r02);
IkReal x1900=((12.0)*x1894);
IkReal x1901=((0.42)*x1899);
IkReal x1902=((4.0)*x1894);
IkReal x1903=((0.14)*x1899);
IkReal x1904=(cj11*cj6*r21);
IkReal x1905=(r01*sj10*sj11);
IkReal x1906=(cj6*r20*sj11);
IkReal x1907=(r21*sj10*sj11);
IkReal x1908=((0.42)*r00*x1897);
IkReal x1909=(x1896*x1898);
IkReal x1910=((0.012)*x1904);
IkReal x1911=((0.42)*x1905);
IkReal x1912=((0.012)*x1906);
IkReal x1913=((0.14)*r00*x1897);
IkReal x1914=(x1895*x1896);
IkReal x1915=((0.004)*x1904);
IkReal x1916=((0.14)*x1905);
IkReal x1917=((0.004)*x1906);
IkReal x1918=(r20*x1897*x1898);
IkReal x1919=(x1898*x1907);
IkReal x1920=(r20*x1895*x1897);
IkReal x1921=(x1895*x1907);
IkReal x1922=(x1908+x1900+x1918);
IkReal x1923=(x1920+x1902+x1913);
IkReal x1924=(x1909+x1901+x1919+x1911+x1910+x1912);
IkReal x1925=(x1921+x1903+x1915+x1914+x1917+x1916);
op[0]=((((-1.0)*x1925))+x1923+x1893);
op[1]=0;
op[2]=((((-1.0)*x1924))+x1922+x1893);
op[3]=0;
op[4]=((((-1.0)*x1924))+x1922+(((-1.0)*x1893)));
op[5]=0;
op[6]=((((-1.0)*x1925))+x1923+(((-1.0)*x1893)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x1926=((1.816)*sj6);
IkReal x1927=(sj10*sj11);
IkReal x1928=(pz*sj6);
IkReal x1929=(r21*sj6);
IkReal x1930=(cj10*r12);
IkReal x1931=(cj11*sj10);
IkReal x1932=(r20*sj6);
IkReal x1933=((12.0)*x1928);
IkReal x1934=((0.42)*x1930);
IkReal x1935=((4.0)*x1928);
IkReal x1936=((0.14)*x1930);
IkReal x1937=(sj11*x1932);
IkReal x1938=(cj10*r22*sj6);
IkReal x1939=((0.42)*r10*x1931);
IkReal x1940=((5.034)*x1938);
IkReal x1941=((0.012)*cj11*x1929);
IkReal x1942=((0.42)*r11*x1927);
IkReal x1943=((0.012)*x1937);
IkReal x1944=((0.14)*r10*x1931);
IkReal x1945=((1.678)*x1938);
IkReal x1946=((0.004)*cj11*x1929);
IkReal x1947=((0.14)*r11*x1927);
IkReal x1948=((0.004)*x1937);
IkReal x1949=((5.034)*x1931*x1932);
IkReal x1950=((5.034)*x1927*x1929);
IkReal x1951=((1.678)*x1931*x1932);
IkReal x1952=((1.678)*x1927*x1929);
IkReal x1953=(x1933+x1939+x1949);
IkReal x1954=(x1935+x1944+x1951);
IkReal x1955=(x1934+x1942+x1943+x1940+x1941+x1950);
IkReal x1956=(x1936+x1948+x1946+x1947+x1945+x1952);
j7evalpoly[0]=((((-1.0)*x1956))+(((htj7*htj7*htj7*htj7*htj7*htj7)*(((((-1.0)*x1956))+x1926+x1954))))+(((-1.0)*x1926))+x1954+(((htj7*htj7)*(((((-1.0)*x1955))+(((-1.0)*x1926))+x1953))))+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x1955))+x1926+x1953)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x1957=(cj10*cj7);
IkReal x1958=((1.0)*r22);
IkReal x1959=(r21*sj10);
IkReal x1960=(r20*sj9);
IkReal x1961=(cj11*cj7);
IkReal x1962=(r21*sj9);
IkReal x1963=(cj9*r21);
IkReal x1964=(cj10*sj7);
IkReal x1965=(cj7*sj11);
IkReal x1966=(r20*sj10);
IkReal x1967=(cj9*sj10);
IkReal x1968=(cj11*sj7);
IkReal x1969=((1.0)*sj11*sj7);
IkReal x1970=(cj11*cj9*r20);
if( IKabs((((r22*sj7*x1967))+(((-1.0)*x1959*x1965))+(((-1.0)*x1957*x1958))+((x1964*x1970))+(((-1.0)*sj11*x1963*x1964))+(((-1.0)*x1960*x1969))+((x1961*x1966))+(((-1.0)*x1962*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1959*x1969))+(((-1.0)*x1958*x1964))+(((-1.0)*x1957*x1970))+(((-1.0)*cj7*x1958*x1967))+((x1961*x1962))+((x1960*x1965))+((sj11*x1957*x1963))+((x1966*x1968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj7*x1967))+(((-1.0)*x1959*x1965))+(((-1.0)*x1957*x1958))+((x1964*x1970))+(((-1.0)*sj11*x1963*x1964))+(((-1.0)*x1960*x1969))+((x1961*x1966))+(((-1.0)*x1962*x1968))))+IKsqr(((((-1.0)*x1959*x1969))+(((-1.0)*x1958*x1964))+(((-1.0)*x1957*x1970))+(((-1.0)*cj7*x1958*x1967))+((x1961*x1962))+((x1960*x1965))+((sj11*x1957*x1963))+((x1966*x1968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2((((r22*sj7*x1967))+(((-1.0)*x1959*x1965))+(((-1.0)*x1957*x1958))+((x1964*x1970))+(((-1.0)*sj11*x1963*x1964))+(((-1.0)*x1960*x1969))+((x1961*x1966))+(((-1.0)*x1962*x1968))), ((((-1.0)*x1959*x1969))+(((-1.0)*x1958*x1964))+(((-1.0)*x1957*x1970))+(((-1.0)*cj7*x1958*x1967))+((x1961*x1962))+((x1960*x1965))+((sj11*x1957*x1963))+((x1966*x1968))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x1971=IKcos(j8);
IkReal x1972=IKsin(j8);
IkReal x1973=((0.001)*sj11);
IkReal x1974=((1.0)*cj10);
IkReal x1975=(cj11*r10);
IkReal x1976=(cj6*cj7);
IkReal x1977=(cj6*sj7);
IkReal x1978=((0.001)*cj11);
IkReal x1979=(cj7*sj6);
IkReal x1980=(cj11*sj9);
IkReal x1981=(sj11*sj9);
IkReal x1982=(cj11*r20);
IkReal x1983=(sj6*sj7);
IkReal x1984=(cj11*r00);
IkReal x1985=((1.0)*sj10*sj11);
IkReal x1986=((0.035)*x1972);
IkReal x1987=(cj10*cj9*sj11);
IkReal x1988=((0.035)*x1971);
IkReal x1989=((0.4195)*x1972);
IkReal x1990=((0.4195)*x1971);
IkReal x1991=((1.0)*cj9*sj10);
IkReal x1992=((1.0)*x1971);
IkReal x1993=(sj7*x1972);
IkReal x1994=((1.0)*x1972);
IkReal x1995=(x1971*x1979);
evalcond[0]=((((-1.0)*r22*x1974))+(((-1.0)*cj7*x1994))+((sj10*x1982))+(((-1.0)*r21*x1985))+(((-1.0)*sj7*x1992)));
evalcond[1]=((((-1.0)*x1977*x1994))+(((-1.0)*r02*x1974))+((x1971*x1976))+((sj10*x1984))+(((-1.0)*r01*x1985)));
evalcond[2]=((((-1.0)*x1983*x1994))+((sj10*x1975))+(((-1.0)*r11*x1985))+x1995+(((-1.0)*r12*x1974)));
evalcond[3]=(((r21*x1980))+((r21*x1987))+(((-1.0)*cj7*x1992))+x1993+(((-1.0)*cj9*x1974*x1982))+(((-1.0)*r22*x1991))+((r20*x1981)));
evalcond[4]=((((-1.0)*sj7*x1986))+(((0.454)*cj7))+((r20*x1973))+((r21*x1978))+(((-1.0)*pz))+(((-1.0)*sj7*x1990))+((cj7*x1988))+(((-1.0)*cj7*x1989)));
evalcond[5]=((((-1.0)*x1977*x1992))+(((-1.0)*r02*x1991))+(((-1.0)*x1976*x1994))+((r01*x1980))+((r01*x1987))+(((-1.0)*cj9*x1974*x1984))+((r00*x1981)));
evalcond[6]=((((-1.0)*x1983*x1992))+(((-1.0)*x1979*x1994))+((r11*x1987))+((r11*x1980))+((r10*x1981))+(((-1.0)*cj9*x1974*x1975))+(((-1.0)*r12*x1991)));
evalcond[7]=(((x1976*x1990))+((x1976*x1986))+(((0.001)*sj6))+(((-1.0)*px))+((r00*x1973))+((r01*x1978))+(((-1.0)*x1977*x1989))+(((0.025)*cj6))+(((0.454)*x1977))+((x1977*x1988)));
evalcond[8]=((((-1.0)*x1983*x1989))+((r10*x1973))+(((-0.001)*cj6))+((r11*x1978))+(((-1.0)*py))+((x1979*x1986))+((x1979*x1990))+(((0.454)*x1983))+((x1983*x1988))+(((0.025)*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x1996=((1.0)*cj10);
IkReal x1997=(cj6*r21);
IkReal x1998=(cj6*r20);
IkReal x1999=((1.0)*sj11);
CheckValue<IkReal> x2000 = IKatan2WithCheck(IkReal(((((-1.0)*x1998*x1999))+(((-1.0)*cj11*x1997)))),IkReal((((cj6*r22*sj10))+((cj10*cj11*x1998))+(((-1.0)*sj11*x1996*x1997)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2000.valid){
continue;
}
CheckValue<IkReal> x2001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*x1996))+((cj11*r00*sj10))+(((-1.0)*r01*sj10*x1999)))),-1);
if(!x2001.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x2000.value)+(((1.5707963267949)*(x2001.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[3];
IkReal x2002=IKcos(j9);
IkReal x2003=IKsin(j9);
IkReal x2004=((1.0)*cj11);
IkReal x2005=((1.0)*x2002);
IkReal x2006=(cj10*x2003);
IkReal x2007=((1.0)*sj10*x2003);
evalcond[0]=((((-1.0)*r22*x2007))+(((-1.0)*r20*sj11*x2005))+((r21*sj11*x2006))+(((-1.0)*r20*x2004*x2006))+(((-1.0)*r21*x2002*x2004)));
evalcond[1]=(cj6+(((-1.0)*r12*x2007))+(((-1.0)*r10*x2004*x2006))+((r11*sj11*x2006))+(((-1.0)*r11*x2002*x2004))+(((-1.0)*r10*sj11*x2005)));
evalcond[2]=((((-1.0)*r00*sj11*x2005))+(((-1.0)*sj6))+(((-1.0)*r02*x2007))+(((-1.0)*r00*x2004*x2006))+(((-1.0)*r01*x2002*x2004))+((r01*sj11*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[1];
IkReal x2008=((1.816)*cj6);
IkReal x2009=((1.816)*sj6);
IkReal x2010=(cj11*cj6);
IkReal x2011=((0.012)*r21);
IkReal x2012=((0.42)*sj10);
IkReal x2013=(cj11*r00);
IkReal x2014=(cj10*r02);
IkReal x2015=(sj10*sj11);
IkReal x2016=(pz*sj6);
IkReal x2017=(r20*sj10);
IkReal x2018=((5.034)*sj6);
IkReal x2019=((0.14)*sj10);
IkReal x2020=((1.678)*r21);
IkReal x2021=(cj10*r12);
IkReal x2022=(cj11*r10);
IkReal x2023=((5.034)*cj6);
IkReal x2024=(cj10*r22);
IkReal x2025=((0.004)*r21);
IkReal x2026=(cj11*sj6);
IkReal x2027=(cj6*pz);
IkReal x2028=((12.0)*x2027);
IkReal x2029=((0.42)*x2014);
IkReal x2030=((12.0)*x2016);
IkReal x2031=((0.42)*x2021);
IkReal x2032=(r20*sj11*sj6);
IkReal x2033=(cj6*r20*sj11);
IkReal x2034=(x2012*x2013);
IkReal x2035=(x2023*x2024);
IkReal x2036=(x2010*x2011);
IkReal x2037=(r01*sj11*x2012);
IkReal x2038=((0.012)*x2033);
IkReal x2039=(x2012*x2022);
IkReal x2040=(x2018*x2024);
IkReal x2041=(x2011*x2026);
IkReal x2042=(r11*sj11*x2012);
IkReal x2043=((0.012)*x2032);
IkReal x2044=((5.034)*x2010*x2017);
IkReal x2045=(r21*x2015*x2023);
IkReal x2046=(cj11*x2017*x2018);
IkReal x2047=(r21*x2015*x2018);
IkReal x2048=(x2046+x2030+x2039);
IkReal x2049=(x2044+x2028+x2034);
IkReal x2050=(x2045+x2029+x2037+x2036+x2035+x2038);
IkReal x2051=(x2047+x2042+x2043+x2040+x2041+x2031);
j7eval[0]=((IKabs((x2049+(((-1.0)*x2008))+(((-1.0)*x2050)))))+(IKabs(((((-0.14)*x2014))+(((-0.004)*x2033))+(((4.0)*x2027))+(((-0.14)*r01*x2015))+(((-1.0)*cj6*x2015*x2020))+x2008+(((1.678)*x2010*x2017))+(((-1.0)*x2010*x2025))+(((-1.678)*cj6*x2024))+((x2013*x2019)))))+(IKabs((x2048+x2009+(((-1.0)*x2051)))))+(IKabs((x2048+(((-1.0)*x2009))+(((-1.0)*x2051)))))+(IKabs((x2049+x2008+(((-1.0)*x2050)))))+(IKabs(((((-0.004)*x2032))+((x2019*x2022))+(((1.678)*x2017*x2026))+(((-0.14)*r11*x2015))+x2009+(((4.0)*x2016))+(((-1.678)*sj6*x2024))+(((-0.14)*x2021))+(((-1.0)*x2025*x2026))+(((-1.0)*sj6*x2015*x2020))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j8]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j7evalpoly[1];
IkReal x2052=((1.816)*cj6);
IkReal x2053=(cj6*pz);
IkReal x2054=((1.678)*cj6);
IkReal x2055=(cj10*r22);
IkReal x2056=(cj11*sj10);
IkReal x2057=((5.034)*cj6);
IkReal x2058=(cj10*r02);
IkReal x2059=((12.0)*x2053);
IkReal x2060=((0.42)*x2058);
IkReal x2061=((4.0)*x2053);
IkReal x2062=((0.14)*x2058);
IkReal x2063=(cj11*cj6*r21);
IkReal x2064=(r01*sj10*sj11);
IkReal x2065=(cj6*r20*sj11);
IkReal x2066=(r21*sj10*sj11);
IkReal x2067=((0.42)*r00*x2056);
IkReal x2068=(x2055*x2057);
IkReal x2069=((0.012)*x2063);
IkReal x2070=((0.42)*x2064);
IkReal x2071=((0.012)*x2065);
IkReal x2072=((0.14)*r00*x2056);
IkReal x2073=(x2054*x2055);
IkReal x2074=((0.004)*x2063);
IkReal x2075=((0.14)*x2064);
IkReal x2076=((0.004)*x2065);
IkReal x2077=(r20*x2056*x2057);
IkReal x2078=(x2057*x2066);
IkReal x2079=(r20*x2054*x2056);
IkReal x2080=(x2054*x2066);
IkReal x2081=(x2067+x2077+x2059);
IkReal x2082=(x2061+x2079+x2072);
IkReal x2083=(x2068+x2069+x2060+x2078+x2071+x2070);
IkReal x2084=(x2062+x2073+x2076+x2075+x2074+x2080);
op[0]=(x2052+x2082+(((-1.0)*x2084)));
op[1]=0;
op[2]=(x2052+x2081+(((-1.0)*x2083)));
op[3]=0;
op[4]=(x2081+(((-1.0)*x2083))+(((-1.0)*x2052)));
op[5]=0;
op[6]=(x2082+(((-1.0)*x2084))+(((-1.0)*x2052)));
polyroots6(op,zeror,numroots);
IkReal j7array[6], cj7array[6], sj7array[6], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[6]={true,true,true,true,true,true};
_nj7 = 6;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x2085=((1.816)*sj6);
IkReal x2086=(sj10*sj11);
IkReal x2087=(pz*sj6);
IkReal x2088=(r21*sj6);
IkReal x2089=(cj10*r12);
IkReal x2090=(cj11*sj10);
IkReal x2091=(r20*sj6);
IkReal x2092=((12.0)*x2087);
IkReal x2093=((0.42)*x2089);
IkReal x2094=((4.0)*x2087);
IkReal x2095=((0.14)*x2089);
IkReal x2096=(sj11*x2091);
IkReal x2097=(cj10*r22*sj6);
IkReal x2098=((0.42)*r10*x2090);
IkReal x2099=((5.034)*x2097);
IkReal x2100=((0.012)*cj11*x2088);
IkReal x2101=((0.42)*r11*x2086);
IkReal x2102=((0.012)*x2096);
IkReal x2103=((0.14)*r10*x2090);
IkReal x2104=((1.678)*x2097);
IkReal x2105=((0.004)*cj11*x2088);
IkReal x2106=((0.14)*r11*x2086);
IkReal x2107=((0.004)*x2096);
IkReal x2108=((5.034)*x2090*x2091);
IkReal x2109=((5.034)*x2086*x2088);
IkReal x2110=((1.678)*x2090*x2091);
IkReal x2111=((1.678)*x2086*x2088);
IkReal x2112=(x2092+x2098+x2108);
IkReal x2113=(x2094+x2110+x2103);
IkReal x2114=(x2093+x2099+x2109+x2102+x2101+x2100);
IkReal x2115=(x2095+x2111+x2107+x2106+x2105+x2104);
j7evalpoly[0]=((((htj7*htj7)*(((((-1.0)*x2085))+x2112+(((-1.0)*x2114))))))+(((htj7*htj7*htj7*htj7*htj7*htj7)*((x2085+x2113+(((-1.0)*x2115))))))+(((-1.0)*x2085))+x2113+(((htj7*htj7*htj7*htj7)*((x2085+x2112+(((-1.0)*x2114))))))+(((-1.0)*x2115)));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j8array[1], cj8array[1], sj8array[1];
bool j8valid[1]={false};
_nj8 = 1;
IkReal x2116=(cj10*cj7);
IkReal x2117=((1.0)*r22);
IkReal x2118=(r21*sj10);
IkReal x2119=(r20*sj9);
IkReal x2120=(cj11*cj7);
IkReal x2121=(r21*sj9);
IkReal x2122=(cj9*r21);
IkReal x2123=(cj10*sj7);
IkReal x2124=(cj7*sj11);
IkReal x2125=(r20*sj10);
IkReal x2126=(cj9*sj10);
IkReal x2127=(cj11*sj7);
IkReal x2128=((1.0)*sj11*sj7);
IkReal x2129=(cj11*cj9*r20);
if( IKabs(((((-1.0)*x2118*x2124))+((x2123*x2129))+(((-1.0)*x2119*x2128))+(((-1.0)*x2116*x2117))+(((-1.0)*x2121*x2127))+((r22*sj7*x2126))+((x2120*x2125))+(((-1.0)*sj11*x2122*x2123)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2117*x2123))+((x2125*x2127))+(((-1.0)*x2118*x2128))+(((-1.0)*cj7*x2117*x2126))+((x2120*x2121))+((x2119*x2124))+((sj11*x2116*x2122))+(((-1.0)*x2116*x2129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2118*x2124))+((x2123*x2129))+(((-1.0)*x2119*x2128))+(((-1.0)*x2116*x2117))+(((-1.0)*x2121*x2127))+((r22*sj7*x2126))+((x2120*x2125))+(((-1.0)*sj11*x2122*x2123))))+IKsqr(((((-1.0)*x2117*x2123))+((x2125*x2127))+(((-1.0)*x2118*x2128))+(((-1.0)*cj7*x2117*x2126))+((x2120*x2121))+((x2119*x2124))+((sj11*x2116*x2122))+(((-1.0)*x2116*x2129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j8array[0]=IKatan2(((((-1.0)*x2118*x2124))+((x2123*x2129))+(((-1.0)*x2119*x2128))+(((-1.0)*x2116*x2117))+(((-1.0)*x2121*x2127))+((r22*sj7*x2126))+((x2120*x2125))+(((-1.0)*sj11*x2122*x2123))), ((((-1.0)*x2117*x2123))+((x2125*x2127))+(((-1.0)*x2118*x2128))+(((-1.0)*cj7*x2117*x2126))+((x2120*x2121))+((x2119*x2124))+((sj11*x2116*x2122))+(((-1.0)*x2116*x2129))));
sj8array[0]=IKsin(j8array[0]);
cj8array[0]=IKcos(j8array[0]);
if( j8array[0] > IKPI )
{
    j8array[0]-=IK2PI;
}
else if( j8array[0] < -IKPI )
{    j8array[0]+=IK2PI;
}
j8valid[0] = true;
for(int ij8 = 0; ij8 < 1; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 1; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];
{
IkReal evalcond[9];
IkReal x2130=IKcos(j8);
IkReal x2131=IKsin(j8);
IkReal x2132=((0.001)*sj11);
IkReal x2133=((1.0)*cj10);
IkReal x2134=(cj11*r10);
IkReal x2135=(cj6*cj7);
IkReal x2136=(cj6*sj7);
IkReal x2137=((0.001)*cj11);
IkReal x2138=(cj7*sj6);
IkReal x2139=(cj11*sj9);
IkReal x2140=(sj11*sj9);
IkReal x2141=(cj11*r20);
IkReal x2142=(sj6*sj7);
IkReal x2143=(cj11*r00);
IkReal x2144=((1.0)*sj10*sj11);
IkReal x2145=((0.035)*x2131);
IkReal x2146=(cj10*cj9*sj11);
IkReal x2147=((0.035)*x2130);
IkReal x2148=((0.4195)*x2131);
IkReal x2149=((0.4195)*x2130);
IkReal x2150=((1.0)*cj9*sj10);
IkReal x2151=((1.0)*x2130);
IkReal x2152=(sj7*x2131);
IkReal x2153=((1.0)*x2131);
IkReal x2154=(x2130*x2138);
evalcond[0]=((((-1.0)*r22*x2133))+(((-1.0)*cj7*x2153))+(((-1.0)*sj7*x2151))+((sj10*x2141))+(((-1.0)*r21*x2144)));
evalcond[1]=((((-1.0)*r01*x2144))+((sj10*x2143))+(((-1.0)*x2136*x2153))+((x2130*x2135))+(((-1.0)*r02*x2133)));
evalcond[2]=((((-1.0)*x2142*x2153))+(((-1.0)*r12*x2133))+x2154+(((-1.0)*r11*x2144))+((sj10*x2134)));
evalcond[3]=(((r21*x2139))+((r20*x2140))+(((-1.0)*cj7*x2151))+x2152+((r21*x2146))+(((-1.0)*r22*x2150))+(((-1.0)*cj9*x2133*x2141)));
evalcond[4]=(((r21*x2137))+(((-1.0)*cj7*x2148))+(((0.454)*cj7))+(((-1.0)*sj7*x2149))+(((-1.0)*sj7*x2145))+(((-1.0)*pz))+((cj7*x2147))+((r20*x2132)));
evalcond[5]=((((-1.0)*x2135*x2153))+(((-1.0)*r02*x2150))+((r01*x2139))+((r01*x2146))+((r00*x2140))+(((-1.0)*x2136*x2151))+(((-1.0)*cj9*x2133*x2143)));
evalcond[6]=(((r11*x2146))+(((-1.0)*x2142*x2151))+(((-1.0)*cj9*x2133*x2134))+((r11*x2139))+(((-1.0)*r12*x2150))+((r10*x2140))+(((-1.0)*x2138*x2153)));
evalcond[7]=((((-1.0)*x2136*x2148))+((r01*x2137))+(((0.001)*sj6))+((r00*x2132))+(((-1.0)*px))+(((0.454)*x2136))+((x2136*x2147))+((x2135*x2145))+((x2135*x2149))+(((0.025)*cj6)));
evalcond[8]=(((x2138*x2145))+((x2138*x2149))+(((-1.0)*x2142*x2148))+(((-0.001)*cj6))+((r11*x2137))+((x2142*x2147))+(((-1.0)*py))+((r10*x2132))+(((0.454)*x2142))+(((0.025)*sj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j6;
vinfos[0].indices[0] = _ij6[0];
vinfos[0].indices[1] = _ij6[1];
vinfos[0].maxsolutions = _nj6;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j7;
vinfos[1].indices[0] = _ij7[0];
vinfos[1].indices[1] = _ij7[1];
vinfos[1].maxsolutions = _nj7;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j8;
vinfos[2].indices[0] = _ij8[0];
vinfos[2].indices[1] = _ij8[1];
vinfos[2].maxsolutions = _nj8;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j9;
vinfos[3].indices[0] = _ij9[0];
vinfos[3].indices[1] = _ij9[1];
vinfos[3].maxsolutions = _nj9;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j10;
vinfos[4].indices[0] = _ij10[0];
vinfos[4].indices[1] = _ij10[1];
vinfos[4].maxsolutions = _nj10;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j11;
vinfos[5].indices[0] = _ij11[0];
vinfos[5].indices[1] = _ij11[1];
vinfos[5].maxsolutions = _nj11;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "71e1c993d1de6b94c4acc07215f7fcc4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
