/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-01-17 09:01:52.535420
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((1.0)*x5);
x13=((1.0)*x6);
x14=((0.18613)*x0);
x15=((0.159)*x5);
x16=((0.001)*x6);
x17=((0.454)*x1);
x18=((0.035)*x9);
x19=((1.0)*x9);
x20=((0.159)*x6);
x21=((1.0)*x7);
x22=((0.4195)*x9);
x23=((0.4195)*x0);
x24=((0.001)*x9);
x25=((1.0)*x0);
x26=((0.001)*x0);
x27=((0.18613)*x9);
x28=((0.18613)*x6);
x29=((0.159)*x7);
x30=(x1*x2);
x31=(x3*x4);
x32=(x10*x8);
x33=(x2*x3);
x34=(x1*x4);
x35=(x6*x7);
x36=(x19*x8);
x37=((1.0)*x31);
x38=(x0*x34);
x39=(x33+x34);
x40=((((-1.0)*x37))+x30);
x41=((((-1.0)*x30))+x37);
x42=(x39*x7);
x43=(x40*x6);
x44=((((-1.0)*x25*x31))+((x0*x30)));
x45=(((x30*x9))+(((-1.0)*x19*x31)));
x46=(x43*x5);
x47=(x25*(((((-1.0)*x34))+(((-1.0)*x33)))));
x48=(x25*((x33+x34)));
x49=(x19*(((((-1.0)*x34))+(((-1.0)*x33)))));
x50=(x19*((x33+x34)));
x51=(x44*x7);
x52=(x45*x7);
x53=(x49*x6);
x54=(x50*x8);
x55=(x48*x8);
x56=(x55+(((-1.0)*x13*x9)));
x57=((((-1.0)*x36))+((x47*x6)));
x58=(((x0*x8))+x53);
x59=(((x0*x6))+x54);
x60=(x5*x58);
x61=(x5*x57);
eerot[0]=(((x44*x5))+((x7*((x36+(((-1.0)*x13*x47)))))));
eerot[1]=(((x11*x56))+((x10*(((((-1.0)*x12*x57))+(((-1.0)*x21*x44)))))));
eerot[2]=(((x11*((x51+x61))))+((x10*x56)));
IkReal x62=((1.0)*x9);
IkReal x63=((1.0)*x30);
eetrans[0]=((((-1.0)*x16*x62))+(((0.025)*x0))+((x0*x17))+((x7*((((x28*x47))+(((-0.18613)*x8*x9))))))+((x23*x31))+((x8*((((x26*x33))+((x26*x34))))))+((x5*(((((-1.0)*x14*x63))+((x14*x31))))))+(((0.035)*x38))+x24+(((-1.0)*x23*x63))+((x11*((((x29*x44))+((x15*x57))))))+(((0.035)*x0*x33))+((x10*(((((-1.0)*x20*x62))+(((0.159)*x55)))))));
eerot[3]=(((x7*(((((-1.0)*x25*x8))+(((-1.0)*x13*x49))))))+((x45*x5)));
eerot[4]=(((x11*x59))+((x10*(((((-1.0)*x12*x58))+(((-1.0)*x21*x45)))))));
eerot[5]=(((x11*((x52+x60))))+((x10*x59)));
IkReal x64=((1.0)*x30);
eetrans[1]=(((x5*((((x27*x31))+(((-1.0)*x27*x64))))))+((x11*((((x29*x45))+((x15*x58))))))+(((0.025)*x9))+((x0*x16))+((x18*x34))+((x18*x33))+(((-1.0)*x26))+((x22*x31))+((x7*((((x28*x49))+((x14*x8))))))+((x17*x9))+((x10*((((x0*x20))+(((0.159)*x54))))))+(((-1.0)*x22*x64))+((x8*((((x24*x34))+((x24*x33)))))));
eerot[6]=(((x35*x41))+((x39*x5)));
eerot[7]=(((x11*x41*x8))+((x10*(((((-1.0)*x12*x43))+(((-1.0)*x21*x39)))))));
eerot[8]=(((x32*x41))+((x11*((x46+x42)))));
eetrans[2]=((0.45)+((x11*((((x29*x39))+((x15*x43))))))+(((-0.035)*x30))+((x35*(((((0.18613)*x30))+(((-0.18613)*x31))))))+(((-0.4195)*x34))+(((-0.4195)*x33))+((x5*(((((-0.18613)*x33))+(((-0.18613)*x34))))))+((x8*(((((-0.001)*x30))+(((0.001)*x31))))))+(((0.035)*x31))+(((0.454)*x3))+((x32*(((((-0.159)*x30))+(((0.159)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j14,cj14,sj14,htj14,j14mul,j15,cj15,sj15,htj15,j15mul,j16,cj16,sj16,htj16,j16mul,j17,cj17,sj17,htj17,j17mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij12[2], _nj12,_ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((-0.159)*r02))+px+(((0.18613)*r00)));
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=((((-0.159)*r12))+(((0.18613)*r10))+py);
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((-0.45)+(((-0.159)*r22))+pz+(((0.18613)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=((0.001)*r20);
IkReal x69=((0.001)*r02);
IkReal x70=((1.0)*rxp2_2);
IkReal x71=((0.002)*r21);
IkReal x72=((0.839)*npz);
IkReal x73=((0.00175)*r22);
IkReal x74=((7.0e-5)*r10);
IkReal x75=((5.0e-5)*r01);
IkReal x76=((0.05)*px);
IkReal x77=((0.020975)*r02);
IkReal x78=((0.07)*rxp2_1);
IkReal x79=((0.002)*npy);
IkReal x80=((1.0)*pp);
IkReal x81=((7.0e-5)*r22);
IkReal x82=((0.07)*rxp2_0);
IkReal x83=((5.0e-5)*r11);
IkReal x84=((0.05)*py);
IkReal x85=((7.0e-5)*r00);
IkReal x86=((0.020975)*r12);
IkReal x87=((0.004)*npx);
IkReal x88=((0.0001)*r00);
IkReal x89=((0.00014)*r11);
IkReal x90=((2.0)*rxp0_2);
IkReal x91=((0.002)*r00);
IkReal x92=((0.002)*r22);
IkReal x93=((0.002)*r10);
IkReal x94=((0.004)*r01);
IkReal x95=((4.0)*rxp1_2);
IkReal x96=((0.0035)*r20);
IkReal x97=((1.678)*npx);
IkReal x98=((0.00014)*r12);
IkReal x99=((0.14)*rxp0_1);
IkReal x100=((0.04195)*r00);
IkReal x101=((0.00014)*r20);
IkReal x102=((0.00014)*r02);
IkReal x103=((0.14)*rxp0_0);
IkReal x104=((0.04195)*r10);
IkReal x105=((0.28)*rxp1_0);
IkReal x106=((0.0839)*r11);
IkReal x107=((0.00028)*r21);
IkReal x108=((3.356)*npy);
IkReal x109=((0.007)*r21);
IkReal x110=((0.28)*rxp1_1);
IkReal x111=((0.0839)*r01);
IkReal x112=((0.001)*r12);
IkReal x113=((0.00014)*r01);
IkReal x114=((0.0001)*r10);
IkReal x115=((-0.001)*r12);
IkReal x116=((-0.004)*r11);
IkReal x117=((-0.002)*r10);
IkReal x118=((-0.002)*r21);
IkReal x119=((((-1.0)*x114))+x113);
IkReal x120=((0.02828575)+x74);
IkReal x121=((5.0e-5)+x84);
IkReal x122=((-5.0e-5)+x84);
IkReal x123=((0.02828575)+x75);
IkReal x124=((((-1.0)*x113))+(((-1.0)*x114)));
IkReal x125=(x68+x69);
IkReal x126=(x89+x87);
IkReal x127=(x90+x92);
IkReal x128=(x104+x102);
IkReal x129=(x77+x78);
IkReal x130=(x75+x74);
IkReal x131=(x100+x99);
IkReal x132=(x76+x80);
IkReal x133=(x82+x81);
IkReal x134=(x82+x85);
IkReal x135=(x81+x86);
IkReal x136=(x83+x85);
IkReal x137=(x108+x109);
IkReal x138=(x111+x110);
IkReal x139=(x97+x96);
IkReal x140=(x101+x103);
IkReal x141=(x79+x80);
IkReal x142=((0.02828575)+x73+x72);
IkReal x143=(x75+x73+x72);
IkReal x144=(x74+x73+x72);
IkReal x145=(x142+x79);
IkReal x146=(x131+x139);
op[0]=((((-1.0)*x70))+(((-1.0)*x125)));
op[1]=x115;
op[2]=x71;
op[3]=0;
op[4]=((((-1.0)*x70))+x68+(((-1.0)*x69)));
op[5]=x115;
op[6]=x115;
op[7]=((((-1.0)*x70))+x69+(((-1.0)*x68)));
op[8]=0;
op[9]=x71;
op[10]=x115;
op[11]=((((-1.0)*x70))+x125);
op[12]=((((-1.0)*x129))+x145+(((-1.0)*x130))+x76+(((-1.0)*x80)));
op[13]=(x133+x122+x85+(((-1.0)*x86))+(((-1.0)*x83)));
op[14]=(x126+(((-1.0)*x88)));
op[15]=x124;
op[16]=((((-1.0)*x141))+(((-1.0)*x129))+x143+x120+x76);
op[17]=(x133+x122+x83+(((-1.0)*x86))+(((-1.0)*x85)));
op[18]=(x134+x121+(((-1.0)*x135))+(((-1.0)*x83)));
op[19]=(x143+x120+x129+(((-1.0)*x132))+x79);
op[20]=x124;
op[21]=(x88+x87+(((-1.0)*x89)));
op[22]=(x121+(((-1.0)*x135))+x82+x83+(((-1.0)*x85)));
op[23]=((((-1.0)*x79))+x142+x129+(((-1.0)*x132))+(((-1.0)*x130)));
op[24]=(x91+x90+(((-1.0)*x92)));
op[25]=x93;
op[26]=((((-1.0)*x94))+(((-1.0)*x95)));
op[27]=x116;
op[28]=((((-1.0)*x127))+(((-1.0)*x91)));
op[29]=x117;
op[30]=x93;
op[31]=(x90+(((-1.0)*x91))+(((-1.0)*x92)));
op[32]=x116;
op[33]=(x94+(((-1.0)*x95)));
op[34]=x117;
op[35]=((((-1.0)*x127))+x91);
op[36]=(x131+(((-1.0)*x139))+(((-1.0)*x98)));
op[37]=((((-1.0)*x140))+x128);
op[38]=(x137+(((-1.0)*x138)));
op[39]=((((-1.0)*x106))+x105+x107);
op[40]=(x139+(((-1.0)*x131))+(((-1.0)*x98)));
op[41]=((((-1.0)*x104))+x140+x102);
op[42]=((((-1.0)*x103))+x128+x101);
op[43]=((((-1.0)*x146))+x98);
op[44]=((((-1.0)*x107))+(((-1.0)*x106))+x105);
op[45]=(x137+x138);
op[46]=((((-1.0)*x101))+(((-1.0)*x104))+x102+x103);
op[47]=(x146+x98);
op[48]=(rxp2_2+x125);
op[49]=x112;
op[50]=x118;
op[51]=0;
op[52]=(rxp2_2+x69+(((-1.0)*x68)));
op[53]=x112;
op[54]=x112;
op[55]=(rxp2_2+x68+(((-1.0)*x69)));
op[56]=0;
op[57]=x118;
op[58]=x112;
op[59]=(rxp2_2+(((-1.0)*x125)));
op[60]=((((-1.0)*x143))+x120+x129+x76+x79+(((-1.0)*x80)));
op[61]=(x122+(((-1.0)*x136))+(((-1.0)*x133))+x86);
op[62]=(x87+(((-1.0)*x89))+(((-1.0)*x88)));
op[63]=x119;
op[64]=((((-1.0)*x144))+(((-1.0)*x141))+x123+x129+x76);
op[65]=(x136+x122+(((-1.0)*x133))+x86);
op[66]=(x135+x121+(((-1.0)*x134))+(((-1.0)*x83)));
op[67]=((((-1.0)*x144))+(((-1.0)*x129))+x123+(((-1.0)*x132))+x79);
op[68]=x119;
op[69]=(x126+x88);
op[70]=(x135+x136+x121+(((-1.0)*x82)));
op[71]=((((-1.0)*x143))+(((-1.0)*x79))+(((-1.0)*x129))+x120+(((-1.0)*x132)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j16array[16], cj16array[16], sj16array[16], j17array[16], cj17array[16], sj17array[16], j12array[16], cj12array[16], sj12array[16];
int numsolutions = 0;
for(int ij16 = 0; ij16 < numroots; ij16 += 3)
{
IkReal htj16 = zeror[ij16+0], htj17 = zeror[ij16+1], htj12 = zeror[ij16+2];
if(isnan(htj16)||isnan(htj17)||isnan(htj12)){
continue;
}
j16array[numsolutions]=((2.0)*(atan(htj16)));
j17array[numsolutions]=((2.0)*(atan(htj17)));
j12array[numsolutions]=((2.0)*(atan(htj12)));
if(isinf(htj16)){
cj16array[numsolutions] = IKcos(j16array[numsolutions]);
sj16array[numsolutions] = IKsin(j16array[numsolutions]);
}
else{
IkReal x147=htj16*htj16;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+x147),-1);
if(!x148.valid){
continue;
}
cj16array[numsolutions]=((x148.value)*(((1.0)+(((-1.0)*x147)))));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+(htj16*htj16)),-1);
if(!x149.valid){
continue;
}
sj16array[numsolutions]=((2.0)*htj16*(x149.value));
}
if(isinf(htj17)){
cj17array[numsolutions] = IKcos(j17array[numsolutions]);
sj17array[numsolutions] = IKsin(j17array[numsolutions]);
}
else{
IkReal x150=htj17*htj17;
CheckValue<IkReal> x151=IKPowWithIntegerCheck(((1.0)+x150),-1);
if(!x151.valid){
continue;
}
cj17array[numsolutions]=((x151.value)*(((1.0)+(((-1.0)*x150)))));
CheckValue<IkReal> x152=IKPowWithIntegerCheck(((1.0)+(htj17*htj17)),-1);
if(!x152.valid){
continue;
}
sj17array[numsolutions]=((2.0)*htj17*(x152.value));
}
if(isinf(htj12)){
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
}
else{
IkReal x153=htj12*htj12;
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((1.0)+x153),-1);
if(!x154.valid){
continue;
}
cj12array[numsolutions]=((x154.value)*(((1.0)+(((-1.0)*x153)))));
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((1.0)+(htj12*htj12)),-1);
if(!x155.valid){
continue;
}
sj12array[numsolutions]=((2.0)*htj12*(x155.value));
}
if( j16array[numsolutions] > IKPI )
{
    j16array[numsolutions]-=IK2PI;
}
else if( j16array[numsolutions] < -IKPI )
{
    j16array[numsolutions]+=IK2PI;
}
if( j17array[numsolutions] > IKPI )
{
    j17array[numsolutions]-=IK2PI;
}
else if( j17array[numsolutions] < -IKPI )
{
    j17array[numsolutions]+=IK2PI;
}
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j16valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj16 = 16;
_nj17 = 1;
_nj12 = 1;
for(int ij16 = 0; ij16 < numsolutions; ++ij16)
    {
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
_ij17[0] = 0; _ij17[1] = -1;
_ij12[0] = 0; _ij12[1] = -1;
for(int iij16 = ij16+1; iij16 < numsolutions; ++iij16)
{
if( !j16valid[iij16] ) { continue; }
if( IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(cj17array[ij16]-cj17array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij16]-sj17array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(cj12array[ij16]-cj12array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij16]-sj12array[iij16]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j16valid[iij16]=false; _ij16[1] = iij16; _ij17[1] = 0; _ij12[1] = 0;  break; 
}
}
    j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];

    j17 = j17array[ij16]; cj17 = cj17array[ij16]; sj17 = sj17array[ij16];

    j12 = j12array[ij16]; cj12 = cj12array[ij16]; sj12 = sj12array[ij16];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j15eval[3];
IkReal x156=((1.0)*sj17);
IkReal x157=(cj12*r20);
IkReal x158=(cj12*r21);
IkReal x159=((((-1.0)*cj16*r02))+((cj17*r00*sj16))+(((-1.0)*r01*sj16*x156)));
j15eval[0]=x159;
j15eval[1]=((IKabs(((((-1.0)*cj17*x158))+(((-1.0)*x156*x157)))))+(IKabs((((cj12*r22*sj16))+((cj16*cj17*x157))+(((-1.0)*cj16*x156*x158))))));
j15eval[2]=IKsign(x159);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
IkReal x160=((1.0)*cj16);
IkReal x161=(cj17*sj12);
IkReal x162=(sj12*sj17);
IkReal x163=((((-1.0)*r12*x160))+((cj17*r10*sj16))+(((-1.0)*r11*sj16*sj17)));
j15eval[0]=x163;
j15eval[1]=IKsign(x163);
j15eval[2]=((IKabs((((r22*sj12*sj16))+((cj16*r20*x161))+(((-1.0)*r21*x160*x162)))))+(IKabs(((((-1.0)*r20*x162))+(((-1.0)*r21*x161))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[2];
IkReal x164=(((cj16*r22))+((r21*sj16*sj17))+(((-1.0)*cj17*r20*sj16)));
j15eval[0]=x164;
j15eval[1]=IKsign(x164);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x165=((1.0)*cj17);
IkReal x166=((1.0)*sj17);
IkReal x167=((((-1.0)*r20*sj16*x165))+((cj16*r22))+((r21*sj16*sj17)));
j15eval[0]=x167;
j15eval[1]=IKsign(x167);
j15eval[2]=((IKabs((((r02*sj16))+(((-1.0)*cj16*r01*x166))+((cj16*cj17*r00)))))+(IKabs(((((-1.0)*r01*x165))+(((-1.0)*r00*x166))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x168=((1.0)*sj17);
IkReal x169=((((-1.0)*cj16*r02))+((cj17*r00*sj16))+(((-1.0)*r01*sj16*x168)));
j15eval[0]=x169;
j15eval[1]=IKsign(x169);
j15eval[2]=((IKabs(((((-1.0)*cj17*r21))+(((-1.0)*r20*x168)))))+(IKabs(((((-1.0)*cj16*r21*x168))+((cj16*cj17*r20))+((r22*sj16))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x170=cj16*cj16;
IkReal x171=cj17*cj17;
IkReal x172=r10*r10;
IkReal x173=r11*r11;
IkReal x174=r12*r12;
IkReal x175=(r11*sj17);
IkReal x176=((1.0)*r10);
IkReal x177=((2.0)*cj17*r10);
IkReal x178=((1.0)*x172);
IkReal x179=(cj16*r12*sj16);
IkReal x180=(x170*x173);
IkReal x181=((((-1.0)*x175*x177))+((x170*x175*x177))+(((-1.0)*x170*x171*x178))+(((-1.0)*x178))+(((-1.0)*x177*x179))+(((-1.0)*x174))+(((-1.0)*x180))+((x171*x180))+((x171*x172))+(((2.0)*x175*x179))+((x170*x174))+(((-1.0)*x171*x173)));
j15eval[0]=x181;
j15eval[1]=((IKabs((((cj16*x175))+(((-1.0)*cj16*cj17*x176))+(((-1.0)*r12*sj16)))))+(IKabs(((((-1.0)*cj17*r11))+(((-1.0)*sj17*x176))))));
j15eval[2]=IKsign(x181);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13, j14, j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x182=cj16*cj16;
IkReal x183=cj17*cj17;
IkReal x184=r10*r10;
IkReal x185=r11*r11;
IkReal x186=r12*r12;
IkReal x187=(r12*sj16);
IkReal x188=(r11*sj17);
IkReal x189=(cj17*r10);
IkReal x190=((2.0)*cj16);
IkReal x191=((1.0)*x184);
IkReal x192=(x182*x185);
CheckValue<IkReal> x193 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*x189))+((cj16*x188))+(((-1.0)*x187)))),IkReal(((((-1.0)*cj17*r11))+(((-1.0)*r10*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x193.valid){
continue;
}
CheckValue<IkReal> x194=IKPowWithIntegerCheck(IKsign((((x187*x188*x190))+(((2.0)*x182*x188*x189))+(((-1.0)*x192))+(((-1.0)*x191))+(((-1.0)*x186))+(((-1.0)*x187*x189*x190))+(((-1.0)*x183*x185))+(((-1.0)*x182*x183*x191))+(((-2.0)*x188*x189))+((x183*x184))+((x182*x186))+((x183*x192)))),-1);
if(!x194.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x193.value)+(((1.5707963267949)*(x194.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x195=IKsin(j15);
IkReal x196=IKcos(j15);
IkReal x197=((1.0)*r00);
IkReal x198=((1.0)*cj17);
IkReal x199=(sj17*x196);
IkReal x200=(cj16*x195);
IkReal x201=((1.0)*sj16*x195);
evalcond[0]=(((cj17*r11*x195))+(((-1.0)*r12*sj16*x196))+((r10*sj17*x195))+(((-1.0)*cj16*r10*x196*x198))+((cj16*r11*x199)));
evalcond[1]=((((-1.0)*r22*x201))+(((-1.0)*r20*x198*x200))+(((-1.0)*r21*x196*x198))+((r21*sj17*x200))+(((-1.0)*r20*x199)));
evalcond[2]=((((-1.0)*r02*x201))+(((-1.0)*x197*x199))+(((-1.0)*r01*x196*x198))+((r01*sj17*x200))+(((-1.0)*cj17*x197*x200)));
evalcond[3]=((1.0)+(((-1.0)*r12*x201))+(((-1.0)*r10*x199))+(((-1.0)*r10*x198*x200))+((r11*sj17*x200))+(((-1.0)*r11*x196*x198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=1.0;
j12=0;
IkReal x202=((5.034)*px);
IkReal x203=((0.42)*pz);
IkReal x204=((12.0)*pz);
IkReal x205=(cj17*sj16);
IkReal x206=(r20*sj17);
IkReal x207=(sj16*sj17);
IkReal x208=(cj17*r21);
IkReal x209=(cj16*r22);
IkReal x210=(cj17*r01);
IkReal x211=(cj16*r02);
IkReal x212=(r00*sj17);
IkReal x213=((2.126463)*r00*x205);
IkReal x214=((0.42)*r00*x205);
IkReal x215=((5.034)*r20*x205);
IkReal x216=(x213+x203+x202);
IkReal x217=(x214+x215+x204);
IkReal x218=((((0.00042)*x208))+(((0.00042)*x206))+(((2.126463)*x211))+(((2.126463)*r01*x207))+(((0.005034)*x210))+(((0.005034)*x212)));
IkReal x219=((((5.034)*x209))+(((0.012)*x208))+(((0.012)*x206))+(((5.034)*r21*x207))+(((0.42)*x211))+(((0.42)*r01*x207)));
j13eval[0]=((6.094496)+(IKabs(((0.02161)+(((-0.00014)*x208))+(((-0.00014)*x206))+(((-0.001678)*x210))+(((-0.001678)*x212))+(((0.14)*pz))+(((0.708821)*r00*x205))+(((1.678)*px))+(((-0.708821)*x211))+(((-0.708821)*r01*x207)))))+(IKabs(((1.816)+x217+(((-1.0)*x219)))))+(IKabs(((-0.06229)+x216+(((-1.0)*x218)))))+(IKabs(((-0.18941)+x216+(((-1.0)*x218)))))+(IKabs(((-1.816)+x217+(((-1.0)*x219)))))+(IKabs(((1.816)+(((-1.678)*r21*x207))+(((1.678)*r20*x205))+(((-0.004)*x206))+(((-0.004)*x208))+(((4.0)*pz))+(((-0.14)*x211))+(((-0.14)*r01*x207))+(((0.14)*r00*x205))+(((-1.678)*x209))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x220=((12.0)*pz);
IkReal x221=((4.0)*pz);
IkReal x222=(cj17*sj16);
IkReal x223=(r20*sj17);
IkReal x224=(cj16*r22);
IkReal x225=(cj17*r21);
IkReal x226=(cj16*r02);
IkReal x227=(r21*sj16*sj17);
IkReal x228=(r01*sj16*sj17);
IkReal x229=((0.42)*r00*x222);
IkReal x230=((5.034)*r20*x222);
IkReal x231=((1.678)*r20*x222);
IkReal x232=((0.14)*r00*x222);
IkReal x233=(x229+x220+x230);
IkReal x234=(x221+x232+x231);
IkReal x235=((((5.034)*x227))+(((5.034)*x224))+(((0.42)*x226))+(((0.42)*x228))+(((0.012)*x223))+(((0.012)*x225)));
IkReal x236=((((0.14)*x226))+(((0.14)*x228))+(((1.678)*x224))+(((1.678)*x227))+(((0.004)*x223))+(((0.004)*x225)));
op[0]=((1.816)+(((-1.0)*x236))+x234);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x235))+x233);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x235))+x233);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x236))+x234);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x237=((5.034)*px);
IkReal x238=((0.42)*pz);
IkReal x239=((0.14)*pz);
IkReal x240=((1.678)*px);
IkReal x241=((2.126463)*sj16);
IkReal x242=(cj17*r00);
IkReal x243=(r01*sj17);
IkReal x244=(cj17*r21);
IkReal x245=((0.708821)*sj16);
IkReal x246=(cj17*r01);
IkReal x247=(r00*sj17);
IkReal x248=(r20*sj17);
IkReal x249=(cj16*r02);
IkReal x250=((0.001678)*x246);
IkReal x251=((0.708821)*x249);
IkReal x252=((0.00014)*x244);
IkReal x253=((0.001678)*x247);
IkReal x254=((0.00014)*x248);
IkReal x255=(x241*x242);
IkReal x256=(x242*x245);
IkReal x257=(x243*x245);
IkReal x258=(x256+x239+x240);
IkReal x259=(x255+x238+x237);
IkReal x260=((((2.126463)*x249))+(((0.005034)*x247))+(((0.005034)*x246))+((x241*x243))+(((0.00042)*x248))+(((0.00042)*x244)));
IkReal x261=(x254+x257+x250+x251+x252+x253);
j13evalpoly[0]=((-0.10551)+(((htj13*htj13)*(((-0.18941)+x259+(((-1.0)*x260))))))+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+x258+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+x258+(((-1.0)*x261))))))+(((-1.523624)*htj13))+(((htj13*htj13*htj13*htj13)*(((-0.06229)+x259+(((-1.0)*x260))))))+(((-1.0)*x261))+(((-3.047248)*(htj13*htj13*htj13))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x262=((1.0)*sj13);
IkReal x263=(sj16*sj17);
IkReal x264=(cj16*r02);
IkReal x265=((1.0)*cj13);
IkReal x266=(cj16*r22);
IkReal x267=(cj13*cj17*sj16);
IkReal x268=(cj17*sj13*sj16);
if( IKabs(((((-1.0)*x262*x264))+(((-1.0)*r21*x263*x265))+(((-1.0)*r01*x262*x263))+((r00*x268))+(((-1.0)*x265*x266))+((r20*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x262*x266))+(((-1.0)*r21*x262*x263))+((cj13*r01*x263))+((cj13*x264))+(((-1.0)*cj17*r00*sj16*x265))+((r20*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x262*x264))+(((-1.0)*r21*x263*x265))+(((-1.0)*r01*x262*x263))+((r00*x268))+(((-1.0)*x265*x266))+((r20*x267))))+IKsqr(((((-1.0)*x262*x266))+(((-1.0)*r21*x262*x263))+((cj13*r01*x263))+((cj13*x264))+(((-1.0)*cj17*r00*sj16*x265))+((r20*x268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*x262*x264))+(((-1.0)*r21*x263*x265))+(((-1.0)*r01*x262*x263))+((r00*x268))+(((-1.0)*x265*x266))+((r20*x267))), ((((-1.0)*x262*x266))+(((-1.0)*r21*x262*x263))+((cj13*r01*x263))+((cj13*x264))+(((-1.0)*cj17*r00*sj16*x265))+((r20*x268))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x269=IKsin(j14);
IkReal x270=IKcos(j14);
IkReal x271=((1.0)*cj15);
IkReal x272=(cj16*cj17);
IkReal x273=((1.0)*cj16);
IkReal x274=(sj15*sj17);
IkReal x275=((0.001)*sj17);
IkReal x276=(cj17*sj16);
IkReal x277=(cj17*sj15);
IkReal x278=((0.001)*cj17);
IkReal x279=(sj13*x269);
IkReal x280=(cj13*x269);
IkReal x281=(sj13*x270);
IkReal x282=((1.0)*sj16*sj17);
IkReal x283=(cj15*cj16*sj17);
IkReal x284=(cj13*x270);
IkReal x285=((1.0)*x280);
IkReal x286=((1.0)*x281);
IkReal x287=(x286+x285);
evalcond[0]=((((-1.0)*x279))+x284+(((-1.0)*r01*x282))+(((-1.0)*r02*x273))+((r00*x276)));
evalcond[1]=((((-1.0)*r21*x282))+(((-1.0)*r22*x273))+(((-1.0)*x287))+((r20*x276)));
evalcond[2]=((((-1.0)*r20*x271*x272))+((r21*x283))+((r21*x277))+x279+(((-1.0)*x284))+(((-1.0)*r22*sj16*x271))+((r20*x274)));
evalcond[3]=(((r01*x283))+(((-1.0)*r02*sj16*x271))+((r01*x277))+(((-1.0)*x287))+((r00*x274))+(((-1.0)*r00*x271*x272)));
evalcond[4]=((((-0.4195)*x280))+(((-0.4195)*x281))+(((0.454)*cj13))+((r21*x278))+(((-1.0)*pz))+(((-0.035)*x279))+(((0.035)*x284))+((r20*x275)));
evalcond[5]=((0.025)+(((-1.0)*px))+(((0.4195)*x284))+(((0.035)*x280))+(((0.035)*x281))+(((-0.4195)*x279))+((r01*x278))+((r00*x275))+(((0.454)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x288=((1.0)*sj17);
CheckValue<IkReal> x289=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r02))+(((-1.0)*r01*sj16*x288))+((cj17*r00*sj16)))),-1);
if(!x289.valid){
continue;
}
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r21))+(((-1.0)*r20*x288)))),IkReal(((((-1.0)*cj16*r21*x288))+((cj16*cj17*r20))+((r22*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x289.value)))+(x290.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x291=IKsin(j15);
IkReal x292=IKcos(j15);
IkReal x293=((1.0)*r00);
IkReal x294=((1.0)*cj17);
IkReal x295=(sj17*x292);
IkReal x296=(cj16*x291);
IkReal x297=((1.0)*sj16*x291);
evalcond[0]=(((r10*sj17*x291))+(((-1.0)*r12*sj16*x292))+(((-1.0)*cj16*r10*x292*x294))+((cj17*r11*x291))+((cj16*r11*x295)));
evalcond[1]=((((-1.0)*r20*x294*x296))+(((-1.0)*r20*x295))+(((-1.0)*r21*x292*x294))+((r21*sj17*x296))+(((-1.0)*r22*x297)));
evalcond[2]=((((-1.0)*r01*x292*x294))+(((-1.0)*x293*x295))+(((-1.0)*r02*x297))+((r01*sj17*x296))+(((-1.0)*cj17*x293*x296)));
evalcond[3]=((1.0)+(((-1.0)*r10*x295))+(((-1.0)*r10*x294*x296))+((r11*sj17*x296))+(((-1.0)*r11*x292*x294))+(((-1.0)*r12*x297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=1.0;
j12=0;
IkReal x298=((5.034)*px);
IkReal x299=((0.42)*pz);
IkReal x300=((12.0)*pz);
IkReal x301=(cj17*sj16);
IkReal x302=(r20*sj17);
IkReal x303=(sj16*sj17);
IkReal x304=(cj17*r21);
IkReal x305=(cj16*r22);
IkReal x306=(cj17*r01);
IkReal x307=(cj16*r02);
IkReal x308=(r00*sj17);
IkReal x309=((2.126463)*r00*x301);
IkReal x310=((0.42)*r00*x301);
IkReal x311=((5.034)*r20*x301);
IkReal x312=(x309+x298+x299);
IkReal x313=(x300+x311+x310);
IkReal x314=((((0.00042)*x304))+(((0.00042)*x302))+(((2.126463)*x307))+(((2.126463)*r01*x303))+(((0.005034)*x308))+(((0.005034)*x306)));
IkReal x315=((((5.034)*r21*x303))+(((5.034)*x305))+(((0.42)*r01*x303))+(((0.42)*x307))+(((0.012)*x302))+(((0.012)*x304)));
j13eval[0]=((6.094496)+(IKabs(((1.816)+x313+(((-1.0)*x315)))))+(IKabs(((-1.816)+x313+(((-1.0)*x315)))))+(IKabs(((0.02161)+(((0.14)*pz))+(((-0.708821)*r01*x303))+(((-0.00014)*x304))+(((-0.00014)*x302))+(((-0.708821)*x307))+(((1.678)*px))+(((0.708821)*r00*x301))+(((-0.001678)*x308))+(((-0.001678)*x306)))))+(IKabs(((-0.18941)+x312+(((-1.0)*x314)))))+(IKabs(((1.816)+(((-0.14)*r01*x303))+(((4.0)*pz))+(((0.14)*r00*x301))+(((1.678)*r20*x301))+(((-0.004)*x302))+(((-0.004)*x304))+(((-0.14)*x307))+(((-1.678)*r21*x303))+(((-1.678)*x305)))))+(IKabs(((-0.06229)+x312+(((-1.0)*x314))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x316=((12.0)*pz);
IkReal x317=((4.0)*pz);
IkReal x318=(cj17*sj16);
IkReal x319=(r20*sj17);
IkReal x320=(cj16*r22);
IkReal x321=(cj17*r21);
IkReal x322=(cj16*r02);
IkReal x323=(r21*sj16*sj17);
IkReal x324=(r01*sj16*sj17);
IkReal x325=((0.42)*r00*x318);
IkReal x326=((5.034)*r20*x318);
IkReal x327=((1.678)*r20*x318);
IkReal x328=((0.14)*r00*x318);
IkReal x329=(x325+x326+x316);
IkReal x330=(x327+x328+x317);
IkReal x331=((((0.012)*x319))+(((0.42)*x322))+(((0.42)*x324))+(((0.012)*x321))+(((5.034)*x320))+(((5.034)*x323)));
IkReal x332=((((0.004)*x321))+(((0.004)*x319))+(((0.14)*x324))+(((0.14)*x322))+(((1.678)*x320))+(((1.678)*x323)));
op[0]=((1.816)+x330+(((-1.0)*x332)));
op[1]=0;
op[2]=((1.816)+x329+(((-1.0)*x331)));
op[3]=0;
op[4]=((-1.816)+x329+(((-1.0)*x331)));
op[5]=0;
op[6]=((-1.816)+x330+(((-1.0)*x332)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x333=((5.034)*px);
IkReal x334=((0.42)*pz);
IkReal x335=((0.14)*pz);
IkReal x336=((1.678)*px);
IkReal x337=((2.126463)*sj16);
IkReal x338=(cj17*r00);
IkReal x339=(r01*sj17);
IkReal x340=(cj17*r21);
IkReal x341=((0.708821)*sj16);
IkReal x342=(cj17*r01);
IkReal x343=(r00*sj17);
IkReal x344=(r20*sj17);
IkReal x345=(cj16*r02);
IkReal x346=((0.001678)*x342);
IkReal x347=((0.708821)*x345);
IkReal x348=((0.00014)*x340);
IkReal x349=((0.001678)*x343);
IkReal x350=((0.00014)*x344);
IkReal x351=(x337*x338);
IkReal x352=(x338*x341);
IkReal x353=(x339*x341);
IkReal x354=(x336+x335+x352);
IkReal x355=(x333+x334+x351);
IkReal x356=((((0.00042)*x340))+(((0.00042)*x344))+((x337*x339))+(((2.126463)*x345))+(((0.005034)*x342))+(((0.005034)*x343)));
IkReal x357=(x350+x353+x346+x347+x348+x349);
j13evalpoly[0]=((-0.10551)+(((htj13*htj13*htj13*htj13)*(((-0.06229)+(((-1.0)*x356))+x355))))+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+(((-1.0)*x357))+x354+(((-1.523624)*htj13))+(((htj13*htj13)*(((-0.18941)+(((-1.0)*x356))+x355))))+(((-3.047248)*(htj13*htj13*htj13)))+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+(((-1.0)*x357))+x354)))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x358=((1.0)*sj13);
IkReal x359=(sj16*sj17);
IkReal x360=(cj16*r02);
IkReal x361=((1.0)*cj13);
IkReal x362=(cj16*r22);
IkReal x363=(cj13*cj17*sj16);
IkReal x364=(cj17*sj13*sj16);
if( IKabs((((r20*x363))+(((-1.0)*x361*x362))+((r00*x364))+(((-1.0)*x358*x360))+(((-1.0)*r01*x358*x359))+(((-1.0)*r21*x359*x361)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj17*r00*sj16*x361))+((r20*x364))+(((-1.0)*r21*x358*x359))+(((-1.0)*x358*x362))+((cj13*x360))+((cj13*r01*x359)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r20*x363))+(((-1.0)*x361*x362))+((r00*x364))+(((-1.0)*x358*x360))+(((-1.0)*r01*x358*x359))+(((-1.0)*r21*x359*x361))))+IKsqr(((((-1.0)*cj17*r00*sj16*x361))+((r20*x364))+(((-1.0)*r21*x358*x359))+(((-1.0)*x358*x362))+((cj13*x360))+((cj13*r01*x359))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r20*x363))+(((-1.0)*x361*x362))+((r00*x364))+(((-1.0)*x358*x360))+(((-1.0)*r01*x358*x359))+(((-1.0)*r21*x359*x361))), ((((-1.0)*cj17*r00*sj16*x361))+((r20*x364))+(((-1.0)*r21*x358*x359))+(((-1.0)*x358*x362))+((cj13*x360))+((cj13*r01*x359))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x365=IKsin(j14);
IkReal x366=IKcos(j14);
IkReal x367=((1.0)*cj15);
IkReal x368=(cj16*cj17);
IkReal x369=((1.0)*cj16);
IkReal x370=(sj15*sj17);
IkReal x371=((0.001)*sj17);
IkReal x372=(cj17*sj16);
IkReal x373=(cj17*sj15);
IkReal x374=((0.001)*cj17);
IkReal x375=(sj13*x365);
IkReal x376=(cj13*x365);
IkReal x377=(sj13*x366);
IkReal x378=((1.0)*sj16*sj17);
IkReal x379=(cj15*cj16*sj17);
IkReal x380=(cj13*x366);
IkReal x381=((1.0)*x376);
IkReal x382=((1.0)*x377);
IkReal x383=(x382+x381);
evalcond[0]=((((-1.0)*x375))+(((-1.0)*r02*x369))+((r00*x372))+(((-1.0)*r01*x378))+x380);
evalcond[1]=(((r20*x372))+(((-1.0)*r21*x378))+(((-1.0)*x383))+(((-1.0)*r22*x369)));
evalcond[2]=(((r20*x370))+(((-1.0)*r20*x367*x368))+x375+(((-1.0)*x380))+((r21*x373))+((r21*x379))+(((-1.0)*r22*sj16*x367)));
evalcond[3]=(((r00*x370))+((r01*x373))+((r01*x379))+(((-1.0)*r02*sj16*x367))+(((-1.0)*x383))+(((-1.0)*r00*x367*x368)));
evalcond[4]=(((r20*x371))+(((0.454)*cj13))+(((-1.0)*pz))+(((-0.035)*x375))+((r21*x374))+(((-0.4195)*x376))+(((-0.4195)*x377))+(((0.035)*x380)));
evalcond[5]=((0.025)+((r00*x371))+((r01*x374))+(((0.035)*x376))+(((0.035)*x377))+(((0.4195)*x380))+(((-1.0)*px))+(((-0.4195)*x375))+(((0.454)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x384=((1.0)*cj17);
IkReal x385=((1.0)*sj17);
CheckValue<IkReal> x386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj16*x384))+((cj16*r22))+((r21*sj16*sj17)))),-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x385))+(((-1.0)*r01*x384)))),IkReal((((r02*sj16))+(((-1.0)*cj16*r01*x385))+((cj16*cj17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x386.value)))+(x387.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x388=IKsin(j15);
IkReal x389=IKcos(j15);
IkReal x390=((1.0)*r00);
IkReal x391=((1.0)*cj17);
IkReal x392=(sj17*x389);
IkReal x393=(cj16*x388);
IkReal x394=((1.0)*sj16*x388);
evalcond[0]=((((-1.0)*r12*sj16*x389))+((cj17*r11*x388))+((r10*sj17*x388))+((cj16*r11*x392))+(((-1.0)*cj16*r10*x389*x391)));
evalcond[1]=(((r21*sj17*x393))+(((-1.0)*r20*x392))+(((-1.0)*r20*x391*x393))+(((-1.0)*r22*x394))+(((-1.0)*r21*x389*x391)));
evalcond[2]=((((-1.0)*r01*x389*x391))+(((-1.0)*cj17*x390*x393))+((r01*sj17*x393))+(((-1.0)*r02*x394))+(((-1.0)*x390*x392)));
evalcond[3]=((1.0)+(((-1.0)*r10*x391*x393))+((r11*sj17*x393))+(((-1.0)*r11*x389*x391))+(((-1.0)*r12*x394))+(((-1.0)*r10*x392)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=1.0;
j12=0;
IkReal x395=((5.034)*px);
IkReal x396=((0.42)*pz);
IkReal x397=((12.0)*pz);
IkReal x398=(cj17*sj16);
IkReal x399=(r20*sj17);
IkReal x400=(sj16*sj17);
IkReal x401=(cj17*r21);
IkReal x402=(cj16*r22);
IkReal x403=(cj17*r01);
IkReal x404=(cj16*r02);
IkReal x405=(r00*sj17);
IkReal x406=((2.126463)*r00*x398);
IkReal x407=((0.42)*r00*x398);
IkReal x408=((5.034)*r20*x398);
IkReal x409=(x395+x396+x406);
IkReal x410=(x397+x407+x408);
IkReal x411=((((0.00042)*x399))+(((0.00042)*x401))+(((2.126463)*r01*x400))+(((2.126463)*x404))+(((0.005034)*x403))+(((0.005034)*x405)));
IkReal x412=((((5.034)*r21*x400))+(((0.42)*r01*x400))+(((5.034)*x402))+(((0.42)*x404))+(((0.012)*x401))+(((0.012)*x399)));
j13eval[0]=((6.094496)+(IKabs(((0.02161)+(((-0.001678)*x403))+(((-0.001678)*x405))+(((0.14)*pz))+(((-0.708821)*r01*x400))+(((-0.00014)*x401))+(((-0.708821)*x404))+(((-0.00014)*x399))+(((0.708821)*r00*x398))+(((1.678)*px)))))+(IKabs(((-0.18941)+x409+(((-1.0)*x411)))))+(IKabs(((-1.816)+x410+(((-1.0)*x412)))))+(IKabs(((1.816)+x410+(((-1.0)*x412)))))+(IKabs(((-0.06229)+x409+(((-1.0)*x411)))))+(IKabs(((1.816)+(((-0.14)*r01*x400))+(((-1.678)*r21*x400))+(((-0.004)*x399))+(((4.0)*pz))+(((-0.004)*x401))+(((-1.678)*x402))+(((1.678)*r20*x398))+(((0.14)*r00*x398))+(((-0.14)*x404))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x413=((12.0)*pz);
IkReal x414=((4.0)*pz);
IkReal x415=(cj17*sj16);
IkReal x416=(r20*sj17);
IkReal x417=(cj16*r22);
IkReal x418=(cj17*r21);
IkReal x419=(cj16*r02);
IkReal x420=(r21*sj16*sj17);
IkReal x421=(r01*sj16*sj17);
IkReal x422=((0.42)*r00*x415);
IkReal x423=((5.034)*r20*x415);
IkReal x424=((1.678)*r20*x415);
IkReal x425=((0.14)*r00*x415);
IkReal x426=(x413+x423+x422);
IkReal x427=(x414+x425+x424);
IkReal x428=((((0.42)*x421))+(((5.034)*x420))+(((0.012)*x418))+(((0.012)*x416))+(((5.034)*x417))+(((0.42)*x419)));
IkReal x429=((((0.14)*x421))+(((0.004)*x418))+(((0.004)*x416))+(((1.678)*x420))+(((0.14)*x419))+(((1.678)*x417)));
op[0]=((1.816)+(((-1.0)*x429))+x427);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x428))+x426);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x428))+x426);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x429))+x427);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x430=((5.034)*px);
IkReal x431=((0.42)*pz);
IkReal x432=((0.14)*pz);
IkReal x433=((1.678)*px);
IkReal x434=((2.126463)*sj16);
IkReal x435=(cj17*r00);
IkReal x436=(r01*sj17);
IkReal x437=(cj17*r21);
IkReal x438=((0.708821)*sj16);
IkReal x439=(cj17*r01);
IkReal x440=(r00*sj17);
IkReal x441=(r20*sj17);
IkReal x442=(cj16*r02);
IkReal x443=((0.001678)*x439);
IkReal x444=((0.708821)*x442);
IkReal x445=((0.00014)*x437);
IkReal x446=((0.001678)*x440);
IkReal x447=((0.00014)*x441);
IkReal x448=(x434*x435);
IkReal x449=(x435*x438);
IkReal x450=(x436*x438);
IkReal x451=(x432+x433+x449);
IkReal x452=(x430+x431+x448);
IkReal x453=((((2.126463)*x442))+((x434*x436))+(((0.00042)*x441))+(((0.00042)*x437))+(((0.005034)*x439))+(((0.005034)*x440)));
IkReal x454=(x445+x444+x447+x446+x443+x450);
j13evalpoly[0]=((-0.10551)+(((htj13*htj13*htj13*htj13)*(((-0.06229)+(((-1.0)*x453))+x452))))+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+(((-1.0)*x454))+x451))))+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+(((-1.0)*x454))+x451+(((-1.523624)*htj13))+(((htj13*htj13)*(((-0.18941)+(((-1.0)*x453))+x452))))+(((-3.047248)*(htj13*htj13*htj13))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x455=((1.0)*sj13);
IkReal x456=(sj16*sj17);
IkReal x457=(cj16*r02);
IkReal x458=((1.0)*cj13);
IkReal x459=(cj16*r22);
IkReal x460=(cj13*cj17*sj16);
IkReal x461=(cj17*sj13*sj16);
if( IKabs(((((-1.0)*r01*x455*x456))+((r20*x460))+(((-1.0)*r21*x456*x458))+(((-1.0)*x455*x457))+((r00*x461))+(((-1.0)*x458*x459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x455*x456))+((cj13*r01*x456))+(((-1.0)*cj17*r00*sj16*x458))+((r20*x461))+((cj13*x457))+(((-1.0)*x455*x459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x455*x456))+((r20*x460))+(((-1.0)*r21*x456*x458))+(((-1.0)*x455*x457))+((r00*x461))+(((-1.0)*x458*x459))))+IKsqr(((((-1.0)*r21*x455*x456))+((cj13*r01*x456))+(((-1.0)*cj17*r00*sj16*x458))+((r20*x461))+((cj13*x457))+(((-1.0)*x455*x459))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*r01*x455*x456))+((r20*x460))+(((-1.0)*r21*x456*x458))+(((-1.0)*x455*x457))+((r00*x461))+(((-1.0)*x458*x459))), ((((-1.0)*r21*x455*x456))+((cj13*r01*x456))+(((-1.0)*cj17*r00*sj16*x458))+((r20*x461))+((cj13*x457))+(((-1.0)*x455*x459))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x462=IKsin(j14);
IkReal x463=IKcos(j14);
IkReal x464=((1.0)*cj15);
IkReal x465=(cj16*cj17);
IkReal x466=((1.0)*cj16);
IkReal x467=(sj15*sj17);
IkReal x468=((0.001)*sj17);
IkReal x469=(cj17*sj16);
IkReal x470=(cj17*sj15);
IkReal x471=((0.001)*cj17);
IkReal x472=(sj13*x462);
IkReal x473=(cj13*x462);
IkReal x474=(sj13*x463);
IkReal x475=((1.0)*sj16*sj17);
IkReal x476=(cj15*cj16*sj17);
IkReal x477=(cj13*x463);
IkReal x478=((1.0)*x473);
IkReal x479=((1.0)*x474);
IkReal x480=(x478+x479);
evalcond[0]=((((-1.0)*r01*x475))+(((-1.0)*x472))+x477+(((-1.0)*r02*x466))+((r00*x469)));
evalcond[1]=((((-1.0)*r21*x475))+(((-1.0)*x480))+((r20*x469))+(((-1.0)*r22*x466)));
evalcond[2]=(((r21*x470))+((r21*x476))+((r20*x467))+(((-1.0)*r22*sj16*x464))+(((-1.0)*x477))+x472+(((-1.0)*r20*x464*x465)));
evalcond[3]=((((-1.0)*x480))+((r00*x467))+(((-1.0)*r02*sj16*x464))+(((-1.0)*r00*x464*x465))+((r01*x470))+((r01*x476)));
evalcond[4]=(((r21*x471))+(((-0.4195)*x473))+(((-0.4195)*x474))+(((-0.035)*x472))+((r20*x468))+(((0.454)*cj13))+(((-1.0)*pz))+(((0.035)*x477)));
evalcond[5]=((0.025)+(((-0.4195)*x472))+(((-1.0)*px))+(((0.035)*x473))+(((0.035)*x474))+(((0.4195)*x477))+((r00*x468))+(((0.454)*sj13))+((r01*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x481=((1.0)*cj17);
IkReal x482=((1.0)*sj17);
IkReal x483=(((r01*sj16*sj17))+(((-1.0)*r00*sj16*x481))+((cj16*r02)));
j15eval[0]=x483;
j15eval[1]=IKsign(x483);
j15eval[2]=((IKabs(((((-1.0)*r21*x481))+(((-1.0)*r20*x482)))))+(IKabs((((cj16*cj17*r20))+((r22*sj16))+(((-1.0)*cj16*r21*x482))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x484=((1.0)*r01);
IkReal x485=((1.0)*sj17);
IkReal x486=((((-1.0)*r21*sj16*x485))+(((-1.0)*cj16*r22))+((cj17*r20*sj16)));
j15eval[0]=x486;
j15eval[1]=IKsign(x486);
j15eval[2]=((IKabs((((r02*sj16))+((cj16*cj17*r00))+(((-1.0)*cj16*sj17*x484)))))+(IKabs(((((-1.0)*cj17*x484))+(((-1.0)*r00*x485))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x487=r11*r11;
IkReal x488=cj16*cj16;
IkReal x489=cj17*cj17;
IkReal x490=r10*r10;
IkReal x491=r12*r12;
IkReal x492=(r11*sj17);
IkReal x493=(r12*sj16);
IkReal x494=((1.0)*cj17);
IkReal x495=((2.0)*cj17*r10);
IkReal x496=((1.0)*x488);
IkReal x497=(x487*x489);
IkReal x498=(x489*x490);
IkReal x499=(((x488*x498))+(((-1.0)*x491*x496))+(((-1.0)*x496*x497))+((cj16*x493*x495))+(((-1.0)*x498))+x490+x491+x497+(((-2.0)*cj16*x492*x493))+((x487*x488))+((x492*x495))+(((-1.0)*x488*x492*x495)));
j15eval[0]=x499;
j15eval[1]=((IKabs(((((-1.0)*r10*sj17))+(((-1.0)*r11*x494)))))+(IKabs(((((-1.0)*cj16*r10*x494))+(((-1.0)*x493))+((cj16*x492))))));
j15eval[2]=IKsign(x499);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13, j14, j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x500=r11*r11;
IkReal x501=cj16*cj16;
IkReal x502=cj17*cj17;
IkReal x503=r10*r10;
IkReal x504=r12*r12;
IkReal x505=(cj17*r10);
IkReal x506=((2.0)*r11*sj17);
IkReal x507=(cj16*r12*sj16);
IkReal x508=((1.0)*x502);
IkReal x509=(x500*x501);
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(((((-1.0)*cj16*x505))+((cj16*r11*sj17))+(((-1.0)*r12*sj16)))),IkReal(((((-1.0)*cj17*r11))+(((-1.0)*r10*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(((((-1.0)*x506*x507))+((x500*x502))+(((-1.0)*x508*x509))+(((-1.0)*x501*x505*x506))+((x505*x506))+((x501*x502*x503))+(((-1.0)*x503*x508))+(((-1.0)*x501*x504))+x509+x503+x504+(((2.0)*x505*x507)))),-1);
if(!x511.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x510.value)+(((1.5707963267949)*(x511.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x512=IKsin(j15);
IkReal x513=IKcos(j15);
IkReal x514=((1.0)*r00);
IkReal x515=((1.0)*cj17);
IkReal x516=(sj17*x513);
IkReal x517=(cj16*x512);
IkReal x518=((1.0)*sj16*x512);
evalcond[0]=(((cj17*r11*x512))+((cj16*r11*x516))+(((-1.0)*cj16*r10*x513*x515))+((r10*sj17*x512))+(((-1.0)*r12*sj16*x513)));
evalcond[1]=((((-1.0)*r21*x513*x515))+(((-1.0)*r22*x518))+(((-1.0)*r20*x516))+((r21*sj17*x517))+(((-1.0)*r20*x515*x517)));
evalcond[2]=((((-1.0)*x514*x516))+(((-1.0)*r01*x513*x515))+((r01*sj17*x517))+(((-1.0)*cj17*x514*x517))+(((-1.0)*r02*x518)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x518))+(((-1.0)*r10*x516))+(((-1.0)*r11*x513*x515))+((r11*sj17*x517))+(((-1.0)*r10*x515*x517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x519=((4.0)*pz);
IkReal x520=((12.0)*pz);
IkReal x521=(cj17*sj16);
IkReal x522=(r21*sj17);
IkReal x523=(cj15*cj16);
IkReal x524=(r20*sj17);
IkReal x525=(cj17*r21);
IkReal x526=((0.14)*sj15);
IkReal x527=(cj16*r22);
IkReal x528=(cj16*r02);
IkReal x529=((0.42)*sj15);
IkReal x530=(cj17*r20);
IkReal x531=((1.678)*x527);
IkReal x532=((0.004)*x525);
IkReal x533=((0.004)*x524);
IkReal x534=((5.034)*x527);
IkReal x535=((0.012)*x525);
IkReal x536=((0.012)*x524);
IkReal x537=(r01*sj16*sj17);
IkReal x538=(cj15*r22*sj16);
IkReal x539=((1.678)*sj16*x522);
IkReal x540=((1.678)*r20*x521);
IkReal x541=((0.42)*r00*x521);
IkReal x542=((5.034)*sj16*x522);
IkReal x543=((5.034)*r20*x521);
IkReal x544=(x525*x529);
IkReal x545=(x524*x529);
IkReal x546=((0.42)*x522*x523);
IkReal x547=(x543+x520);
IkReal x548=(x540+x519);
IkReal x549=((((0.42)*x537))+(((0.42)*x528))+x547);
IkReal x550=((-1.816)+x531+x533+x532+x539);
IkReal x551=((((0.42)*x538))+(((0.42)*x523*x530))+x547);
IkReal x552=(x541+x542+x535+x534+x536);
IkReal x553=(x544+x545+x546+x542+x535+x534+x536);
j13eval[0]=((IKabs(((((-1.0)*x548))+(((-0.14)*x523*x530))+((x525*x526))+(((-0.14)*x538))+x550+((x524*x526))+(((0.14)*x522*x523)))))+(IKabs(((-1.816)+(((-1.0)*x549))+x552)))+(IKabs(((1.816)+(((-1.0)*x551))+x553)))+(IKabs(((1.816)+(((-1.0)*x549))+x552)))+(IKabs(((-1.816)+(((-1.0)*x551))+x553)))+(IKabs(((((-1.0)*x548))+(((-0.14)*x528))+(((-0.14)*x537))+x550+(((0.14)*r00*x521))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x554=(cj17*sj16);
IkReal x555=(r20*sj17);
IkReal x556=(cj16*r22);
IkReal x557=(cj17*r21);
IkReal x558=(cj16*r02);
IkReal x559=((5.034)*x556);
IkReal x560=((0.012)*x557);
IkReal x561=((0.012)*x555);
IkReal x562=((1.678)*x556);
IkReal x563=((0.004)*x557);
IkReal x564=((0.004)*x555);
IkReal x565=(r21*sj16*sj17);
IkReal x566=(r01*sj16*sj17);
IkReal x567=((0.42)*r00*x554);
IkReal x568=((5.034)*x565);
IkReal x569=((1.678)*x565);
IkReal x570=((0.14)*r00*x554);
IkReal x571=((((12.0)*pz))+(((5.034)*r20*x554))+(((0.42)*x566))+(((0.42)*x558)));
IkReal x572=((((1.678)*r20*x554))+(((4.0)*pz))+(((0.14)*x566))+(((0.14)*x558)));
IkReal x573=(x570+x569+x564+x562+x563);
IkReal x574=(x559+x568+x567+x560+x561);
op[0]=((-1.816)+(((-1.0)*x572))+x573);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x571))+x574);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x571))+x574);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x572))+x573);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x575=(cj17*r20);
IkReal x576=((1.678)*sj16);
IkReal x577=(r20*sj17);
IkReal x578=(r21*sj17);
IkReal x579=((5.034)*sj16);
IkReal x580=(cj17*r21);
IkReal x581=(cj15*cj16);
IkReal x582=(cj16*r22);
IkReal x583=((0.14)*sj15);
IkReal x584=((0.42)*sj15);
IkReal x585=((1.678)*x582);
IkReal x586=((0.004)*x580);
IkReal x587=((0.004)*x577);
IkReal x588=((5.034)*x582);
IkReal x589=((0.012)*x580);
IkReal x590=((0.012)*x577);
IkReal x591=(cj15*r22*sj16);
IkReal x592=(x577*x583);
IkReal x593=(x576*x578);
IkReal x594=(x580*x583);
IkReal x595=(x580*x584);
IkReal x596=(x577*x584);
IkReal x597=(x578*x579);
IkReal x598=((0.14)*x578*x581);
IkReal x599=((0.42)*x578*x581);
IkReal x600=((((12.0)*pz))+(((0.42)*x591))+(((0.42)*x575*x581))+((x575*x579)));
IkReal x601=((((0.14)*x591))+(((4.0)*pz))+((x575*x576))+(((0.14)*x575*x581)));
IkReal x602=(x588+x589+x597+x596+x595+x590+x599);
IkReal x603=(x585+x586+x587+x594+x593+x592+x598);
j13evalpoly[0]=((1.816)+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+x603+(((-1.0)*x601))))))+x603+(((htj13*htj13)*(((1.816)+x602+(((-1.0)*x600))))))+(((-1.0)*x601))+(((htj13*htj13*htj13*htj13)*(((-1.816)+x602+(((-1.0)*x600)))))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x604=(r21*sj17);
IkReal x605=(cj16*r02);
IkReal x606=((1.0)*cj13);
IkReal x607=(cj16*r22);
IkReal x608=(sj13*sj16);
IkReal x609=(r01*sj17);
IkReal x610=((1.0)*x608);
IkReal x611=(cj13*cj17*sj16);
if( IKabs((((x608*x609))+((r20*x611))+(((-1.0)*sj16*x604*x606))+(((-1.0)*cj17*r00*x610))+((sj13*x605))+(((-1.0)*x606*x607)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x611))+(((-1.0)*sj16*x606*x609))+((cj17*r20*x608))+(((-1.0)*sj13*x607))+(((-1.0)*x605*x606))+(((-1.0)*x604*x610)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x608*x609))+((r20*x611))+(((-1.0)*sj16*x604*x606))+(((-1.0)*cj17*r00*x610))+((sj13*x605))+(((-1.0)*x606*x607))))+IKsqr((((r00*x611))+(((-1.0)*sj16*x606*x609))+((cj17*r20*x608))+(((-1.0)*sj13*x607))+(((-1.0)*x605*x606))+(((-1.0)*x604*x610))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((x608*x609))+((r20*x611))+(((-1.0)*sj16*x604*x606))+(((-1.0)*cj17*r00*x610))+((sj13*x605))+(((-1.0)*x606*x607))), (((r00*x611))+(((-1.0)*sj16*x606*x609))+((cj17*r20*x608))+(((-1.0)*sj13*x607))+(((-1.0)*x605*x606))+(((-1.0)*x604*x610))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x612=IKsin(j14);
IkReal x613=IKcos(j14);
IkReal x614=((1.0)*cj15);
IkReal x615=(cj16*cj17);
IkReal x616=((1.0)*cj16);
IkReal x617=(sj15*sj17);
IkReal x618=((0.001)*sj17);
IkReal x619=(cj17*sj16);
IkReal x620=(cj17*sj15);
IkReal x621=((0.001)*cj17);
IkReal x622=(sj13*x612);
IkReal x623=(cj13*x612);
IkReal x624=(sj13*x613);
IkReal x625=((1.0)*sj16*sj17);
IkReal x626=(cj15*cj16*sj17);
IkReal x627=(cj13*x613);
IkReal x628=((1.0)*x627);
evalcond[0]=(((r00*x619))+(((-1.0)*r01*x625))+(((-1.0)*x628))+x622+(((-1.0)*r02*x616)));
evalcond[1]=(((r20*x619))+(((-1.0)*r22*x616))+(((-1.0)*r21*x625))+(((-1.0)*x623))+(((-1.0)*x624)));
evalcond[2]=(((r00*x617))+(((-1.0)*r00*x614*x615))+((r01*x620))+((r01*x626))+x624+x623+(((-1.0)*r02*sj16*x614)));
evalcond[3]=(((r21*x626))+((r21*x620))+((r20*x617))+(((-1.0)*x628))+(((-1.0)*r20*x614*x615))+x622+(((-1.0)*r22*sj16*x614)));
evalcond[4]=(((r21*x621))+((r20*x618))+(((0.454)*cj13))+(((0.035)*x627))+(((-1.0)*pz))+(((-0.035)*x622))+(((-0.4195)*x623))+(((-0.4195)*x624)));
evalcond[5]=((-0.025)+((r00*x618))+(((0.4195)*x622))+(((-0.454)*sj13))+(((-1.0)*px))+((r01*x621))+(((-0.035)*x623))+(((-0.035)*x624))+(((-0.4195)*x627)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x629=((1.0)*r01);
IkReal x630=((1.0)*sj17);
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x630))+(((-1.0)*cj17*x629)))),IkReal((((r02*sj16))+(((-1.0)*cj16*sj17*x629))+((cj16*cj17*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
CheckValue<IkReal> x632=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r22))+((cj17*r20*sj16))+(((-1.0)*r21*sj16*x630)))),-1);
if(!x632.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x631.value)+(((1.5707963267949)*(x632.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x633=IKsin(j15);
IkReal x634=IKcos(j15);
IkReal x635=((1.0)*r00);
IkReal x636=((1.0)*cj17);
IkReal x637=(sj17*x634);
IkReal x638=(cj16*x633);
IkReal x639=((1.0)*sj16*x633);
evalcond[0]=(((cj16*r11*x637))+(((-1.0)*cj16*r10*x634*x636))+((cj17*r11*x633))+((r10*sj17*x633))+(((-1.0)*r12*sj16*x634)));
evalcond[1]=((((-1.0)*r21*x634*x636))+((r21*sj17*x638))+(((-1.0)*r20*x637))+(((-1.0)*r20*x636*x638))+(((-1.0)*r22*x639)));
evalcond[2]=((((-1.0)*r01*x634*x636))+(((-1.0)*r02*x639))+((r01*sj17*x638))+(((-1.0)*x635*x637))+(((-1.0)*cj17*x635*x638)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x639))+(((-1.0)*r11*x634*x636))+(((-1.0)*r10*x637))+(((-1.0)*r10*x636*x638))+((r11*sj17*x638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x640=((4.0)*pz);
IkReal x641=((12.0)*pz);
IkReal x642=(cj17*sj16);
IkReal x643=(r21*sj17);
IkReal x644=(cj15*cj16);
IkReal x645=(r20*sj17);
IkReal x646=(cj17*r21);
IkReal x647=((0.14)*sj15);
IkReal x648=(cj16*r22);
IkReal x649=(cj16*r02);
IkReal x650=((0.42)*sj15);
IkReal x651=(cj17*r20);
IkReal x652=((1.678)*x648);
IkReal x653=((0.004)*x646);
IkReal x654=((0.004)*x645);
IkReal x655=((5.034)*x648);
IkReal x656=((0.012)*x646);
IkReal x657=((0.012)*x645);
IkReal x658=(r01*sj16*sj17);
IkReal x659=(cj15*r22*sj16);
IkReal x660=((1.678)*sj16*x643);
IkReal x661=((1.678)*r20*x642);
IkReal x662=((0.42)*r00*x642);
IkReal x663=((5.034)*sj16*x643);
IkReal x664=((5.034)*r20*x642);
IkReal x665=(x646*x650);
IkReal x666=(x645*x650);
IkReal x667=((0.42)*x643*x644);
IkReal x668=(x641+x664);
IkReal x669=(x640+x661);
IkReal x670=((((0.42)*x649))+x668+(((0.42)*x658)));
IkReal x671=((-1.816)+x652+x653+x654+x660);
IkReal x672=(x668+(((0.42)*x659))+(((0.42)*x644*x651)));
IkReal x673=(x655+x656+x657+x663+x662);
IkReal x674=(x655+x656+x657+x663+x665+x667+x666);
j13eval[0]=((IKabs(((((-0.14)*x659))+(((-0.14)*x644*x651))+((x645*x647))+(((-1.0)*x669))+x671+(((0.14)*x643*x644))+((x646*x647)))))+(IKabs(((((-0.14)*x649))+(((-0.14)*x658))+(((-1.0)*x669))+x671+(((0.14)*r00*x642)))))+(IKabs(((-1.816)+x673+(((-1.0)*x670)))))+(IKabs(((1.816)+x673+(((-1.0)*x670)))))+(IKabs(((-1.816)+x674+(((-1.0)*x672)))))+(IKabs(((1.816)+x674+(((-1.0)*x672))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x675=(cj17*sj16);
IkReal x676=(r20*sj17);
IkReal x677=(cj16*r22);
IkReal x678=(cj17*r21);
IkReal x679=(cj16*r02);
IkReal x680=((5.034)*x677);
IkReal x681=((0.012)*x678);
IkReal x682=((0.012)*x676);
IkReal x683=((1.678)*x677);
IkReal x684=((0.004)*x678);
IkReal x685=((0.004)*x676);
IkReal x686=(r21*sj16*sj17);
IkReal x687=(r01*sj16*sj17);
IkReal x688=((0.42)*r00*x675);
IkReal x689=((5.034)*x686);
IkReal x690=((1.678)*x686);
IkReal x691=((0.14)*r00*x675);
IkReal x692=((((0.42)*x687))+(((12.0)*pz))+(((0.42)*x679))+(((5.034)*r20*x675)));
IkReal x693=((((1.678)*r20*x675))+(((4.0)*pz))+(((0.14)*x687))+(((0.14)*x679)));
IkReal x694=(x683+x685+x684+x690+x691);
IkReal x695=(x689+x688+x682+x681+x680);
op[0]=((-1.816)+x694+(((-1.0)*x693)));
op[1]=0;
op[2]=((-1.816)+x695+(((-1.0)*x692)));
op[3]=0;
op[4]=((1.816)+x695+(((-1.0)*x692)));
op[5]=0;
op[6]=((1.816)+x694+(((-1.0)*x693)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x696=(cj17*r20);
IkReal x697=((1.678)*sj16);
IkReal x698=(r20*sj17);
IkReal x699=(r21*sj17);
IkReal x700=((5.034)*sj16);
IkReal x701=(cj17*r21);
IkReal x702=(cj15*cj16);
IkReal x703=(cj16*r22);
IkReal x704=((0.14)*sj15);
IkReal x705=((0.42)*sj15);
IkReal x706=((1.678)*x703);
IkReal x707=((0.004)*x701);
IkReal x708=((0.004)*x698);
IkReal x709=((5.034)*x703);
IkReal x710=((0.012)*x701);
IkReal x711=((0.012)*x698);
IkReal x712=(cj15*r22*sj16);
IkReal x713=(x698*x704);
IkReal x714=(x697*x699);
IkReal x715=(x701*x704);
IkReal x716=(x701*x705);
IkReal x717=(x698*x705);
IkReal x718=(x699*x700);
IkReal x719=((0.14)*x699*x702);
IkReal x720=((0.42)*x699*x702);
IkReal x721=((((0.42)*x696*x702))+(((12.0)*pz))+((x696*x700))+(((0.42)*x712)));
IkReal x722=((((0.14)*x712))+(((4.0)*pz))+((x696*x697))+(((0.14)*x696*x702)));
IkReal x723=(x718+x711+x710+x717+x716+x709+x720);
IkReal x724=(x719+x713+x715+x714+x708+x706+x707);
j13evalpoly[0]=((1.816)+(((-1.0)*x722))+(((htj13*htj13*htj13*htj13)*(((-1.816)+(((-1.0)*x721))+x723))))+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+(((-1.0)*x722))+x724))))+x724+(((htj13*htj13)*(((1.816)+(((-1.0)*x721))+x723)))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x725=(r21*sj17);
IkReal x726=(cj16*r02);
IkReal x727=((1.0)*cj13);
IkReal x728=(cj16*r22);
IkReal x729=(sj13*sj16);
IkReal x730=(r01*sj17);
IkReal x731=((1.0)*x729);
IkReal x732=(cj13*cj17*sj16);
if( IKabs(((((-1.0)*x727*x728))+(((-1.0)*cj17*r00*x731))+((x729*x730))+((r20*x732))+((sj13*x726))+(((-1.0)*sj16*x725*x727)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*x732))+(((-1.0)*x725*x731))+(((-1.0)*sj16*x727*x730))+(((-1.0)*x726*x727))+((cj17*r20*x729))+(((-1.0)*sj13*x728)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x727*x728))+(((-1.0)*cj17*r00*x731))+((x729*x730))+((r20*x732))+((sj13*x726))+(((-1.0)*sj16*x725*x727))))+IKsqr((((r00*x732))+(((-1.0)*x725*x731))+(((-1.0)*sj16*x727*x730))+(((-1.0)*x726*x727))+((cj17*r20*x729))+(((-1.0)*sj13*x728))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*x727*x728))+(((-1.0)*cj17*r00*x731))+((x729*x730))+((r20*x732))+((sj13*x726))+(((-1.0)*sj16*x725*x727))), (((r00*x732))+(((-1.0)*x725*x731))+(((-1.0)*sj16*x727*x730))+(((-1.0)*x726*x727))+((cj17*r20*x729))+(((-1.0)*sj13*x728))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x733=IKsin(j14);
IkReal x734=IKcos(j14);
IkReal x735=((1.0)*cj15);
IkReal x736=(cj16*cj17);
IkReal x737=((1.0)*cj16);
IkReal x738=(sj15*sj17);
IkReal x739=((0.001)*sj17);
IkReal x740=(cj17*sj16);
IkReal x741=(cj17*sj15);
IkReal x742=((0.001)*cj17);
IkReal x743=(sj13*x733);
IkReal x744=(cj13*x733);
IkReal x745=(sj13*x734);
IkReal x746=((1.0)*sj16*sj17);
IkReal x747=(cj15*cj16*sj17);
IkReal x748=(cj13*x734);
IkReal x749=((1.0)*x748);
evalcond[0]=((((-1.0)*r02*x737))+((r00*x740))+(((-1.0)*r01*x746))+x743+(((-1.0)*x749)));
evalcond[1]=((((-1.0)*r21*x746))+((r20*x740))+(((-1.0)*x744))+(((-1.0)*x745))+(((-1.0)*r22*x737)));
evalcond[2]=((((-1.0)*r00*x735*x736))+((r00*x738))+(((-1.0)*r02*sj16*x735))+((r01*x741))+((r01*x747))+x744+x745);
evalcond[3]=((((-1.0)*r22*sj16*x735))+((r20*x738))+((r21*x741))+((r21*x747))+x743+(((-1.0)*r20*x735*x736))+(((-1.0)*x749)));
evalcond[4]=((((0.454)*cj13))+(((0.035)*x748))+((r20*x739))+(((-1.0)*pz))+((r21*x742))+(((-0.035)*x743))+(((-0.4195)*x745))+(((-0.4195)*x744)));
evalcond[5]=((-0.025)+(((-0.454)*sj13))+((r00*x739))+(((-1.0)*px))+(((-0.035)*x745))+(((-0.035)*x744))+((r01*x742))+(((-0.4195)*x748))+(((0.4195)*x743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x750=((1.0)*cj17);
IkReal x751=((1.0)*sj17);
CheckValue<IkReal> x752=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj16*x750))+((r01*sj16*sj17))+((cj16*r02)))),-1);
if(!x752.valid){
continue;
}
CheckValue<IkReal> x753 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x750))+(((-1.0)*r20*x751)))),IkReal((((cj16*cj17*r20))+(((-1.0)*cj16*r21*x751))+((r22*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x753.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x752.value)))+(x753.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x754=IKsin(j15);
IkReal x755=IKcos(j15);
IkReal x756=((1.0)*r00);
IkReal x757=((1.0)*cj17);
IkReal x758=(sj17*x755);
IkReal x759=(cj16*x754);
IkReal x760=((1.0)*sj16*x754);
evalcond[0]=(((cj17*r11*x754))+((r10*sj17*x754))+(((-1.0)*cj16*r10*x755*x757))+((cj16*r11*x758))+(((-1.0)*r12*sj16*x755)));
evalcond[1]=((((-1.0)*r20*x758))+(((-1.0)*r20*x757*x759))+((r21*sj17*x759))+(((-1.0)*r22*x760))+(((-1.0)*r21*x755*x757)));
evalcond[2]=((((-1.0)*r01*x755*x757))+((r01*sj17*x759))+(((-1.0)*x756*x758))+(((-1.0)*r02*x760))+(((-1.0)*cj17*x756*x759)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x757*x759))+(((-1.0)*r10*x758))+((r11*sj17*x759))+(((-1.0)*r12*x760))+(((-1.0)*r11*x755*x757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x761=((4.0)*pz);
IkReal x762=((12.0)*pz);
IkReal x763=(cj17*sj16);
IkReal x764=(r21*sj17);
IkReal x765=(cj15*cj16);
IkReal x766=(r20*sj17);
IkReal x767=(cj17*r21);
IkReal x768=((0.14)*sj15);
IkReal x769=(cj16*r22);
IkReal x770=(cj16*r02);
IkReal x771=((0.42)*sj15);
IkReal x772=(cj17*r20);
IkReal x773=((1.678)*x769);
IkReal x774=((0.004)*x767);
IkReal x775=((0.004)*x766);
IkReal x776=((5.034)*x769);
IkReal x777=((0.012)*x767);
IkReal x778=((0.012)*x766);
IkReal x779=(r01*sj16*sj17);
IkReal x780=(cj15*r22*sj16);
IkReal x781=((1.678)*sj16*x764);
IkReal x782=((1.678)*r20*x763);
IkReal x783=((0.42)*r00*x763);
IkReal x784=((5.034)*sj16*x764);
IkReal x785=((5.034)*r20*x763);
IkReal x786=(x767*x771);
IkReal x787=(x766*x771);
IkReal x788=((0.42)*x764*x765);
IkReal x789=(x762+x785);
IkReal x790=(x761+x782);
IkReal x791=((((0.42)*x779))+(((0.42)*x770))+x789);
IkReal x792=((-1.816)+x773+x775+x774+x781);
IkReal x793=((((0.42)*x780))+(((0.42)*x765*x772))+x789);
IkReal x794=(x777+x776+x778+x783+x784);
IkReal x795=(x777+x776+x778+x786+x787+x784+x788);
j13eval[0]=((IKabs(((((-0.14)*x780))+(((-1.0)*x790))+(((0.14)*x764*x765))+((x766*x768))+x792+((x767*x768))+(((-0.14)*x765*x772)))))+(IKabs(((-1.816)+(((-1.0)*x793))+x795)))+(IKabs(((((-1.0)*x790))+(((0.14)*r00*x763))+(((-0.14)*x779))+(((-0.14)*x770))+x792)))+(IKabs(((1.816)+(((-1.0)*x791))+x794)))+(IKabs(((-1.816)+(((-1.0)*x791))+x794)))+(IKabs(((1.816)+(((-1.0)*x793))+x795))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x796=(cj17*sj16);
IkReal x797=(r20*sj17);
IkReal x798=(cj16*r22);
IkReal x799=(cj17*r21);
IkReal x800=(cj16*r02);
IkReal x801=((5.034)*x798);
IkReal x802=((0.012)*x799);
IkReal x803=((0.012)*x797);
IkReal x804=((1.678)*x798);
IkReal x805=((0.004)*x799);
IkReal x806=((0.004)*x797);
IkReal x807=(r21*sj16*sj17);
IkReal x808=(r01*sj16*sj17);
IkReal x809=((0.42)*r00*x796);
IkReal x810=((5.034)*x807);
IkReal x811=((1.678)*x807);
IkReal x812=((0.14)*r00*x796);
IkReal x813=((((12.0)*pz))+(((0.42)*x800))+(((0.42)*x808))+(((5.034)*r20*x796)));
IkReal x814=((((4.0)*pz))+(((0.14)*x808))+(((0.14)*x800))+(((1.678)*r20*x796)));
IkReal x815=(x812+x811+x805+x804+x806);
IkReal x816=(x810+x809+x801+x803+x802);
op[0]=((-1.816)+(((-1.0)*x814))+x815);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x813))+x816);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x813))+x816);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x814))+x815);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x817=(cj17*r20);
IkReal x818=((1.678)*sj16);
IkReal x819=(r20*sj17);
IkReal x820=(r21*sj17);
IkReal x821=((5.034)*sj16);
IkReal x822=(cj17*r21);
IkReal x823=(cj15*cj16);
IkReal x824=(cj16*r22);
IkReal x825=((0.14)*sj15);
IkReal x826=((0.42)*sj15);
IkReal x827=((1.678)*x824);
IkReal x828=((0.004)*x822);
IkReal x829=((0.004)*x819);
IkReal x830=((5.034)*x824);
IkReal x831=((0.012)*x822);
IkReal x832=((0.012)*x819);
IkReal x833=(cj15*r22*sj16);
IkReal x834=(x819*x825);
IkReal x835=(x818*x820);
IkReal x836=(x822*x825);
IkReal x837=(x822*x826);
IkReal x838=(x819*x826);
IkReal x839=(x820*x821);
IkReal x840=((0.14)*x820*x823);
IkReal x841=((0.42)*x820*x823);
IkReal x842=((((12.0)*pz))+((x817*x821))+(((0.42)*x817*x823))+(((0.42)*x833)));
IkReal x843=((((4.0)*pz))+(((0.14)*x833))+((x817*x818))+(((0.14)*x817*x823)));
IkReal x844=(x837+x830+x831+x832+x838+x839+x841);
IkReal x845=(x829+x828+x827+x834+x835+x836+x840);
j13evalpoly[0]=((1.816)+(((htj13*htj13)*(((1.816)+(((-1.0)*x842))+x844))))+(((htj13*htj13*htj13*htj13)*(((-1.816)+(((-1.0)*x842))+x844))))+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+(((-1.0)*x843))+x845))))+(((-1.0)*x843))+x845);
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x846=(r21*sj17);
IkReal x847=(cj16*r02);
IkReal x848=((1.0)*cj13);
IkReal x849=(cj16*r22);
IkReal x850=(sj13*sj16);
IkReal x851=(r01*sj17);
IkReal x852=((1.0)*x850);
IkReal x853=(cj13*cj17*sj16);
if( IKabs((((x850*x851))+(((-1.0)*cj17*r00*x852))+(((-1.0)*sj16*x846*x848))+((sj13*x847))+(((-1.0)*x848*x849))+((r20*x853)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj16*x848*x851))+(((-1.0)*x847*x848))+((r00*x853))+(((-1.0)*sj13*x849))+(((-1.0)*x846*x852))+((cj17*r20*x850)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x850*x851))+(((-1.0)*cj17*r00*x852))+(((-1.0)*sj16*x846*x848))+((sj13*x847))+(((-1.0)*x848*x849))+((r20*x853))))+IKsqr(((((-1.0)*sj16*x848*x851))+(((-1.0)*x847*x848))+((r00*x853))+(((-1.0)*sj13*x849))+(((-1.0)*x846*x852))+((cj17*r20*x850))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((x850*x851))+(((-1.0)*cj17*r00*x852))+(((-1.0)*sj16*x846*x848))+((sj13*x847))+(((-1.0)*x848*x849))+((r20*x853))), ((((-1.0)*sj16*x848*x851))+(((-1.0)*x847*x848))+((r00*x853))+(((-1.0)*sj13*x849))+(((-1.0)*x846*x852))+((cj17*r20*x850))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x854=IKsin(j14);
IkReal x855=IKcos(j14);
IkReal x856=((1.0)*cj15);
IkReal x857=(cj16*cj17);
IkReal x858=((1.0)*cj16);
IkReal x859=(sj15*sj17);
IkReal x860=((0.001)*sj17);
IkReal x861=(cj17*sj16);
IkReal x862=(cj17*sj15);
IkReal x863=((0.001)*cj17);
IkReal x864=(sj13*x854);
IkReal x865=(cj13*x854);
IkReal x866=(sj13*x855);
IkReal x867=((1.0)*sj16*sj17);
IkReal x868=(cj15*cj16*sj17);
IkReal x869=(cj13*x855);
IkReal x870=((1.0)*x869);
evalcond[0]=(((r00*x861))+(((-1.0)*r01*x867))+(((-1.0)*r02*x858))+x864+(((-1.0)*x870)));
evalcond[1]=((((-1.0)*r22*x858))+(((-1.0)*x866))+(((-1.0)*x865))+(((-1.0)*r21*x867))+((r20*x861)));
evalcond[2]=(((r00*x859))+((r01*x862))+((r01*x868))+(((-1.0)*r02*sj16*x856))+(((-1.0)*r00*x856*x857))+x866+x865);
evalcond[3]=(((r21*x862))+((r21*x868))+x864+(((-1.0)*r20*x856*x857))+(((-1.0)*r22*sj16*x856))+((r20*x859))+(((-1.0)*x870)));
evalcond[4]=((((0.035)*x869))+(((-0.035)*x864))+(((0.454)*cj13))+((r21*x863))+(((-1.0)*pz))+(((-0.4195)*x865))+(((-0.4195)*x866))+((r20*x860)));
evalcond[5]=((-0.025)+((r00*x860))+((r01*x863))+(((-0.035)*x865))+(((-0.035)*x866))+(((-0.454)*sj13))+(((0.4195)*x864))+(((-1.0)*px))+(((-0.4195)*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x871=((1.0)*cj17);
IkReal x872=((1.0)*sj17);
IkReal x873=(((cj16*r22))+((r21*sj16*sj17))+(((-1.0)*r20*sj16*x871)));
j15eval[0]=x873;
j15eval[1]=((IKabs((((r12*sj16))+(((-1.0)*cj16*r11*x872))+((cj16*cj17*r10)))))+(IKabs(((((-1.0)*r11*x871))+(((-1.0)*r10*x872))))));
j15eval[2]=IKsign(x873);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x874=((1.0)*cj16);
IkReal x875=((1.0)*sj17);
IkReal x876=((((-1.0)*r12*x874))+(((-1.0)*r11*sj16*x875))+((cj17*r10*sj16)));
j15eval[0]=x876;
j15eval[1]=IKsign(x876);
j15eval[2]=((IKabs((((cj16*cj17*r20))+((r22*sj16))+(((-1.0)*r21*sj17*x874)))))+(IKabs(((((-1.0)*cj17*r21))+(((-1.0)*r20*x875))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x877=r01*r01;
IkReal x878=cj16*cj16;
IkReal x879=cj17*cj17;
IkReal x880=r00*r00;
IkReal x881=r02*r02;
IkReal x882=(r02*sj16);
IkReal x883=((1.0)*cj17);
IkReal x884=(cj16*r00);
IkReal x885=((2.0)*cj17);
IkReal x886=(r01*sj17);
IkReal x887=(x877*x878);
IkReal x888=(x879*x880);
IkReal x889=((((-1.0)*x878*x881))+(((-1.0)*x879*x887))+(((-1.0)*x888))+((x882*x884*x885))+((x878*x888))+((r00*x885*x886))+(((-1.0)*r00*x878*x885*x886))+x887+x881+x880+(((-2.0)*cj16*x882*x886))+((x877*x879)));
j15eval[0]=x889;
j15eval[1]=((IKabs(((((-1.0)*x883*x884))+((cj16*x886))+(((-1.0)*x882)))))+(IKabs(((((-1.0)*r00*sj17))+(((-1.0)*r01*x883))))));
j15eval[2]=IKsign(x889);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13, j14, j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x890=r01*r01;
IkReal x891=cj16*cj16;
IkReal x892=cj17*cj17;
IkReal x893=r00*r00;
IkReal x894=r02*r02;
IkReal x895=(r02*sj16);
IkReal x896=((1.0)*cj17);
IkReal x897=(cj16*r00);
IkReal x898=((2.0)*cj17);
IkReal x899=(r01*sj17);
IkReal x900=(x890*x891);
IkReal x901=(x892*x893);
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(((((-1.0)*x896*x897))+((cj16*x899))+(((-1.0)*x895)))),IkReal(((((-1.0)*r00*sj17))+(((-1.0)*r01*x896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x891*x898*x899))+(((-1.0)*x892*x900))+((x891*x901))+(((-2.0)*cj16*x895*x899))+((x895*x897*x898))+(((-1.0)*x891*x894))+(((-1.0)*x901))+((r00*x898*x899))+((x890*x892))+x894+x893+x900)),-1);
if(!x903.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x902.value)+(((1.5707963267949)*(x903.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x904=IKsin(j15);
IkReal x905=IKcos(j15);
IkReal x906=(r00*sj17);
IkReal x907=(r02*sj16);
IkReal x908=(cj16*sj17);
IkReal x909=(cj17*r01);
IkReal x910=(cj16*cj17);
IkReal x911=((1.0)*x905);
IkReal x912=(r00*x910);
IkReal x913=((1.0)*x904);
evalcond[0]=(((r01*x905*x908))+(((-1.0)*x907*x911))+(((-1.0)*x911*x912))+((x904*x906))+((x904*x909)));
evalcond[1]=((((-1.0)*r20*x910*x913))+((r21*x904*x908))+(((-1.0)*cj17*r21*x911))+(((-1.0)*r20*sj17*x911))+(((-1.0)*r22*sj16*x913)));
evalcond[2]=((((-1.0)*r12*sj16*x913))+(((-1.0)*r10*sj17*x911))+(((-1.0)*cj17*r11*x911))+((r11*x904*x908))+(((-1.0)*r10*x910*x913)));
evalcond[3]=((-1.0)+(((-1.0)*x906*x911))+(((-1.0)*x912*x913))+((r01*x904*x908))+(((-1.0)*x907*x913))+(((-1.0)*x909*x911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x914=((5.034)*py);
IkReal x915=((0.42)*pz);
IkReal x916=((12.0)*pz);
IkReal x917=(cj17*sj16);
IkReal x918=(sj16*sj17);
IkReal x919=(r20*sj17);
IkReal x920=(cj16*r12);
IkReal x921=(cj17*r21);
IkReal x922=(r10*sj17);
IkReal x923=(cj16*r22);
IkReal x924=(cj17*r11);
IkReal x925=((2.126463)*r10*x917);
IkReal x926=((5.034)*r20*x917);
IkReal x927=((0.42)*r10*x917);
IkReal x928=(x925+x915+x914);
IkReal x929=(x926+x927+x916);
IkReal x930=((((0.00042)*x921))+(((2.126463)*r11*x918))+(((0.005034)*x922))+(((0.005034)*x924))+(((0.00042)*x919))+(((2.126463)*x920)));
IkReal x931=((((5.034)*r21*x918))+(((0.42)*x920))+(((0.012)*x919))+(((5.034)*x923))+(((0.012)*x921))+(((0.42)*r11*x918)));
j13eval[0]=((6.094496)+(IKabs(((-1.816)+x929+(((-1.0)*x931)))))+(IKabs(((-0.06229)+x928+(((-1.0)*x930)))))+(IKabs(((-0.18941)+x928+(((-1.0)*x930)))))+(IKabs(((0.02161)+(((-0.708821)*x920))+(((0.708821)*r10*x917))+(((-0.00014)*x921))+(((-0.708821)*r11*x918))+(((-0.001678)*x922))+(((-0.001678)*x924))+(((0.14)*pz))+(((-0.00014)*x919))+(((1.678)*py)))))+(IKabs(((1.816)+(((-1.678)*x923))+(((-1.678)*r21*x918))+(((4.0)*pz))+(((1.678)*r20*x917))+(((-0.004)*x921))+(((-0.14)*x920))+(((-0.004)*x919))+(((0.14)*r10*x917))+(((-0.14)*r11*x918)))))+(IKabs(((1.816)+x929+(((-1.0)*x931))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x932=((12.0)*pz);
IkReal x933=((4.0)*pz);
IkReal x934=(cj17*sj16);
IkReal x935=(sj16*sj17);
IkReal x936=(r20*sj17);
IkReal x937=(cj16*r22);
IkReal x938=(cj17*r21);
IkReal x939=(cj16*r12);
IkReal x940=((5.034)*r20*x934);
IkReal x941=((0.42)*r10*x934);
IkReal x942=((1.678)*r20*x934);
IkReal x943=((0.14)*r10*x934);
IkReal x944=(x932+x940+x941);
IkReal x945=(x933+x942+x943);
IkReal x946=((((0.42)*x939))+(((5.034)*r21*x935))+(((5.034)*x937))+(((0.42)*r11*x935))+(((0.012)*x936))+(((0.012)*x938)));
IkReal x947=((((1.678)*x937))+(((0.14)*r11*x935))+(((0.14)*x939))+(((0.004)*x936))+(((0.004)*x938))+(((1.678)*r21*x935)));
op[0]=((1.816)+(((-1.0)*x947))+x945);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x946))+x944);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x946))+x944);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x947))+x945);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x948=((5.034)*py);
IkReal x949=((0.42)*pz);
IkReal x950=((0.14)*pz);
IkReal x951=((1.678)*py);
IkReal x952=(cj16*r12);
IkReal x953=(cj17*r21);
IkReal x954=(r10*sj17);
IkReal x955=(cj17*r11);
IkReal x956=(r20*sj17);
IkReal x957=((0.001678)*x955);
IkReal x958=((0.708821)*x952);
IkReal x959=((0.00014)*x953);
IkReal x960=((0.00014)*x956);
IkReal x961=((0.001678)*x954);
IkReal x962=(cj17*r10*sj16);
IkReal x963=(r11*sj16*sj17);
IkReal x964=((2.126463)*x962);
IkReal x965=((0.708821)*x962);
IkReal x966=((0.708821)*x963);
IkReal x967=(x965+x951+x950);
IkReal x968=(x964+x948+x949);
IkReal x969=((((0.00042)*x953))+(((0.00042)*x956))+(((2.126463)*x963))+(((2.126463)*x952))+(((0.005034)*x955))+(((0.005034)*x954)));
IkReal x970=(x960+x961+x966+x959+x958+x957);
j13evalpoly[0]=((-0.10551)+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+x967+(((-1.0)*x970))))))+(((htj13*htj13*htj13*htj13)*(((-0.06229)+x968+(((-1.0)*x969))))))+(((htj13*htj13)*(((-0.18941)+x968+(((-1.0)*x969))))))+(((-1.523624)*htj13))+(((-3.047248)*(htj13*htj13*htj13)))+x967+(((-1.0)*x970)));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x971=(sj16*sj17);
IkReal x972=((1.0)*sj13);
IkReal x973=((1.0)*cj13);
IkReal x974=(cj16*r22);
IkReal x975=(cj16*r12);
IkReal x976=(cj17*r20*sj16);
IkReal x977=(cj17*r10*sj16);
if( IKabs(((((-1.0)*r21*x971*x973))+(((-1.0)*r11*x971*x972))+((cj13*x976))+((sj13*x977))+(((-1.0)*x972*x975))+(((-1.0)*x973*x974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x971*x972))+((cj13*x975))+((sj13*x976))+((cj13*r11*x971))+(((-1.0)*x972*x974))+(((-1.0)*x973*x977)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x971*x973))+(((-1.0)*r11*x971*x972))+((cj13*x976))+((sj13*x977))+(((-1.0)*x972*x975))+(((-1.0)*x973*x974))))+IKsqr(((((-1.0)*r21*x971*x972))+((cj13*x975))+((sj13*x976))+((cj13*r11*x971))+(((-1.0)*x972*x974))+(((-1.0)*x973*x977))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*r21*x971*x973))+(((-1.0)*r11*x971*x972))+((cj13*x976))+((sj13*x977))+(((-1.0)*x972*x975))+(((-1.0)*x973*x974))), ((((-1.0)*r21*x971*x972))+((cj13*x975))+((sj13*x976))+((cj13*r11*x971))+(((-1.0)*x972*x974))+(((-1.0)*x973*x977))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x978=IKsin(j14);
IkReal x979=IKcos(j14);
IkReal x980=(cj17*r11);
IkReal x981=(cj17*r10);
IkReal x982=((1.0)*cj15);
IkReal x983=(r10*sj17);
IkReal x984=(r20*sj17);
IkReal x985=(r21*sj17);
IkReal x986=((1.0)*sj16);
IkReal x987=(cj17*r20);
IkReal x988=(cj17*r21);
IkReal x989=(cj15*cj16);
IkReal x990=(r11*sj17);
IkReal x991=((1.0)*cj16);
IkReal x992=(sj13*x978);
IkReal x993=(cj13*x978);
IkReal x994=(sj13*x979);
IkReal x995=(cj13*x979);
IkReal x996=((1.0)*x993);
IkReal x997=((1.0)*x994);
IkReal x998=(x997+x996);
evalcond[0]=((((-1.0)*x992))+((sj16*x981))+(((-1.0)*r12*x991))+x995+(((-1.0)*x986*x990)));
evalcond[1]=((((-1.0)*r22*x991))+((sj16*x987))+(((-1.0)*x998))+(((-1.0)*x985*x986)));
evalcond[2]=((((-1.0)*x995))+(((-1.0)*r22*sj16*x982))+(((-1.0)*cj16*x982*x987))+((x985*x989))+x992+((sj15*x988))+((sj15*x984)));
evalcond[3]=(((x989*x990))+(((-1.0)*cj16*x981*x982))+(((-1.0)*x998))+((sj15*x980))+((sj15*x983))+(((-1.0)*r12*sj16*x982)));
evalcond[4]=((((-0.035)*x992))+(((0.454)*cj13))+(((-1.0)*pz))+(((-0.4195)*x993))+(((-0.4195)*x994))+(((0.001)*x988))+(((0.001)*x984))+(((0.035)*x995)));
evalcond[5]=((0.025)+(((-1.0)*py))+(((0.4195)*x995))+(((-0.4195)*x992))+(((0.001)*x980))+(((0.001)*x983))+(((0.035)*x993))+(((0.035)*x994))+(((0.454)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x999=((1.0)*cj16);
IkReal x1000=((1.0)*sj17);
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*x999))+((cj17*r10*sj16))+(((-1.0)*r11*sj16*x1000)))),-1);
if(!x1001.valid){
continue;
}
CheckValue<IkReal> x1002 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*r21))+(((-1.0)*r20*x1000)))),IkReal((((cj16*cj17*r20))+(((-1.0)*r21*sj17*x999))+((r22*sj16)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1002.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1001.value)))+(x1002.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1003=IKsin(j15);
IkReal x1004=IKcos(j15);
IkReal x1005=(r00*sj17);
IkReal x1006=(r02*sj16);
IkReal x1007=(cj16*sj17);
IkReal x1008=(cj17*r01);
IkReal x1009=(cj16*cj17);
IkReal x1010=((1.0)*x1004);
IkReal x1011=(r00*x1009);
IkReal x1012=((1.0)*x1003);
evalcond[0]=((((-1.0)*x1010*x1011))+(((-1.0)*x1006*x1010))+((r01*x1004*x1007))+((x1003*x1005))+((x1003*x1008)));
evalcond[1]=((((-1.0)*cj17*r21*x1010))+(((-1.0)*r22*sj16*x1012))+(((-1.0)*r20*sj17*x1010))+(((-1.0)*r20*x1009*x1012))+((r21*x1003*x1007)));
evalcond[2]=((((-1.0)*r10*x1009*x1012))+((r11*x1003*x1007))+(((-1.0)*r10*sj17*x1010))+(((-1.0)*r12*sj16*x1012))+(((-1.0)*cj17*r11*x1010)));
evalcond[3]=((-1.0)+(((-1.0)*x1011*x1012))+((r01*x1003*x1007))+(((-1.0)*x1005*x1010))+(((-1.0)*x1006*x1012))+(((-1.0)*x1008*x1010)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1013=((5.034)*py);
IkReal x1014=((0.42)*pz);
IkReal x1015=((12.0)*pz);
IkReal x1016=(cj17*sj16);
IkReal x1017=(sj16*sj17);
IkReal x1018=(r20*sj17);
IkReal x1019=(cj16*r12);
IkReal x1020=(cj17*r21);
IkReal x1021=(r10*sj17);
IkReal x1022=(cj16*r22);
IkReal x1023=(cj17*r11);
IkReal x1024=((2.126463)*r10*x1016);
IkReal x1025=((5.034)*r20*x1016);
IkReal x1026=((0.42)*r10*x1016);
IkReal x1027=(x1014+x1013+x1024);
IkReal x1028=(x1015+x1025+x1026);
IkReal x1029=((((2.126463)*x1019))+(((2.126463)*r11*x1017))+(((0.00042)*x1020))+(((0.005034)*x1021))+(((0.005034)*x1023))+(((0.00042)*x1018)));
IkReal x1030=((((0.012)*x1018))+(((5.034)*r21*x1017))+(((0.42)*x1019))+(((5.034)*x1022))+(((0.42)*r11*x1017))+(((0.012)*x1020)));
j13eval[0]=((6.094496)+(IKabs(((-0.18941)+x1027+(((-1.0)*x1029)))))+(IKabs(((1.816)+(((-1.0)*x1030))+x1028)))+(IKabs(((-1.816)+(((-1.0)*x1030))+x1028)))+(IKabs(((-0.06229)+x1027+(((-1.0)*x1029)))))+(IKabs(((1.816)+(((-0.14)*x1019))+(((4.0)*pz))+(((-0.004)*x1020))+(((1.678)*r20*x1016))+(((-1.678)*r21*x1017))+(((-1.678)*x1022))+(((0.14)*r10*x1016))+(((-0.004)*x1018))+(((-0.14)*r11*x1017)))))+(IKabs(((0.02161)+(((0.14)*pz))+(((-0.708821)*r11*x1017))+(((0.708821)*r10*x1016))+(((-0.00014)*x1018))+(((1.678)*py))+(((-0.00014)*x1020))+(((-0.001678)*x1021))+(((-0.001678)*x1023))+(((-0.708821)*x1019))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1031=((12.0)*pz);
IkReal x1032=((4.0)*pz);
IkReal x1033=(cj17*sj16);
IkReal x1034=(sj16*sj17);
IkReal x1035=(r20*sj17);
IkReal x1036=(cj16*r22);
IkReal x1037=(cj17*r21);
IkReal x1038=(cj16*r12);
IkReal x1039=((5.034)*r20*x1033);
IkReal x1040=((0.42)*r10*x1033);
IkReal x1041=((1.678)*r20*x1033);
IkReal x1042=((0.14)*r10*x1033);
IkReal x1043=(x1040+x1039+x1031);
IkReal x1044=(x1042+x1041+x1032);
IkReal x1045=((((0.012)*x1035))+(((0.012)*x1037))+(((5.034)*r21*x1034))+(((0.42)*x1038))+(((0.42)*r11*x1034))+(((5.034)*x1036)));
IkReal x1046=((((0.004)*x1037))+(((0.004)*x1035))+(((0.14)*x1038))+(((1.678)*r21*x1034))+(((1.678)*x1036))+(((0.14)*r11*x1034)));
op[0]=((1.816)+x1044+(((-1.0)*x1046)));
op[1]=0;
op[2]=((1.816)+x1043+(((-1.0)*x1045)));
op[3]=0;
op[4]=((-1.816)+x1043+(((-1.0)*x1045)));
op[5]=0;
op[6]=((-1.816)+x1044+(((-1.0)*x1046)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1047=((5.034)*py);
IkReal x1048=((0.42)*pz);
IkReal x1049=((0.14)*pz);
IkReal x1050=((1.678)*py);
IkReal x1051=(cj16*r12);
IkReal x1052=(cj17*r21);
IkReal x1053=(r10*sj17);
IkReal x1054=(cj17*r11);
IkReal x1055=(r20*sj17);
IkReal x1056=((0.001678)*x1054);
IkReal x1057=((0.708821)*x1051);
IkReal x1058=((0.00014)*x1052);
IkReal x1059=((0.00014)*x1055);
IkReal x1060=((0.001678)*x1053);
IkReal x1061=(cj17*r10*sj16);
IkReal x1062=(r11*sj16*sj17);
IkReal x1063=((2.126463)*x1061);
IkReal x1064=((0.708821)*x1061);
IkReal x1065=((0.708821)*x1062);
IkReal x1066=(x1050+x1049+x1064);
IkReal x1067=(x1047+x1048+x1063);
IkReal x1068=((((2.126463)*x1051))+(((0.00042)*x1055))+(((0.00042)*x1052))+(((0.005034)*x1053))+(((0.005034)*x1054))+(((2.126463)*x1062)));
IkReal x1069=(x1056+x1057+x1058+x1059+x1060+x1065);
j13evalpoly[0]=((-0.10551)+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+x1066+(((-1.0)*x1069))))))+x1066+(((htj13*htj13)*(((-0.18941)+x1067+(((-1.0)*x1068))))))+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+(((-1.523624)*htj13))+(((htj13*htj13*htj13*htj13)*(((-0.06229)+x1067+(((-1.0)*x1068))))))+(((-1.0)*x1069))+(((-3.047248)*(htj13*htj13*htj13))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1070=(sj16*sj17);
IkReal x1071=((1.0)*sj13);
IkReal x1072=((1.0)*cj13);
IkReal x1073=(cj16*r22);
IkReal x1074=(cj16*r12);
IkReal x1075=(cj17*r20*sj16);
IkReal x1076=(cj17*r10*sj16);
if( IKabs(((((-1.0)*r21*x1070*x1072))+(((-1.0)*x1071*x1074))+((sj13*x1076))+(((-1.0)*x1072*x1073))+(((-1.0)*r11*x1070*x1071))+((cj13*x1075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x1070*x1071))+(((-1.0)*x1071*x1073))+((sj13*x1075))+((cj13*r11*x1070))+(((-1.0)*x1072*x1076))+((cj13*x1074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1070*x1072))+(((-1.0)*x1071*x1074))+((sj13*x1076))+(((-1.0)*x1072*x1073))+(((-1.0)*r11*x1070*x1071))+((cj13*x1075))))+IKsqr(((((-1.0)*r21*x1070*x1071))+(((-1.0)*x1071*x1073))+((sj13*x1075))+((cj13*r11*x1070))+(((-1.0)*x1072*x1076))+((cj13*x1074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*r21*x1070*x1072))+(((-1.0)*x1071*x1074))+((sj13*x1076))+(((-1.0)*x1072*x1073))+(((-1.0)*r11*x1070*x1071))+((cj13*x1075))), ((((-1.0)*r21*x1070*x1071))+(((-1.0)*x1071*x1073))+((sj13*x1075))+((cj13*r11*x1070))+(((-1.0)*x1072*x1076))+((cj13*x1074))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1077=IKsin(j14);
IkReal x1078=IKcos(j14);
IkReal x1079=(cj17*r11);
IkReal x1080=(cj17*r10);
IkReal x1081=((1.0)*cj15);
IkReal x1082=(r10*sj17);
IkReal x1083=(r20*sj17);
IkReal x1084=(r21*sj17);
IkReal x1085=((1.0)*sj16);
IkReal x1086=(cj17*r20);
IkReal x1087=(cj17*r21);
IkReal x1088=(cj15*cj16);
IkReal x1089=(r11*sj17);
IkReal x1090=((1.0)*cj16);
IkReal x1091=(sj13*x1077);
IkReal x1092=(cj13*x1077);
IkReal x1093=(sj13*x1078);
IkReal x1094=(cj13*x1078);
IkReal x1095=((1.0)*x1092);
IkReal x1096=((1.0)*x1093);
IkReal x1097=(x1095+x1096);
evalcond[0]=(((sj16*x1080))+x1094+(((-1.0)*x1091))+(((-1.0)*r12*x1090))+(((-1.0)*x1085*x1089)));
evalcond[1]=(((sj16*x1086))+(((-1.0)*x1097))+(((-1.0)*x1084*x1085))+(((-1.0)*r22*x1090)));
evalcond[2]=(x1091+(((-1.0)*x1094))+(((-1.0)*cj16*x1081*x1086))+((sj15*x1087))+((sj15*x1083))+((x1084*x1088))+(((-1.0)*r22*sj16*x1081)));
evalcond[3]=(((sj15*x1079))+(((-1.0)*x1097))+(((-1.0)*cj16*x1080*x1081))+(((-1.0)*r12*sj16*x1081))+((sj15*x1082))+((x1088*x1089)));
evalcond[4]=((((0.001)*x1087))+(((0.001)*x1083))+(((-0.4195)*x1093))+(((-0.4195)*x1092))+(((0.454)*cj13))+(((0.035)*x1094))+(((-0.035)*x1091))+(((-1.0)*pz)));
evalcond[5]=((0.025)+(((0.001)*x1079))+(((0.001)*x1082))+(((-0.4195)*x1091))+(((0.035)*x1092))+(((0.035)*x1093))+(((-1.0)*py))+(((0.4195)*x1094))+(((0.454)*sj13)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1098=((1.0)*cj17);
IkReal x1099=((1.0)*sj17);
CheckValue<IkReal> x1100 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x1098))+(((-1.0)*r10*x1099)))),IkReal((((r12*sj16))+((cj16*cj17*r10))+(((-1.0)*cj16*r11*x1099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1100.valid){
continue;
}
CheckValue<IkReal> x1101=IKPowWithIntegerCheck(IKsign((((cj16*r22))+((r21*sj16*sj17))+(((-1.0)*r20*sj16*x1098)))),-1);
if(!x1101.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x1100.value)+(((1.5707963267949)*(x1101.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1102=IKsin(j15);
IkReal x1103=IKcos(j15);
IkReal x1104=(r00*sj17);
IkReal x1105=(r02*sj16);
IkReal x1106=(cj16*sj17);
IkReal x1107=(cj17*r01);
IkReal x1108=(cj16*cj17);
IkReal x1109=((1.0)*x1103);
IkReal x1110=(r00*x1108);
IkReal x1111=((1.0)*x1102);
evalcond[0]=(((x1102*x1104))+((x1102*x1107))+(((-1.0)*x1109*x1110))+((r01*x1103*x1106))+(((-1.0)*x1105*x1109)));
evalcond[1]=((((-1.0)*r20*sj17*x1109))+(((-1.0)*cj17*r21*x1109))+((r21*x1102*x1106))+(((-1.0)*r22*sj16*x1111))+(((-1.0)*r20*x1108*x1111)));
evalcond[2]=((((-1.0)*r10*sj17*x1109))+((r11*x1102*x1106))+(((-1.0)*r10*x1108*x1111))+(((-1.0)*r12*sj16*x1111))+(((-1.0)*cj17*r11*x1109)));
evalcond[3]=((-1.0)+((r01*x1102*x1106))+(((-1.0)*x1107*x1109))+(((-1.0)*x1104*x1109))+(((-1.0)*x1110*x1111))+(((-1.0)*x1105*x1111)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1112=((5.034)*py);
IkReal x1113=((0.42)*pz);
IkReal x1114=((12.0)*pz);
IkReal x1115=(cj17*sj16);
IkReal x1116=(sj16*sj17);
IkReal x1117=(r20*sj17);
IkReal x1118=(cj16*r12);
IkReal x1119=(cj17*r21);
IkReal x1120=(r10*sj17);
IkReal x1121=(cj16*r22);
IkReal x1122=(cj17*r11);
IkReal x1123=((2.126463)*r10*x1115);
IkReal x1124=((5.034)*r20*x1115);
IkReal x1125=((0.42)*r10*x1115);
IkReal x1126=(x1113+x1112+x1123);
IkReal x1127=(x1114+x1124+x1125);
IkReal x1128=((((0.00042)*x1119))+(((0.00042)*x1117))+(((2.126463)*x1118))+(((2.126463)*r11*x1116))+(((0.005034)*x1120))+(((0.005034)*x1122)));
IkReal x1129=((((0.012)*x1119))+(((0.012)*x1117))+(((0.42)*x1118))+(((5.034)*r21*x1116))+(((0.42)*r11*x1116))+(((5.034)*x1121)));
j13eval[0]=((6.094496)+(IKabs(((-0.06229)+x1126+(((-1.0)*x1128)))))+(IKabs(((1.816)+(((-0.14)*x1118))+(((4.0)*pz))+(((1.678)*r20*x1115))+(((-0.14)*r11*x1116))+(((-1.678)*r21*x1116))+(((0.14)*r10*x1115))+(((-1.678)*x1121))+(((-0.004)*x1117))+(((-0.004)*x1119)))))+(IKabs(((1.816)+x1127+(((-1.0)*x1129)))))+(IKabs(((-1.816)+x1127+(((-1.0)*x1129)))))+(IKabs(((-0.18941)+x1126+(((-1.0)*x1128)))))+(IKabs(((0.02161)+(((-0.708821)*x1118))+(((-0.00014)*x1117))+(((-0.00014)*x1119))+(((0.14)*pz))+(((-0.708821)*r11*x1116))+(((0.708821)*r10*x1115))+(((-0.001678)*x1120))+(((-0.001678)*x1122))+(((1.678)*py))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1130=((12.0)*pz);
IkReal x1131=((4.0)*pz);
IkReal x1132=(cj17*sj16);
IkReal x1133=(sj16*sj17);
IkReal x1134=(r20*sj17);
IkReal x1135=(cj16*r22);
IkReal x1136=(cj17*r21);
IkReal x1137=(cj16*r12);
IkReal x1138=((5.034)*r20*x1132);
IkReal x1139=((0.42)*r10*x1132);
IkReal x1140=((1.678)*r20*x1132);
IkReal x1141=((0.14)*r10*x1132);
IkReal x1142=(x1139+x1138+x1130);
IkReal x1143=(x1140+x1141+x1131);
IkReal x1144=((((5.034)*r21*x1133))+(((5.034)*x1135))+(((0.012)*x1134))+(((0.012)*x1136))+(((0.42)*x1137))+(((0.42)*r11*x1133)));
IkReal x1145=((((1.678)*x1135))+(((1.678)*r21*x1133))+(((0.14)*r11*x1133))+(((0.14)*x1137))+(((0.004)*x1136))+(((0.004)*x1134)));
op[0]=((1.816)+x1143+(((-1.0)*x1145)));
op[1]=0;
op[2]=((1.816)+x1142+(((-1.0)*x1144)));
op[3]=0;
op[4]=((-1.816)+x1142+(((-1.0)*x1144)));
op[5]=0;
op[6]=((-1.816)+x1143+(((-1.0)*x1145)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1146=((5.034)*py);
IkReal x1147=((0.42)*pz);
IkReal x1148=((0.14)*pz);
IkReal x1149=((1.678)*py);
IkReal x1150=(cj16*r12);
IkReal x1151=(cj17*r21);
IkReal x1152=(r10*sj17);
IkReal x1153=(cj17*r11);
IkReal x1154=(r20*sj17);
IkReal x1155=((0.001678)*x1153);
IkReal x1156=((0.708821)*x1150);
IkReal x1157=((0.00014)*x1151);
IkReal x1158=((0.00014)*x1154);
IkReal x1159=((0.001678)*x1152);
IkReal x1160=(cj17*r10*sj16);
IkReal x1161=(r11*sj16*sj17);
IkReal x1162=((2.126463)*x1160);
IkReal x1163=((0.708821)*x1160);
IkReal x1164=((0.708821)*x1161);
IkReal x1165=(x1148+x1149+x1163);
IkReal x1166=(x1146+x1147+x1162);
IkReal x1167=((((2.126463)*x1150))+(((0.005034)*x1153))+(((0.005034)*x1152))+(((2.126463)*x1161))+(((0.00042)*x1151))+(((0.00042)*x1154)));
IkReal x1168=(x1159+x1158+x1155+x1157+x1156+x1164);
j13evalpoly[0]=((-0.10551)+x1165+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((0.02161)+x1165+(((-1.0)*x1168))))))+(((-1.523624)*(htj13*htj13*htj13*htj13*htj13)))+(((htj13*htj13*htj13*htj13)*(((-0.06229)+x1166+(((-1.0)*x1167))))))+(((-1.523624)*htj13))+(((htj13*htj13)*(((-0.18941)+x1166+(((-1.0)*x1167))))))+(((-3.047248)*(htj13*htj13*htj13)))+(((-1.0)*x1168)));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1169=(sj16*sj17);
IkReal x1170=((1.0)*sj13);
IkReal x1171=((1.0)*cj13);
IkReal x1172=(cj16*r22);
IkReal x1173=(cj16*r12);
IkReal x1174=(cj17*r20*sj16);
IkReal x1175=(cj17*r10*sj16);
if( IKabs((((cj13*x1174))+((sj13*x1175))+(((-1.0)*r11*x1169*x1170))+(((-1.0)*x1171*x1172))+(((-1.0)*x1170*x1173))+(((-1.0)*r21*x1169*x1171)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj13*x1173))+((sj13*x1174))+((cj13*r11*x1169))+(((-1.0)*x1171*x1175))+(((-1.0)*x1170*x1172))+(((-1.0)*r21*x1169*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj13*x1174))+((sj13*x1175))+(((-1.0)*r11*x1169*x1170))+(((-1.0)*x1171*x1172))+(((-1.0)*x1170*x1173))+(((-1.0)*r21*x1169*x1171))))+IKsqr((((cj13*x1173))+((sj13*x1174))+((cj13*r11*x1169))+(((-1.0)*x1171*x1175))+(((-1.0)*x1170*x1172))+(((-1.0)*r21*x1169*x1170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((cj13*x1174))+((sj13*x1175))+(((-1.0)*r11*x1169*x1170))+(((-1.0)*x1171*x1172))+(((-1.0)*x1170*x1173))+(((-1.0)*r21*x1169*x1171))), (((cj13*x1173))+((sj13*x1174))+((cj13*r11*x1169))+(((-1.0)*x1171*x1175))+(((-1.0)*x1170*x1172))+(((-1.0)*r21*x1169*x1170))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1176=IKsin(j14);
IkReal x1177=IKcos(j14);
IkReal x1178=(cj17*r11);
IkReal x1179=(cj17*r10);
IkReal x1180=((1.0)*cj15);
IkReal x1181=(r10*sj17);
IkReal x1182=(r20*sj17);
IkReal x1183=(r21*sj17);
IkReal x1184=((1.0)*sj16);
IkReal x1185=(cj17*r20);
IkReal x1186=(cj17*r21);
IkReal x1187=(cj15*cj16);
IkReal x1188=(r11*sj17);
IkReal x1189=((1.0)*cj16);
IkReal x1190=(sj13*x1176);
IkReal x1191=(cj13*x1176);
IkReal x1192=(sj13*x1177);
IkReal x1193=(cj13*x1177);
IkReal x1194=((1.0)*x1191);
IkReal x1195=((1.0)*x1192);
IkReal x1196=(x1195+x1194);
evalcond[0]=(x1193+((sj16*x1179))+(((-1.0)*x1184*x1188))+(((-1.0)*x1190))+(((-1.0)*r12*x1189)));
evalcond[1]=((((-1.0)*x1196))+((sj16*x1185))+(((-1.0)*r22*x1189))+(((-1.0)*x1183*x1184)));
evalcond[2]=(x1190+(((-1.0)*cj16*x1180*x1185))+((x1183*x1187))+((sj15*x1186))+((sj15*x1182))+(((-1.0)*r22*sj16*x1180))+(((-1.0)*x1193)));
evalcond[3]=(((x1187*x1188))+(((-1.0)*cj16*x1179*x1180))+((sj15*x1181))+(((-1.0)*x1196))+((sj15*x1178))+(((-1.0)*r12*sj16*x1180)));
evalcond[4]=((((0.454)*cj13))+(((0.001)*x1186))+(((0.001)*x1182))+(((-0.4195)*x1192))+(((-0.4195)*x1191))+(((-1.0)*pz))+(((-0.035)*x1190))+(((0.035)*x1193)));
evalcond[5]=((0.025)+(((0.001)*x1178))+(((0.001)*x1181))+(((-0.4195)*x1190))+(((-1.0)*py))+(((0.454)*sj13))+(((0.4195)*x1193))+(((0.035)*x1192))+(((0.035)*x1191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j15eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1197=((1.0)*cj17);
IkReal x1198=((1.0)*sj17);
IkReal x1199=((((-1.0)*r10*sj16*x1197))+((r11*sj16*sj17))+((cj16*r12)));
j15eval[0]=x1199;
j15eval[1]=IKsign(x1199);
j15eval[2]=((IKabs(((((-1.0)*r21*x1197))+(((-1.0)*r20*x1198)))))+(IKabs((((cj16*cj17*r20))+(((-1.0)*cj16*r21*x1198))+((r22*sj16))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1200=((1.0)*sj17);
IkReal x1201=((((-1.0)*cj16*r22))+(((-1.0)*r21*sj16*x1200))+((cj17*r20*sj16)));
j15eval[0]=x1201;
j15eval[1]=((IKabs(((((-1.0)*cj17*r11))+(((-1.0)*r10*x1200)))))+(IKabs((((r12*sj16))+(((-1.0)*cj16*r11*x1200))+((cj16*cj17*r10))))));
j15eval[2]=IKsign(x1201);
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
{
IkReal j15eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1202=cj16*cj16;
IkReal x1203=cj17*cj17;
IkReal x1204=r01*r01;
IkReal x1205=r00*r00;
IkReal x1206=r02*r02;
IkReal x1207=(cj17*r01);
IkReal x1208=(cj16*cj17*r00);
IkReal x1209=((2.0)*r02*sj16);
IkReal x1210=((1.0)*x1202);
IkReal x1211=((2.0)*r00*sj17);
IkReal x1212=(cj16*r01*sj17);
IkReal x1213=(x1203*x1205);
IkReal x1214=(x1203*x1204);
IkReal x1215=(((x1202*x1207*x1211))+(((-1.0)*x1204*x1210))+x1213+(((-1.0)*x1207*x1211))+((x1202*x1206))+(((-1.0)*x1210*x1213))+(((-1.0)*x1206))+(((-1.0)*x1205))+((x1209*x1212))+((x1202*x1214))+(((-1.0)*x1208*x1209))+(((-1.0)*x1214)));
j15eval[0]=x1215;
j15eval[1]=IKsign(x1215);
j15eval[2]=((IKabs((x1212+(((-1.0)*x1208))+(((-1.0)*r02*sj16)))))+(IKabs(((((-1.0)*x1207))+(((-1.0)*r00*sj17))))));
if( IKabs(j15eval[0]) < 0.0000010000000000  || IKabs(j15eval[1]) < 0.0000010000000000  || IKabs(j15eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13, j14, j15]

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1216=cj16*cj16;
IkReal x1217=cj17*cj17;
IkReal x1218=r01*r01;
IkReal x1219=r00*r00;
IkReal x1220=r02*r02;
IkReal x1221=(cj17*r01);
IkReal x1222=(cj16*cj17*r00);
IkReal x1223=((2.0)*r02*sj16);
IkReal x1224=((1.0)*x1216);
IkReal x1225=((2.0)*r00*sj17);
IkReal x1226=(cj16*r01*sj17);
IkReal x1227=(x1217*x1219);
IkReal x1228=(x1217*x1218);
CheckValue<IkReal> x1229=IKPowWithIntegerCheck(IKsign((x1227+(((-1.0)*x1224*x1227))+(((-1.0)*x1228))+(((-1.0)*x1220))+((x1223*x1226))+(((-1.0)*x1218*x1224))+((x1216*x1228))+((x1216*x1220))+(((-1.0)*x1221*x1225))+(((-1.0)*x1222*x1223))+((x1216*x1221*x1225))+(((-1.0)*x1219)))),-1);
if(!x1229.valid){
continue;
}
CheckValue<IkReal> x1230 = IKatan2WithCheck(IkReal((x1226+(((-1.0)*x1222))+(((-1.0)*r02*sj16)))),IkReal(((((-1.0)*x1221))+(((-1.0)*r00*sj17)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1230.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1229.value)))+(x1230.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1231=IKsin(j15);
IkReal x1232=IKcos(j15);
IkReal x1233=(r00*sj17);
IkReal x1234=(r02*sj16);
IkReal x1235=(cj16*sj17);
IkReal x1236=(cj17*r01);
IkReal x1237=(cj16*cj17);
IkReal x1238=((1.0)*x1232);
IkReal x1239=(r00*x1237);
IkReal x1240=((1.0)*x1231);
evalcond[0]=((((-1.0)*x1238*x1239))+((x1231*x1233))+((x1231*x1236))+((r01*x1232*x1235))+(((-1.0)*x1234*x1238)));
evalcond[1]=(((r21*x1231*x1235))+(((-1.0)*cj17*r21*x1238))+(((-1.0)*r20*sj17*x1238))+(((-1.0)*r22*sj16*x1240))+(((-1.0)*r20*x1237*x1240)));
evalcond[2]=((((-1.0)*cj17*r11*x1238))+(((-1.0)*r10*x1237*x1240))+(((-1.0)*r12*sj16*x1240))+(((-1.0)*r10*sj17*x1238))+((r11*x1231*x1235)));
evalcond[3]=((1.0)+(((-1.0)*x1239*x1240))+((r01*x1231*x1235))+(((-1.0)*x1236*x1238))+(((-1.0)*x1233*x1238))+(((-1.0)*x1234*x1240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1241=((12.0)*pz);
IkReal x1242=((4.0)*pz);
IkReal x1243=(cj17*r20);
IkReal x1244=((1.678)*sj16);
IkReal x1245=(sj16*sj17);
IkReal x1246=(r20*sj17);
IkReal x1247=(cj17*r21);
IkReal x1248=(cj15*cj16);
IkReal x1249=(r21*sj17);
IkReal x1250=(cj16*r22);
IkReal x1251=((0.14)*sj15);
IkReal x1252=((0.42)*sj15);
IkReal x1253=(cj16*r12);
IkReal x1254=((5.034)*x1250);
IkReal x1255=((0.012)*x1247);
IkReal x1256=((0.012)*x1246);
IkReal x1257=((1.678)*x1250);
IkReal x1258=((0.004)*x1247);
IkReal x1259=((0.004)*x1246);
IkReal x1260=(cj15*r22*sj16);
IkReal x1261=(cj17*r10*sj16);
IkReal x1262=((5.034)*r21*x1245);
IkReal x1263=((0.42)*x1261);
IkReal x1264=((5.034)*sj16*x1243);
IkReal x1265=(x1247*x1252);
IkReal x1266=(x1246*x1252);
IkReal x1267=(x1244*x1249);
IkReal x1268=(x1243*x1244);
IkReal x1269=((0.42)*x1248*x1249);
IkReal x1270=(x1242+x1268);
IkReal x1271=(x1241+x1264);
IkReal x1272=((((0.42)*x1253))+x1271+(((0.42)*r11*x1245)));
IkReal x1273=(x1262+x1256+x1254+x1255);
IkReal x1274=(x1269+x1266+x1265);
IkReal x1275=((-1.816)+x1267+x1257+x1258+x1259);
IkReal x1276=(x1271+(((0.42)*x1243*x1248))+(((0.42)*x1260)));
j13eval[0]=((IKabs(((1.816)+x1273+x1263+(((-1.0)*x1272)))))+(IKabs(((1.816)+x1273+x1274+(((-1.0)*x1276)))))+(IKabs((x1275+(((-1.0)*x1270))+(((-0.14)*x1253))+(((0.14)*x1261))+(((-0.14)*r11*x1245)))))+(IKabs(((-1.816)+x1273+x1274+(((-1.0)*x1276)))))+(IKabs(((-1.816)+x1273+x1263+(((-1.0)*x1272)))))+(IKabs((((x1246*x1251))+((x1247*x1251))+x1275+(((-0.14)*x1243*x1248))+(((-1.0)*x1270))+(((-0.14)*x1260))+(((0.14)*x1248*x1249))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1277=(cj17*sj16);
IkReal x1278=(sj16*sj17);
IkReal x1279=(r20*sj17);
IkReal x1280=(cj16*r22);
IkReal x1281=(cj17*r21);
IkReal x1282=(cj16*r12);
IkReal x1283=((5.034)*x1280);
IkReal x1284=((0.012)*x1281);
IkReal x1285=((0.012)*x1279);
IkReal x1286=((1.678)*x1280);
IkReal x1287=((0.004)*x1281);
IkReal x1288=((0.004)*x1279);
IkReal x1289=((5.034)*r21*x1278);
IkReal x1290=((0.42)*r10*x1277);
IkReal x1291=((1.678)*r21*x1278);
IkReal x1292=((0.14)*r10*x1277);
IkReal x1293=((((12.0)*pz))+(((5.034)*r20*x1277))+(((0.42)*x1282))+(((0.42)*r11*x1278)));
IkReal x1294=((((4.0)*pz))+(((0.14)*x1282))+(((0.14)*r11*x1278))+(((1.678)*r20*x1277)));
IkReal x1295=(x1285+x1284+x1283+x1289+x1290);
IkReal x1296=(x1287+x1286+x1288+x1292+x1291);
op[0]=((-1.816)+x1296+(((-1.0)*x1294)));
op[1]=0;
op[2]=((-1.816)+x1295+(((-1.0)*x1293)));
op[3]=0;
op[4]=((1.816)+x1295+(((-1.0)*x1293)));
op[5]=0;
op[6]=((1.816)+x1296+(((-1.0)*x1294)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1297=(cj17*r20);
IkReal x1298=((1.678)*sj16);
IkReal x1299=(r20*sj17);
IkReal x1300=(r21*sj17);
IkReal x1301=((5.034)*sj16);
IkReal x1302=(cj17*r21);
IkReal x1303=(cj15*cj16);
IkReal x1304=(cj16*r22);
IkReal x1305=((0.14)*sj15);
IkReal x1306=((0.42)*sj15);
IkReal x1307=((1.678)*x1304);
IkReal x1308=((0.004)*x1302);
IkReal x1309=((0.004)*x1299);
IkReal x1310=((5.034)*x1304);
IkReal x1311=((0.012)*x1302);
IkReal x1312=((0.012)*x1299);
IkReal x1313=(cj15*r22*sj16);
IkReal x1314=(x1299*x1305);
IkReal x1315=(x1298*x1300);
IkReal x1316=(x1302*x1305);
IkReal x1317=(x1302*x1306);
IkReal x1318=(x1299*x1306);
IkReal x1319=(x1300*x1301);
IkReal x1320=((0.14)*x1300*x1303);
IkReal x1321=((0.42)*x1300*x1303);
IkReal x1322=((((12.0)*pz))+(((0.42)*x1297*x1303))+((x1297*x1301))+(((0.42)*x1313)));
IkReal x1323=(((x1297*x1298))+(((0.14)*x1297*x1303))+(((4.0)*pz))+(((0.14)*x1313)));
IkReal x1324=(x1317+x1312+x1311+x1310+x1319+x1318+x1321);
IkReal x1325=(x1307+x1308+x1309+x1316+x1315+x1314+x1320);
j13evalpoly[0]=((1.816)+x1325+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+x1325+(((-1.0)*x1323))))))+(((-1.0)*x1323))+(((htj13*htj13*htj13*htj13)*(((-1.816)+x1324+(((-1.0)*x1322))))))+(((htj13*htj13)*(((1.816)+x1324+(((-1.0)*x1322)))))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1326=(cj13*sj16);
IkReal x1327=(cj17*r10);
IkReal x1328=((1.0)*r21);
IkReal x1329=(cj17*r20);
IkReal x1330=(cj16*sj13);
IkReal x1331=((1.0)*r22);
IkReal x1332=(cj13*cj16);
IkReal x1333=(sj13*sj16);
IkReal x1334=(sj17*x1333);
if( IKabs((((r12*x1330))+((r11*x1334))+(((-1.0)*x1327*x1333))+((x1326*x1329))+(((-1.0)*x1331*x1332))+(((-1.0)*sj17*x1326*x1328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1329*x1333))+(((-1.0)*x1328*x1334))+(((-1.0)*r12*x1332))+(((-1.0)*x1330*x1331))+(((-1.0)*r11*sj17*x1326))+((x1326*x1327)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1330))+((r11*x1334))+(((-1.0)*x1327*x1333))+((x1326*x1329))+(((-1.0)*x1331*x1332))+(((-1.0)*sj17*x1326*x1328))))+IKsqr((((x1329*x1333))+(((-1.0)*x1328*x1334))+(((-1.0)*r12*x1332))+(((-1.0)*x1330*x1331))+(((-1.0)*r11*sj17*x1326))+((x1326*x1327))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r12*x1330))+((r11*x1334))+(((-1.0)*x1327*x1333))+((x1326*x1329))+(((-1.0)*x1331*x1332))+(((-1.0)*sj17*x1326*x1328))), (((x1329*x1333))+(((-1.0)*x1328*x1334))+(((-1.0)*r12*x1332))+(((-1.0)*x1330*x1331))+(((-1.0)*r11*sj17*x1326))+((x1326*x1327))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1335=IKsin(j14);
IkReal x1336=IKcos(j14);
IkReal x1337=(cj17*r11);
IkReal x1338=(cj17*r10);
IkReal x1339=(cj15*cj16);
IkReal x1340=(r11*sj17);
IkReal x1341=(r10*sj17);
IkReal x1342=(r20*sj17);
IkReal x1343=(cj17*r20);
IkReal x1344=(cj17*r21);
IkReal x1345=(r21*sj17);
IkReal x1346=((1.0)*sj16);
IkReal x1347=((1.0)*cj16);
IkReal x1348=(sj13*x1335);
IkReal x1349=(cj13*x1335);
IkReal x1350=(sj13*x1336);
IkReal x1351=(cj13*x1336);
IkReal x1352=((1.0)*x1351);
evalcond[0]=(x1348+(((-1.0)*x1352))+(((-1.0)*x1340*x1346))+(((-1.0)*r12*x1347))+((sj16*x1338)));
evalcond[1]=((((-1.0)*x1350))+((sj16*x1343))+(((-1.0)*r22*x1347))+(((-1.0)*x1349))+(((-1.0)*x1345*x1346)));
evalcond[2]=(x1349+x1350+((x1339*x1340))+((sj15*x1341))+(((-1.0)*x1338*x1339))+(((-1.0)*cj15*r12*x1346))+((sj15*x1337)));
evalcond[3]=(x1348+(((-1.0)*x1352))+(((-1.0)*x1339*x1343))+((x1339*x1345))+((sj15*x1342))+((sj15*x1344))+(((-1.0)*cj15*r22*x1346)));
evalcond[4]=((((-0.035)*x1348))+(((-0.4195)*x1349))+(((0.001)*x1342))+(((0.001)*x1344))+(((0.454)*cj13))+(((-0.4195)*x1350))+(((-1.0)*pz))+(((0.035)*x1351)));
evalcond[5]=((-0.025)+(((-0.035)*x1349))+(((0.001)*x1341))+(((-0.454)*sj13))+(((-0.4195)*x1351))+(((0.4195)*x1348))+(((-1.0)*py))+(((-0.035)*x1350))+(((0.001)*x1337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1353=((1.0)*sj17);
CheckValue<IkReal> x1354=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r22))+(((-1.0)*r21*sj16*x1353))+((cj17*r20*sj16)))),-1);
if(!x1354.valid){
continue;
}
CheckValue<IkReal> x1355 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1353))+(((-1.0)*cj17*r11)))),IkReal(((((-1.0)*cj16*r11*x1353))+((r12*sj16))+((cj16*cj17*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1355.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1354.value)))+(x1355.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1356=IKsin(j15);
IkReal x1357=IKcos(j15);
IkReal x1358=(r00*sj17);
IkReal x1359=(r02*sj16);
IkReal x1360=(cj16*sj17);
IkReal x1361=(cj17*r01);
IkReal x1362=(cj16*cj17);
IkReal x1363=((1.0)*x1357);
IkReal x1364=(r00*x1362);
IkReal x1365=((1.0)*x1356);
evalcond[0]=(((r01*x1357*x1360))+((x1356*x1361))+(((-1.0)*x1359*x1363))+(((-1.0)*x1363*x1364))+((x1356*x1358)));
evalcond[1]=((((-1.0)*r20*x1362*x1365))+((r21*x1356*x1360))+(((-1.0)*cj17*r21*x1363))+(((-1.0)*r20*sj17*x1363))+(((-1.0)*r22*sj16*x1365)));
evalcond[2]=((((-1.0)*cj17*r11*x1363))+(((-1.0)*r10*x1362*x1365))+(((-1.0)*r12*sj16*x1365))+((r11*x1356*x1360))+(((-1.0)*r10*sj17*x1363)));
evalcond[3]=((1.0)+(((-1.0)*x1364*x1365))+((r01*x1356*x1360))+(((-1.0)*x1359*x1365))+(((-1.0)*x1361*x1363))+(((-1.0)*x1358*x1363)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1366=((12.0)*pz);
IkReal x1367=((4.0)*pz);
IkReal x1368=(cj17*r20);
IkReal x1369=((1.678)*sj16);
IkReal x1370=(sj16*sj17);
IkReal x1371=(r20*sj17);
IkReal x1372=(cj17*r21);
IkReal x1373=(cj15*cj16);
IkReal x1374=(r21*sj17);
IkReal x1375=(cj16*r22);
IkReal x1376=((0.14)*sj15);
IkReal x1377=((0.42)*sj15);
IkReal x1378=(cj16*r12);
IkReal x1379=((5.034)*x1375);
IkReal x1380=((0.012)*x1372);
IkReal x1381=((0.012)*x1371);
IkReal x1382=((1.678)*x1375);
IkReal x1383=((0.004)*x1372);
IkReal x1384=((0.004)*x1371);
IkReal x1385=(cj15*r22*sj16);
IkReal x1386=(cj17*r10*sj16);
IkReal x1387=((5.034)*r21*x1370);
IkReal x1388=((0.42)*x1386);
IkReal x1389=((5.034)*sj16*x1368);
IkReal x1390=(x1372*x1377);
IkReal x1391=(x1371*x1377);
IkReal x1392=(x1369*x1374);
IkReal x1393=(x1368*x1369);
IkReal x1394=((0.42)*x1373*x1374);
IkReal x1395=(x1367+x1393);
IkReal x1396=(x1366+x1389);
IkReal x1397=(x1396+(((0.42)*x1378))+(((0.42)*r11*x1370)));
IkReal x1398=(x1379+x1387+x1380+x1381);
IkReal x1399=(x1394+x1391+x1390);
IkReal x1400=((-1.816)+x1384+x1382+x1383+x1392);
IkReal x1401=(x1396+(((0.42)*x1385))+(((0.42)*x1368*x1373)));
j13eval[0]=((IKabs(((((-0.14)*r11*x1370))+x1400+(((-0.14)*x1378))+(((0.14)*x1386))+(((-1.0)*x1395)))))+(IKabs(((-1.816)+x1399+x1398+(((-1.0)*x1401)))))+(IKabs(((((0.14)*x1373*x1374))+((x1372*x1376))+(((-0.14)*x1385))+((x1371*x1376))+x1400+(((-0.14)*x1368*x1373))+(((-1.0)*x1395)))))+(IKabs(((-1.816)+x1388+x1398+(((-1.0)*x1397)))))+(IKabs(((1.816)+x1388+x1398+(((-1.0)*x1397)))))+(IKabs(((1.816)+x1399+x1398+(((-1.0)*x1401))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1402=(cj17*sj16);
IkReal x1403=(sj16*sj17);
IkReal x1404=(r20*sj17);
IkReal x1405=(cj16*r22);
IkReal x1406=(cj17*r21);
IkReal x1407=(cj16*r12);
IkReal x1408=((5.034)*x1405);
IkReal x1409=((0.012)*x1406);
IkReal x1410=((0.012)*x1404);
IkReal x1411=((1.678)*x1405);
IkReal x1412=((0.004)*x1406);
IkReal x1413=((0.004)*x1404);
IkReal x1414=((5.034)*r21*x1403);
IkReal x1415=((0.42)*r10*x1402);
IkReal x1416=((1.678)*r21*x1403);
IkReal x1417=((0.14)*r10*x1402);
IkReal x1418=((((0.42)*r11*x1403))+(((0.42)*x1407))+(((12.0)*pz))+(((5.034)*r20*x1402)));
IkReal x1419=((((4.0)*pz))+(((1.678)*r20*x1402))+(((0.14)*x1407))+(((0.14)*r11*x1403)));
IkReal x1420=(x1410+x1414+x1415+x1409+x1408);
IkReal x1421=(x1411+x1412+x1413+x1416+x1417);
op[0]=((-1.816)+(((-1.0)*x1419))+x1421);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x1418))+x1420);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x1418))+x1420);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x1419))+x1421);
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1422=(cj17*r20);
IkReal x1423=((1.678)*sj16);
IkReal x1424=(r20*sj17);
IkReal x1425=(r21*sj17);
IkReal x1426=((5.034)*sj16);
IkReal x1427=(cj17*r21);
IkReal x1428=(cj15*cj16);
IkReal x1429=(cj16*r22);
IkReal x1430=((0.14)*sj15);
IkReal x1431=((0.42)*sj15);
IkReal x1432=((1.678)*x1429);
IkReal x1433=((0.004)*x1427);
IkReal x1434=((0.004)*x1424);
IkReal x1435=((5.034)*x1429);
IkReal x1436=((0.012)*x1427);
IkReal x1437=((0.012)*x1424);
IkReal x1438=(cj15*r22*sj16);
IkReal x1439=(x1424*x1430);
IkReal x1440=(x1423*x1425);
IkReal x1441=(x1427*x1430);
IkReal x1442=(x1427*x1431);
IkReal x1443=(x1424*x1431);
IkReal x1444=(x1425*x1426);
IkReal x1445=((0.14)*x1425*x1428);
IkReal x1446=((0.42)*x1425*x1428);
IkReal x1447=(((x1422*x1426))+(((12.0)*pz))+(((0.42)*x1438))+(((0.42)*x1422*x1428)));
IkReal x1448=(((x1422*x1423))+(((4.0)*pz))+(((0.14)*x1422*x1428))+(((0.14)*x1438)));
IkReal x1449=(x1436+x1437+x1435+x1446+x1444+x1443+x1442);
IkReal x1450=(x1434+x1432+x1433+x1439+x1445+x1441+x1440);
j13evalpoly[0]=((1.816)+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+x1450+(((-1.0)*x1448))))))+(((htj13*htj13*htj13*htj13)*(((-1.816)+x1449+(((-1.0)*x1447))))))+x1450+(((-1.0)*x1448))+(((htj13*htj13)*(((1.816)+x1449+(((-1.0)*x1447)))))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1451=(cj13*sj16);
IkReal x1452=(cj17*r10);
IkReal x1453=((1.0)*r21);
IkReal x1454=(cj17*r20);
IkReal x1455=(cj16*sj13);
IkReal x1456=((1.0)*r22);
IkReal x1457=(cj13*cj16);
IkReal x1458=(sj13*sj16);
IkReal x1459=(sj17*x1458);
if( IKabs(((((-1.0)*sj17*x1451*x1453))+((r11*x1459))+((r12*x1455))+(((-1.0)*x1452*x1458))+(((-1.0)*x1456*x1457))+((x1451*x1454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1454*x1458))+(((-1.0)*x1455*x1456))+(((-1.0)*r11*sj17*x1451))+(((-1.0)*x1453*x1459))+(((-1.0)*r12*x1457))+((x1451*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj17*x1451*x1453))+((r11*x1459))+((r12*x1455))+(((-1.0)*x1452*x1458))+(((-1.0)*x1456*x1457))+((x1451*x1454))))+IKsqr((((x1454*x1458))+(((-1.0)*x1455*x1456))+(((-1.0)*r11*sj17*x1451))+(((-1.0)*x1453*x1459))+(((-1.0)*r12*x1457))+((x1451*x1452))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*sj17*x1451*x1453))+((r11*x1459))+((r12*x1455))+(((-1.0)*x1452*x1458))+(((-1.0)*x1456*x1457))+((x1451*x1454))), (((x1454*x1458))+(((-1.0)*x1455*x1456))+(((-1.0)*r11*sj17*x1451))+(((-1.0)*x1453*x1459))+(((-1.0)*r12*x1457))+((x1451*x1452))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1460=IKsin(j14);
IkReal x1461=IKcos(j14);
IkReal x1462=(cj17*r11);
IkReal x1463=(cj17*r10);
IkReal x1464=(cj15*cj16);
IkReal x1465=(r11*sj17);
IkReal x1466=(r10*sj17);
IkReal x1467=(r20*sj17);
IkReal x1468=(cj17*r20);
IkReal x1469=(cj17*r21);
IkReal x1470=(r21*sj17);
IkReal x1471=((1.0)*sj16);
IkReal x1472=((1.0)*cj16);
IkReal x1473=(sj13*x1460);
IkReal x1474=(cj13*x1460);
IkReal x1475=(sj13*x1461);
IkReal x1476=(cj13*x1461);
IkReal x1477=((1.0)*x1476);
evalcond[0]=((((-1.0)*r12*x1472))+(((-1.0)*x1465*x1471))+((sj16*x1463))+x1473+(((-1.0)*x1477)));
evalcond[1]=((((-1.0)*r22*x1472))+(((-1.0)*x1470*x1471))+(((-1.0)*x1474))+(((-1.0)*x1475))+((sj16*x1468)));
evalcond[2]=((((-1.0)*cj15*r12*x1471))+((sj15*x1462))+((sj15*x1466))+((x1464*x1465))+(((-1.0)*x1463*x1464))+x1474+x1475);
evalcond[3]=(((sj15*x1467))+((sj15*x1469))+(((-1.0)*cj15*r22*x1471))+x1473+(((-1.0)*x1477))+(((-1.0)*x1464*x1468))+((x1464*x1470)));
evalcond[4]=((((0.035)*x1476))+(((-0.035)*x1473))+(((0.454)*cj13))+(((-0.4195)*x1475))+(((-0.4195)*x1474))+(((-1.0)*pz))+(((0.001)*x1467))+(((0.001)*x1469)));
evalcond[5]=((-0.025)+(((-0.035)*x1475))+(((-0.035)*x1474))+(((-0.454)*sj13))+(((0.4195)*x1473))+(((-0.4195)*x1476))+(((-1.0)*py))+(((0.001)*x1466))+(((0.001)*x1462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1478=((1.0)*cj17);
IkReal x1479=((1.0)*sj17);
CheckValue<IkReal> x1480 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1478))+(((-1.0)*r20*x1479)))),IkReal((((cj16*cj17*r20))+((r22*sj16))+(((-1.0)*cj16*r21*x1479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1480.valid){
continue;
}
CheckValue<IkReal> x1481=IKPowWithIntegerCheck(IKsign((((r11*sj16*sj17))+((cj16*r12))+(((-1.0)*r10*sj16*x1478)))),-1);
if(!x1481.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x1480.value)+(((1.5707963267949)*(x1481.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[4];
IkReal x1482=IKsin(j15);
IkReal x1483=IKcos(j15);
IkReal x1484=(r00*sj17);
IkReal x1485=(r02*sj16);
IkReal x1486=(cj16*sj17);
IkReal x1487=(cj17*r01);
IkReal x1488=(cj16*cj17);
IkReal x1489=((1.0)*x1483);
IkReal x1490=(r00*x1488);
IkReal x1491=((1.0)*x1482);
evalcond[0]=(((x1482*x1487))+((x1482*x1484))+(((-1.0)*x1485*x1489))+((r01*x1483*x1486))+(((-1.0)*x1489*x1490)));
evalcond[1]=((((-1.0)*cj17*r21*x1489))+((r21*x1482*x1486))+(((-1.0)*r22*sj16*x1491))+(((-1.0)*r20*x1488*x1491))+(((-1.0)*r20*sj17*x1489)));
evalcond[2]=(((r11*x1482*x1486))+(((-1.0)*r10*sj17*x1489))+(((-1.0)*r12*sj16*x1491))+(((-1.0)*r10*x1488*x1491))+(((-1.0)*cj17*r11*x1489)));
evalcond[3]=((1.0)+(((-1.0)*x1487*x1489))+((r01*x1482*x1486))+(((-1.0)*x1484*x1489))+(((-1.0)*x1485*x1491))+(((-1.0)*x1490*x1491)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1492=((12.0)*pz);
IkReal x1493=((4.0)*pz);
IkReal x1494=(cj17*r20);
IkReal x1495=((1.678)*sj16);
IkReal x1496=(sj16*sj17);
IkReal x1497=(r20*sj17);
IkReal x1498=(cj17*r21);
IkReal x1499=(cj15*cj16);
IkReal x1500=(r21*sj17);
IkReal x1501=(cj16*r22);
IkReal x1502=((0.14)*sj15);
IkReal x1503=((0.42)*sj15);
IkReal x1504=(cj16*r12);
IkReal x1505=((5.034)*x1501);
IkReal x1506=((0.012)*x1498);
IkReal x1507=((0.012)*x1497);
IkReal x1508=((1.678)*x1501);
IkReal x1509=((0.004)*x1498);
IkReal x1510=((0.004)*x1497);
IkReal x1511=(cj15*r22*sj16);
IkReal x1512=(cj17*r10*sj16);
IkReal x1513=((5.034)*r21*x1496);
IkReal x1514=((0.42)*x1512);
IkReal x1515=((5.034)*sj16*x1494);
IkReal x1516=(x1498*x1503);
IkReal x1517=(x1497*x1503);
IkReal x1518=(x1495*x1500);
IkReal x1519=(x1494*x1495);
IkReal x1520=((0.42)*x1499*x1500);
IkReal x1521=(x1519+x1493);
IkReal x1522=(x1515+x1492);
IkReal x1523=((((0.42)*r11*x1496))+x1522+(((0.42)*x1504)));
IkReal x1524=(x1506+x1507+x1505+x1513);
IkReal x1525=(x1520+x1517+x1516);
IkReal x1526=((-1.816)+x1508+x1509+x1518+x1510);
IkReal x1527=(x1522+(((0.42)*x1511))+(((0.42)*x1494*x1499)));
j13eval[0]=((IKabs(((-1.816)+(((-1.0)*x1523))+x1524+x1514)))+(IKabs(((((-0.14)*x1504))+(((0.14)*x1512))+(((-1.0)*x1521))+x1526+(((-0.14)*r11*x1496)))))+(IKabs(((1.816)+(((-1.0)*x1527))+x1524+x1525)))+(IKabs(((1.816)+(((-1.0)*x1523))+x1524+x1514)))+(IKabs(((((-0.14)*x1511))+((x1498*x1502))+(((-1.0)*x1521))+(((-0.14)*x1494*x1499))+((x1497*x1502))+x1526+(((0.14)*x1499*x1500)))))+(IKabs(((-1.816)+(((-1.0)*x1527))+x1524+x1525))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1528=(cj17*sj16);
IkReal x1529=(sj16*sj17);
IkReal x1530=(r20*sj17);
IkReal x1531=(cj16*r22);
IkReal x1532=(cj17*r21);
IkReal x1533=(cj16*r12);
IkReal x1534=((5.034)*x1531);
IkReal x1535=((0.012)*x1532);
IkReal x1536=((0.012)*x1530);
IkReal x1537=((1.678)*x1531);
IkReal x1538=((0.004)*x1532);
IkReal x1539=((0.004)*x1530);
IkReal x1540=((5.034)*r21*x1529);
IkReal x1541=((0.42)*r10*x1528);
IkReal x1542=((1.678)*r21*x1529);
IkReal x1543=((0.14)*r10*x1528);
IkReal x1544=((((12.0)*pz))+(((0.42)*r11*x1529))+(((5.034)*r20*x1528))+(((0.42)*x1533)));
IkReal x1545=((((4.0)*pz))+(((1.678)*r20*x1528))+(((0.14)*r11*x1529))+(((0.14)*x1533)));
IkReal x1546=(x1540+x1541+x1536+x1535+x1534);
IkReal x1547=(x1542+x1543+x1537+x1539+x1538);
op[0]=((-1.816)+x1547+(((-1.0)*x1545)));
op[1]=0;
op[2]=((-1.816)+x1546+(((-1.0)*x1544)));
op[3]=0;
op[4]=((1.816)+x1546+(((-1.0)*x1544)));
op[5]=0;
op[6]=((1.816)+x1547+(((-1.0)*x1545)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1548=(cj17*r20);
IkReal x1549=((1.678)*sj16);
IkReal x1550=(r20*sj17);
IkReal x1551=(r21*sj17);
IkReal x1552=((5.034)*sj16);
IkReal x1553=(cj17*r21);
IkReal x1554=(cj15*cj16);
IkReal x1555=(cj16*r22);
IkReal x1556=((0.14)*sj15);
IkReal x1557=((0.42)*sj15);
IkReal x1558=((1.678)*x1555);
IkReal x1559=((0.004)*x1553);
IkReal x1560=((0.004)*x1550);
IkReal x1561=((5.034)*x1555);
IkReal x1562=((0.012)*x1553);
IkReal x1563=((0.012)*x1550);
IkReal x1564=(cj15*r22*sj16);
IkReal x1565=(x1550*x1556);
IkReal x1566=(x1549*x1551);
IkReal x1567=(x1553*x1556);
IkReal x1568=(x1553*x1557);
IkReal x1569=(x1550*x1557);
IkReal x1570=(x1551*x1552);
IkReal x1571=((0.14)*x1551*x1554);
IkReal x1572=((0.42)*x1551*x1554);
IkReal x1573=((((12.0)*pz))+(((0.42)*x1564))+((x1548*x1552))+(((0.42)*x1548*x1554)));
IkReal x1574=((((0.14)*x1548*x1554))+(((4.0)*pz))+(((0.14)*x1564))+((x1548*x1549)));
IkReal x1575=(x1568+x1569+x1561+x1562+x1563+x1572+x1570);
IkReal x1576=(x1560+x1565+x1566+x1567+x1571+x1559+x1558);
j13evalpoly[0]=((1.816)+(((htj13*htj13*htj13*htj13*htj13*htj13)*(((-1.816)+x1576+(((-1.0)*x1574))))))+x1576+(((htj13*htj13*htj13*htj13)*(((-1.816)+x1575+(((-1.0)*x1573))))))+(((-1.0)*x1574))+(((htj13*htj13)*(((1.816)+x1575+(((-1.0)*x1573)))))));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1577=(cj13*sj16);
IkReal x1578=(cj17*r10);
IkReal x1579=((1.0)*r21);
IkReal x1580=(cj17*r20);
IkReal x1581=(cj16*sj13);
IkReal x1582=((1.0)*r22);
IkReal x1583=(cj13*cj16);
IkReal x1584=(sj13*sj16);
IkReal x1585=(sj17*x1584);
if( IKabs((((r12*x1581))+((r11*x1585))+(((-1.0)*sj17*x1577*x1579))+(((-1.0)*x1578*x1584))+((x1577*x1580))+(((-1.0)*x1582*x1583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*sj17*x1577))+((x1577*x1578))+((x1580*x1584))+(((-1.0)*x1579*x1585))+(((-1.0)*x1581*x1582))+(((-1.0)*r12*x1583)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r12*x1581))+((r11*x1585))+(((-1.0)*sj17*x1577*x1579))+(((-1.0)*x1578*x1584))+((x1577*x1580))+(((-1.0)*x1582*x1583))))+IKsqr(((((-1.0)*r11*sj17*x1577))+((x1577*x1578))+((x1580*x1584))+(((-1.0)*x1579*x1585))+(((-1.0)*x1581*x1582))+(((-1.0)*r12*x1583))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r12*x1581))+((r11*x1585))+(((-1.0)*sj17*x1577*x1579))+(((-1.0)*x1578*x1584))+((x1577*x1580))+(((-1.0)*x1582*x1583))), ((((-1.0)*r11*sj17*x1577))+((x1577*x1578))+((x1580*x1584))+(((-1.0)*x1579*x1585))+(((-1.0)*x1581*x1582))+(((-1.0)*r12*x1583))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[6];
IkReal x1586=IKsin(j14);
IkReal x1587=IKcos(j14);
IkReal x1588=(cj17*r11);
IkReal x1589=(cj17*r10);
IkReal x1590=(cj15*cj16);
IkReal x1591=(r11*sj17);
IkReal x1592=(r10*sj17);
IkReal x1593=(r20*sj17);
IkReal x1594=(cj17*r20);
IkReal x1595=(cj17*r21);
IkReal x1596=(r21*sj17);
IkReal x1597=((1.0)*sj16);
IkReal x1598=((1.0)*cj16);
IkReal x1599=(sj13*x1586);
IkReal x1600=(cj13*x1586);
IkReal x1601=(sj13*x1587);
IkReal x1602=(cj13*x1587);
IkReal x1603=((1.0)*x1602);
evalcond[0]=(((sj16*x1589))+(((-1.0)*x1603))+x1599+(((-1.0)*x1591*x1597))+(((-1.0)*r12*x1598)));
evalcond[1]=(((sj16*x1594))+(((-1.0)*x1601))+(((-1.0)*x1600))+(((-1.0)*r22*x1598))+(((-1.0)*x1596*x1597)));
evalcond[2]=((((-1.0)*x1589*x1590))+((x1590*x1591))+x1601+x1600+(((-1.0)*cj15*r12*x1597))+((sj15*x1592))+((sj15*x1588)));
evalcond[3]=(((x1590*x1596))+(((-1.0)*x1603))+x1599+(((-1.0)*cj15*r22*x1597))+(((-1.0)*x1590*x1594))+((sj15*x1593))+((sj15*x1595)));
evalcond[4]=((((0.454)*cj13))+(((-0.035)*x1599))+(((-0.4195)*x1600))+(((-0.4195)*x1601))+(((-1.0)*pz))+(((0.035)*x1602))+(((0.001)*x1595))+(((0.001)*x1593)));
evalcond[5]=((-0.025)+(((-0.454)*sj13))+(((-0.4195)*x1602))+(((-1.0)*py))+(((0.4195)*x1599))+(((0.001)*x1592))+(((0.001)*x1588))+(((-0.035)*x1600))+(((-0.035)*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13, j14, j15]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1604=(cj16*sj17);
IkReal x1605=((1.0)*cj17);
IkReal x1606=(r10*sj12);
IkReal x1607=(cj16*cj17);
IkReal x1608=(r11*sj12);
IkReal x1609=((1.0)*sj17);
IkReal x1610=(cj12*r00);
IkReal x1611=((1.0)*cj12*r01);
CheckValue<IkReal> x1612 = IKatan2WithCheck(IkReal(((((-1.0)*cj12*r01*x1605))+(((-1.0)*x1605*x1608))+(((-1.0)*x1609*x1610))+(((-1.0)*x1606*x1609)))),IkReal((((r12*sj12*sj16))+(((-1.0)*x1604*x1608))+((cj12*r02*sj16))+((x1607*x1610))+((x1606*x1607))+(((-1.0)*x1604*x1611)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1612.valid){
continue;
}
CheckValue<IkReal> x1613=IKPowWithIntegerCheck(IKsign((((cj16*r22))+(((-1.0)*r20*sj16*x1605))+((r21*sj16*sj17)))),-1);
if(!x1613.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x1612.value)+(((1.5707963267949)*(x1613.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1614=IKsin(j15);
IkReal x1615=IKcos(j15);
IkReal x1616=((1.0)*r00);
IkReal x1617=((1.0)*cj17);
IkReal x1618=(sj17*x1615);
IkReal x1619=(cj16*x1614);
IkReal x1620=((1.0)*sj16*x1614);
evalcond[0]=((((-1.0)*r20*x1618))+((r21*sj17*x1619))+(((-1.0)*r20*x1617*x1619))+(((-1.0)*r21*x1615*x1617))+(((-1.0)*r22*x1620)));
evalcond[1]=((((-1.0)*r12*x1620))+(((-1.0)*r10*x1617*x1619))+cj12+((r11*sj17*x1619))+(((-1.0)*r10*x1618))+(((-1.0)*r11*x1615*x1617)));
evalcond[2]=((((-1.0)*x1616*x1618))+(((-1.0)*r02*x1620))+(((-1.0)*sj12))+(((-1.0)*cj17*x1616*x1619))+((r01*sj17*x1619))+(((-1.0)*r01*x1615*x1617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x1621=((1.816)*sj12);
IkReal x1622=((1.816)*cj12);
IkReal x1623=(cj12*cj17);
IkReal x1624=((0.012)*r21);
IkReal x1625=(sj16*sj17);
IkReal x1626=(r21*sj12);
IkReal x1627=(cj16*r02);
IkReal x1628=(r20*sj16);
IkReal x1629=(cj12*pz);
IkReal x1630=(pz*sj12);
IkReal x1631=(cj12*r21);
IkReal x1632=(cj16*r12);
IkReal x1633=(cj17*sj12);
IkReal x1634=((12.0)*x1629);
IkReal x1635=((0.42)*x1627);
IkReal x1636=((12.0)*x1630);
IkReal x1637=((0.42)*x1632);
IkReal x1638=(r20*sj12*sj17);
IkReal x1639=((0.42)*x1625);
IkReal x1640=((5.034)*cj16*r22);
IkReal x1641=(cj12*r20*sj17);
IkReal x1642=((0.42)*cj17*sj16);
IkReal x1643=((0.14)*cj17*sj16);
IkReal x1644=((1.678)*cj16*r22);
IkReal x1645=(r00*x1642);
IkReal x1646=(x1623*x1624);
IkReal x1647=(cj12*x1640);
IkReal x1648=(r01*x1639);
IkReal x1649=((0.012)*x1641);
IkReal x1650=(r10*x1642);
IkReal x1651=(x1624*x1633);
IkReal x1652=(r11*x1639);
IkReal x1653=(sj12*x1640);
IkReal x1654=((0.012)*x1638);
IkReal x1655=((5.034)*x1623*x1628);
IkReal x1656=((5.034)*x1625*x1631);
IkReal x1657=((5.034)*x1628*x1633);
IkReal x1658=((5.034)*x1625*x1626);
IkReal x1659=(x1655+x1645+x1634);
IkReal x1660=(x1650+x1657+x1636);
IkReal x1661=(x1656+x1647+x1646+x1649+x1648+x1635);
IkReal x1662=(x1658+x1652+x1653+x1651+x1654+x1637);
j13eval[0]=((IKabs((x1621+x1660+(((-1.0)*x1662)))))+(IKabs(((((1.678)*x1628*x1633))+(((-1.678)*x1625*x1626))+((r10*x1643))+x1621+(((4.0)*x1630))+(((-1.0)*sj12*x1644))+(((-0.14)*x1632))+(((-0.14)*r11*x1625))+(((-0.004)*cj17*x1626))+(((-0.004)*x1638)))))+(IKabs(((((1.678)*x1623*x1628))+(((-1.0)*cj12*x1644))+(((4.0)*x1629))+x1622+(((-1.678)*x1625*x1631))+((r00*x1643))+(((-0.14)*x1627))+(((-0.14)*r01*x1625))+(((-0.004)*r21*x1623))+(((-0.004)*x1641)))))+(IKabs((x1659+(((-1.0)*x1622))+(((-1.0)*x1661)))))+(IKabs((x1660+(((-1.0)*x1621))+(((-1.0)*x1662)))))+(IKabs((x1622+x1659+(((-1.0)*x1661))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1663=((1.816)*cj12);
IkReal x1664=(cj17*sj16);
IkReal x1665=((1.678)*cj12);
IkReal x1666=(cj16*r22);
IkReal x1667=(cj12*pz);
IkReal x1668=(cj12*r20);
IkReal x1669=(cj16*r02);
IkReal x1670=(sj16*sj17);
IkReal x1671=((5.034)*cj12);
IkReal x1672=((12.0)*x1667);
IkReal x1673=((0.42)*x1669);
IkReal x1674=((4.0)*x1667);
IkReal x1675=((0.14)*x1669);
IkReal x1676=(cj12*cj17*r21);
IkReal x1677=((0.42)*r00*x1664);
IkReal x1678=((0.012)*x1676);
IkReal x1679=(x1666*x1671);
IkReal x1680=((0.42)*r01*x1670);
IkReal x1681=((0.012)*sj17*x1668);
IkReal x1682=((0.14)*r00*x1664);
IkReal x1683=((0.004)*sj17*x1668);
IkReal x1684=(x1665*x1666);
IkReal x1685=((0.14)*r01*x1670);
IkReal x1686=((0.004)*x1676);
IkReal x1687=((5.034)*x1664*x1668);
IkReal x1688=(r21*x1670*x1671);
IkReal x1689=(r20*x1664*x1665);
IkReal x1690=(r21*x1665*x1670);
IkReal x1691=(x1674+x1682+x1689);
IkReal x1692=(x1677+x1672+x1687);
IkReal x1693=(x1675+x1690+x1683+x1685+x1684+x1686);
IkReal x1694=(x1678+x1679+x1673+x1681+x1680+x1688);
op[0]=((((-1.0)*x1693))+x1663+x1691);
op[1]=0;
op[2]=((((-1.0)*x1694))+x1663+x1692);
op[3]=0;
op[4]=((((-1.0)*x1694))+x1692+(((-1.0)*x1663)));
op[5]=0;
op[6]=((((-1.0)*x1693))+x1691+(((-1.0)*x1663)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1695=((1.816)*sj12);
IkReal x1696=(sj16*sj17);
IkReal x1697=((5.034)*sj12);
IkReal x1698=(cj16*r22);
IkReal x1699=((1.678)*sj12);
IkReal x1700=(pz*sj12);
IkReal x1701=(cj16*r12);
IkReal x1702=((4.0)*x1700);
IkReal x1703=((12.0)*x1700);
IkReal x1704=((0.42)*x1701);
IkReal x1705=((0.14)*x1701);
IkReal x1706=(r20*sj12*sj17);
IkReal x1707=(cj17*r10*sj16);
IkReal x1708=(cj17*r21*sj12);
IkReal x1709=(cj17*r20*sj16);
IkReal x1710=((0.42)*x1707);
IkReal x1711=((0.012)*x1708);
IkReal x1712=((0.42)*r11*x1696);
IkReal x1713=(x1697*x1698);
IkReal x1714=((0.012)*x1706);
IkReal x1715=((0.14)*x1707);
IkReal x1716=((0.004)*x1708);
IkReal x1717=((0.004)*x1706);
IkReal x1718=(x1698*x1699);
IkReal x1719=((0.14)*r11*x1696);
IkReal x1720=(x1699*x1709);
IkReal x1721=(x1697*x1709);
IkReal x1722=(r21*x1696*x1697);
IkReal x1723=(r21*x1696*x1699);
IkReal x1724=(x1721+x1703+x1710);
IkReal x1725=(x1720+x1702+x1715);
IkReal x1726=(x1723+x1705+x1717+x1716+x1719+x1718);
IkReal x1727=(x1722+x1704+x1713+x1712+x1711+x1714);
j13evalpoly[0]=((((htj13*htj13*htj13*htj13*htj13*htj13)*((x1725+x1695+(((-1.0)*x1726))))))+(((htj13*htj13*htj13*htj13)*((x1724+x1695+(((-1.0)*x1727))))))+(((-1.0)*x1695))+x1725+(((htj13*htj13)*(((((-1.0)*x1695))+x1724+(((-1.0)*x1727))))))+(((-1.0)*x1726)));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1728=((1.0)*sj16);
IkReal x1729=(r21*sj17);
IkReal x1730=(cj13*cj15);
IkReal x1731=(cj17*r20);
IkReal x1732=(cj15*sj13);
IkReal x1733=(cj13*sj15);
IkReal x1734=(cj17*r21);
IkReal x1735=((1.0)*cj16);
IkReal x1736=(r20*sj17);
IkReal x1737=((1.0)*sj13*sj15);
if( IKabs(((((-1.0)*cj13*r22*x1735))+(((-1.0)*cj13*x1728*x1729))+((cj16*x1731*x1732))+((cj13*sj16*x1731))+(((-1.0)*x1729*x1732*x1735))+(((-1.0)*x1736*x1737))+(((-1.0)*x1734*x1737))+((r22*sj16*x1732)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj13*sj16*x1731))+(((-1.0)*x1730*x1731*x1735))+(((-1.0)*r22*x1728*x1730))+(((-1.0)*r22*sj13*x1735))+((cj16*x1729*x1730))+((x1733*x1736))+((x1733*x1734))+(((-1.0)*sj13*x1728*x1729)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj13*r22*x1735))+(((-1.0)*cj13*x1728*x1729))+((cj16*x1731*x1732))+((cj13*sj16*x1731))+(((-1.0)*x1729*x1732*x1735))+(((-1.0)*x1736*x1737))+(((-1.0)*x1734*x1737))+((r22*sj16*x1732))))+IKsqr((((sj13*sj16*x1731))+(((-1.0)*x1730*x1731*x1735))+(((-1.0)*r22*x1728*x1730))+(((-1.0)*r22*sj13*x1735))+((cj16*x1729*x1730))+((x1733*x1736))+((x1733*x1734))+(((-1.0)*sj13*x1728*x1729))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*cj13*r22*x1735))+(((-1.0)*cj13*x1728*x1729))+((cj16*x1731*x1732))+((cj13*sj16*x1731))+(((-1.0)*x1729*x1732*x1735))+(((-1.0)*x1736*x1737))+(((-1.0)*x1734*x1737))+((r22*sj16*x1732))), (((sj13*sj16*x1731))+(((-1.0)*x1730*x1731*x1735))+(((-1.0)*r22*x1728*x1730))+(((-1.0)*r22*sj13*x1735))+((cj16*x1729*x1730))+((x1733*x1736))+((x1733*x1734))+(((-1.0)*sj13*x1728*x1729))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1738=IKcos(j14);
IkReal x1739=IKsin(j14);
IkReal x1740=((1.0)*sj16);
IkReal x1741=(r01*sj17);
IkReal x1742=(cj17*r11);
IkReal x1743=((0.4195)*cj12);
IkReal x1744=(cj17*r10);
IkReal x1745=((1.0)*cj16);
IkReal x1746=(cj15*cj17);
IkReal x1747=((0.035)*sj13);
IkReal x1748=((0.001)*sj17);
IkReal x1749=(sj15*sj17);
IkReal x1750=(r21*sj17);
IkReal x1751=((1.0)*sj12);
IkReal x1752=(cj17*sj16);
IkReal x1753=(cj17*sj15);
IkReal x1754=(cj15*cj16);
IkReal x1755=((1.0)*cj12);
IkReal x1756=(r11*sj17);
IkReal x1757=((0.454)*sj13);
IkReal x1758=((0.001)*cj17);
IkReal x1759=(sj13*x1739);
IkReal x1760=(cj12*x1738);
IkReal x1761=((0.4195)*x1738);
IkReal x1762=(cj13*x1739);
IkReal x1763=(cj13*x1738);
IkReal x1764=((1.0)*sj13*x1738);
evalcond[0]=((((-1.0)*x1762))+(((-1.0)*x1740*x1750))+(((-1.0)*x1764))+(((-1.0)*r22*x1745))+((r20*x1752)));
evalcond[1]=((((-1.0)*x1740*x1741))+((cj13*x1760))+((r00*x1752))+(((-1.0)*r02*x1745))+(((-1.0)*x1755*x1759)));
evalcond[2]=((((-1.0)*r12*x1745))+((sj12*x1763))+(((-1.0)*x1740*x1756))+((sj16*x1744))+(((-1.0)*x1751*x1759)));
evalcond[3]=((((-1.0)*x1763))+x1759+((r21*x1753))+((x1750*x1754))+((r20*x1749))+(((-1.0)*cj15*r22*x1740))+(((-1.0)*r20*x1745*x1746)));
evalcond[4]=((((0.454)*cj13))+(((-1.0)*sj13*x1761))+(((-1.0)*x1739*x1747))+((r21*x1758))+(((-1.0)*pz))+(((-0.4195)*x1762))+((r20*x1748))+(((0.035)*x1763)));
evalcond[5]=((((-1.0)*sj13*x1738*x1755))+(((-1.0)*x1755*x1762))+(((-1.0)*cj15*r02*x1740))+((r01*x1753))+((r00*x1749))+((x1741*x1754))+(((-1.0)*r00*x1745*x1746)));
evalcond[6]=((((-1.0)*sj13*x1738*x1751))+((x1754*x1756))+((sj15*x1742))+(((-1.0)*cj15*r12*x1740))+(((-1.0)*cj15*x1744*x1745))+((r10*x1749))+(((-1.0)*x1751*x1762)));
evalcond[7]=(((cj12*x1757))+((x1743*x1763))+(((0.025)*cj12))+(((-1.0)*px))+(((0.035)*cj12*x1762))+((x1747*x1760))+((r01*x1758))+((r00*x1748))+(((-1.0)*x1743*x1759))+(((0.001)*sj12)));
evalcond[8]=((((0.001)*x1742))+((sj12*x1738*x1747))+(((0.025)*sj12))+(((-1.0)*py))+((sj12*x1757))+((cj13*sj12*x1761))+(((0.035)*sj12*x1762))+(((-0.001)*cj12))+(((-0.4195)*sj12*x1759))+((r10*x1748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1765=((1.0)*cj16);
IkReal x1766=(r20*sj12);
IkReal x1767=((1.0)*sj17);
IkReal x1768=(r21*sj12);
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*x1766*x1767))+(((-1.0)*cj17*x1768)))),IkReal(((((-1.0)*sj17*x1765*x1768))+((r22*sj12*sj16))+((cj16*cj17*x1766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
CheckValue<IkReal> x1770=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj16*x1767))+((cj17*r10*sj16))+(((-1.0)*r12*x1765)))),-1);
if(!x1770.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(x1769.value)+(((1.5707963267949)*(x1770.value))));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1771=IKsin(j15);
IkReal x1772=IKcos(j15);
IkReal x1773=((1.0)*r00);
IkReal x1774=((1.0)*cj17);
IkReal x1775=(sj17*x1772);
IkReal x1776=(cj16*x1771);
IkReal x1777=((1.0)*sj16*x1771);
evalcond[0]=((((-1.0)*r21*x1772*x1774))+((r21*sj17*x1776))+(((-1.0)*r20*x1775))+(((-1.0)*r22*x1777))+(((-1.0)*r20*x1774*x1776)));
evalcond[1]=(((r11*sj17*x1776))+(((-1.0)*r10*x1775))+cj12+(((-1.0)*r10*x1774*x1776))+(((-1.0)*r12*x1777))+(((-1.0)*r11*x1772*x1774)));
evalcond[2]=((((-1.0)*r01*x1772*x1774))+(((-1.0)*cj17*x1773*x1776))+((r01*sj17*x1776))+(((-1.0)*r02*x1777))+(((-1.0)*sj12))+(((-1.0)*x1773*x1775)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x1778=((1.816)*sj12);
IkReal x1779=((1.816)*cj12);
IkReal x1780=(cj12*cj17);
IkReal x1781=((0.012)*r21);
IkReal x1782=(sj16*sj17);
IkReal x1783=(r21*sj12);
IkReal x1784=(cj16*r02);
IkReal x1785=(r20*sj16);
IkReal x1786=(cj12*pz);
IkReal x1787=(pz*sj12);
IkReal x1788=(cj12*r21);
IkReal x1789=(cj16*r12);
IkReal x1790=(cj17*sj12);
IkReal x1791=((12.0)*x1786);
IkReal x1792=((0.42)*x1784);
IkReal x1793=((12.0)*x1787);
IkReal x1794=((0.42)*x1789);
IkReal x1795=(r20*sj12*sj17);
IkReal x1796=((0.42)*x1782);
IkReal x1797=((5.034)*cj16*r22);
IkReal x1798=(cj12*r20*sj17);
IkReal x1799=((0.42)*cj17*sj16);
IkReal x1800=((0.14)*cj17*sj16);
IkReal x1801=((1.678)*cj16*r22);
IkReal x1802=(r00*x1799);
IkReal x1803=(x1780*x1781);
IkReal x1804=(cj12*x1797);
IkReal x1805=(r01*x1796);
IkReal x1806=((0.012)*x1798);
IkReal x1807=(r10*x1799);
IkReal x1808=(x1781*x1790);
IkReal x1809=(r11*x1796);
IkReal x1810=(sj12*x1797);
IkReal x1811=((0.012)*x1795);
IkReal x1812=((5.034)*x1780*x1785);
IkReal x1813=((5.034)*x1782*x1788);
IkReal x1814=((5.034)*x1785*x1790);
IkReal x1815=((5.034)*x1782*x1783);
IkReal x1816=(x1791+x1812+x1802);
IkReal x1817=(x1793+x1814+x1807);
IkReal x1818=(x1792+x1813+x1806+x1805+x1804+x1803);
IkReal x1819=(x1794+x1815+x1810+x1811+x1809+x1808);
j13eval[0]=((IKabs(((((-1.0)*x1818))+x1779+x1816)))+(IKabs(((((-1.0)*x1819))+x1778+x1817)))+(IKabs(((((4.0)*x1786))+(((-0.14)*r01*x1782))+x1779+(((-0.14)*x1784))+(((1.678)*x1780*x1785))+(((-1.678)*x1782*x1788))+(((-1.0)*cj12*x1801))+(((-0.004)*r21*x1780))+((r00*x1800))+(((-0.004)*x1798)))))+(IKabs(((((-0.14)*r11*x1782))+(((-0.004)*cj17*x1783))+(((4.0)*x1787))+x1778+(((-0.14)*x1789))+(((-1.678)*x1782*x1783))+(((-1.0)*sj12*x1801))+(((1.678)*x1785*x1790))+(((-0.004)*x1795))+((r10*x1800)))))+(IKabs(((((-1.0)*x1819))+(((-1.0)*x1778))+x1817)))+(IKabs(((((-1.0)*x1818))+(((-1.0)*x1779))+x1816))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1820=((1.816)*cj12);
IkReal x1821=(cj17*sj16);
IkReal x1822=((1.678)*cj12);
IkReal x1823=(cj16*r22);
IkReal x1824=(cj12*pz);
IkReal x1825=(cj12*r20);
IkReal x1826=(cj16*r02);
IkReal x1827=(sj16*sj17);
IkReal x1828=((5.034)*cj12);
IkReal x1829=((12.0)*x1824);
IkReal x1830=((0.42)*x1826);
IkReal x1831=((4.0)*x1824);
IkReal x1832=((0.14)*x1826);
IkReal x1833=(cj12*cj17*r21);
IkReal x1834=((0.42)*r00*x1821);
IkReal x1835=((0.012)*x1833);
IkReal x1836=(x1823*x1828);
IkReal x1837=((0.42)*r01*x1827);
IkReal x1838=((0.012)*sj17*x1825);
IkReal x1839=((0.14)*r00*x1821);
IkReal x1840=((0.004)*sj17*x1825);
IkReal x1841=(x1822*x1823);
IkReal x1842=((0.14)*r01*x1827);
IkReal x1843=((0.004)*x1833);
IkReal x1844=((5.034)*x1821*x1825);
IkReal x1845=(r21*x1827*x1828);
IkReal x1846=(r20*x1821*x1822);
IkReal x1847=(r21*x1822*x1827);
IkReal x1848=(x1846+x1831+x1839);
IkReal x1849=(x1829+x1844+x1834);
IkReal x1850=(x1843+x1842+x1841+x1840+x1847+x1832);
IkReal x1851=(x1845+x1830+x1836+x1837+x1835+x1838);
op[0]=(x1820+x1848+(((-1.0)*x1850)));
op[1]=0;
op[2]=(x1820+x1849+(((-1.0)*x1851)));
op[3]=0;
op[4]=((((-1.0)*x1820))+x1849+(((-1.0)*x1851)));
op[5]=0;
op[6]=((((-1.0)*x1820))+x1848+(((-1.0)*x1850)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x1852=((1.816)*sj12);
IkReal x1853=(sj16*sj17);
IkReal x1854=((5.034)*sj12);
IkReal x1855=(cj16*r22);
IkReal x1856=((1.678)*sj12);
IkReal x1857=(pz*sj12);
IkReal x1858=(cj16*r12);
IkReal x1859=((4.0)*x1857);
IkReal x1860=((12.0)*x1857);
IkReal x1861=((0.42)*x1858);
IkReal x1862=((0.14)*x1858);
IkReal x1863=(r20*sj12*sj17);
IkReal x1864=(cj17*r10*sj16);
IkReal x1865=(cj17*r21*sj12);
IkReal x1866=(cj17*r20*sj16);
IkReal x1867=((0.42)*x1864);
IkReal x1868=((0.012)*x1865);
IkReal x1869=((0.42)*r11*x1853);
IkReal x1870=(x1854*x1855);
IkReal x1871=((0.012)*x1863);
IkReal x1872=((0.14)*x1864);
IkReal x1873=((0.004)*x1865);
IkReal x1874=((0.004)*x1863);
IkReal x1875=(x1855*x1856);
IkReal x1876=((0.14)*r11*x1853);
IkReal x1877=(x1856*x1866);
IkReal x1878=(x1854*x1866);
IkReal x1879=(r21*x1853*x1854);
IkReal x1880=(r21*x1853*x1856);
IkReal x1881=(x1860+x1867+x1878);
IkReal x1882=(x1859+x1877+x1872);
IkReal x1883=(x1862+x1876+x1874+x1875+x1873+x1880);
IkReal x1884=(x1861+x1869+x1868+x1870+x1871+x1879);
j13evalpoly[0]=((((htj13*htj13*htj13*htj13)*((x1852+x1881+(((-1.0)*x1884))))))+(((htj13*htj13*htj13*htj13*htj13*htj13)*((x1852+x1882+(((-1.0)*x1883))))))+x1882+(((-1.0)*x1883))+(((htj13*htj13)*((x1881+(((-1.0)*x1884))+(((-1.0)*x1852))))))+(((-1.0)*x1852)));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x1885=((1.0)*sj16);
IkReal x1886=(r21*sj17);
IkReal x1887=(cj13*cj15);
IkReal x1888=(cj17*r20);
IkReal x1889=(cj15*sj13);
IkReal x1890=(cj13*sj15);
IkReal x1891=(cj17*r21);
IkReal x1892=((1.0)*cj16);
IkReal x1893=(r20*sj17);
IkReal x1894=((1.0)*sj13*sj15);
if( IKabs(((((-1.0)*x1893*x1894))+((cj13*sj16*x1888))+(((-1.0)*cj13*r22*x1892))+((r22*sj16*x1889))+(((-1.0)*x1886*x1889*x1892))+((cj16*x1888*x1889))+(((-1.0)*x1891*x1894))+(((-1.0)*cj13*x1885*x1886)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj16*x1886*x1887))+(((-1.0)*sj13*x1885*x1886))+(((-1.0)*x1887*x1888*x1892))+(((-1.0)*r22*x1885*x1887))+((sj13*sj16*x1888))+(((-1.0)*r22*sj13*x1892))+((x1890*x1891))+((x1890*x1893)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1893*x1894))+((cj13*sj16*x1888))+(((-1.0)*cj13*r22*x1892))+((r22*sj16*x1889))+(((-1.0)*x1886*x1889*x1892))+((cj16*x1888*x1889))+(((-1.0)*x1891*x1894))+(((-1.0)*cj13*x1885*x1886))))+IKsqr((((cj16*x1886*x1887))+(((-1.0)*sj13*x1885*x1886))+(((-1.0)*x1887*x1888*x1892))+(((-1.0)*r22*x1885*x1887))+((sj13*sj16*x1888))+(((-1.0)*r22*sj13*x1892))+((x1890*x1891))+((x1890*x1893))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2(((((-1.0)*x1893*x1894))+((cj13*sj16*x1888))+(((-1.0)*cj13*r22*x1892))+((r22*sj16*x1889))+(((-1.0)*x1886*x1889*x1892))+((cj16*x1888*x1889))+(((-1.0)*x1891*x1894))+(((-1.0)*cj13*x1885*x1886))), (((cj16*x1886*x1887))+(((-1.0)*sj13*x1885*x1886))+(((-1.0)*x1887*x1888*x1892))+(((-1.0)*r22*x1885*x1887))+((sj13*sj16*x1888))+(((-1.0)*r22*sj13*x1892))+((x1890*x1891))+((x1890*x1893))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x1895=IKcos(j14);
IkReal x1896=IKsin(j14);
IkReal x1897=((1.0)*sj16);
IkReal x1898=(r01*sj17);
IkReal x1899=(cj17*r11);
IkReal x1900=((0.4195)*cj12);
IkReal x1901=(cj17*r10);
IkReal x1902=((1.0)*cj16);
IkReal x1903=(cj15*cj17);
IkReal x1904=((0.035)*sj13);
IkReal x1905=((0.001)*sj17);
IkReal x1906=(sj15*sj17);
IkReal x1907=(r21*sj17);
IkReal x1908=((1.0)*sj12);
IkReal x1909=(cj17*sj16);
IkReal x1910=(cj17*sj15);
IkReal x1911=(cj15*cj16);
IkReal x1912=((1.0)*cj12);
IkReal x1913=(r11*sj17);
IkReal x1914=((0.454)*sj13);
IkReal x1915=((0.001)*cj17);
IkReal x1916=(sj13*x1896);
IkReal x1917=(cj12*x1895);
IkReal x1918=((0.4195)*x1895);
IkReal x1919=(cj13*x1896);
IkReal x1920=(cj13*x1895);
IkReal x1921=((1.0)*sj13*x1895);
evalcond[0]=((((-1.0)*r22*x1902))+(((-1.0)*x1921))+(((-1.0)*x1919))+((r20*x1909))+(((-1.0)*x1897*x1907)));
evalcond[1]=((((-1.0)*x1897*x1898))+((r00*x1909))+((cj13*x1917))+(((-1.0)*x1912*x1916))+(((-1.0)*r02*x1902)));
evalcond[2]=(((sj16*x1901))+(((-1.0)*r12*x1902))+(((-1.0)*x1897*x1913))+(((-1.0)*x1908*x1916))+((sj12*x1920)));
evalcond[3]=((((-1.0)*cj15*r22*x1897))+((x1907*x1911))+(((-1.0)*x1920))+x1916+((r21*x1910))+((r20*x1906))+(((-1.0)*r20*x1902*x1903)));
evalcond[4]=((((-1.0)*sj13*x1918))+(((0.454)*cj13))+(((-1.0)*pz))+((r21*x1915))+(((-1.0)*x1896*x1904))+((r20*x1905))+(((-0.4195)*x1919))+(((0.035)*x1920)));
evalcond[5]=((((-1.0)*r00*x1902*x1903))+((r00*x1906))+((r01*x1910))+(((-1.0)*sj13*x1895*x1912))+(((-1.0)*cj15*r02*x1897))+((x1898*x1911))+(((-1.0)*x1912*x1919)));
evalcond[6]=(((sj15*x1899))+(((-1.0)*cj15*r12*x1897))+((x1911*x1913))+(((-1.0)*sj13*x1895*x1908))+(((-1.0)*cj15*x1901*x1902))+((r10*x1906))+(((-1.0)*x1908*x1919)));
evalcond[7]=(((x1904*x1917))+((cj12*x1914))+(((0.025)*cj12))+((r00*x1905))+(((-1.0)*x1900*x1916))+((r01*x1915))+(((-1.0)*px))+((x1900*x1920))+(((0.035)*cj12*x1919))+(((0.001)*sj12)));
evalcond[8]=((((-0.4195)*sj12*x1916))+((sj12*x1914))+(((0.001)*x1899))+(((0.025)*sj12))+((sj12*x1895*x1904))+(((-1.0)*py))+(((0.035)*sj12*x1919))+((cj13*sj12*x1918))+(((-0.001)*cj12))+((r10*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j15array[1], cj15array[1], sj15array[1];
bool j15valid[1]={false};
_nj15 = 1;
IkReal x1922=((1.0)*sj17);
IkReal x1923=(cj12*r20);
IkReal x1924=(cj12*r21);
CheckValue<IkReal> x1925=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj16*r02))+((cj17*r00*sj16))+(((-1.0)*r01*sj16*x1922)))),-1);
if(!x1925.valid){
continue;
}
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((((-1.0)*cj17*x1924))+(((-1.0)*x1922*x1923)))),IkReal((((cj12*r22*sj16))+(((-1.0)*cj16*x1922*x1924))+((cj16*cj17*x1923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
j15array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1925.value)))+(x1926.value));
sj15array[0]=IKsin(j15array[0]);
cj15array[0]=IKcos(j15array[0]);
if( j15array[0] > IKPI )
{
    j15array[0]-=IK2PI;
}
else if( j15array[0] < -IKPI )
{    j15array[0]+=IK2PI;
}
j15valid[0] = true;
for(int ij15 = 0; ij15 < 1; ++ij15)
{
if( !j15valid[ij15] )
{
    continue;
}
_ij15[0] = ij15; _ij15[1] = -1;
for(int iij15 = ij15+1; iij15 < 1; ++iij15)
{
if( j15valid[iij15] && IKabs(cj15array[ij15]-cj15array[iij15]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij15]-sj15array[iij15]) < IKFAST_SOLUTION_THRESH )
{
    j15valid[iij15]=false; _ij15[1] = iij15; break; 
}
}
j15 = j15array[ij15]; cj15 = cj15array[ij15]; sj15 = sj15array[ij15];
{
IkReal evalcond[3];
IkReal x1927=IKsin(j15);
IkReal x1928=IKcos(j15);
IkReal x1929=((1.0)*r00);
IkReal x1930=((1.0)*cj17);
IkReal x1931=(sj17*x1928);
IkReal x1932=(cj16*x1927);
IkReal x1933=((1.0)*sj16*x1927);
evalcond[0]=(((r21*sj17*x1932))+(((-1.0)*r21*x1928*x1930))+(((-1.0)*r22*x1933))+(((-1.0)*r20*x1930*x1932))+(((-1.0)*r20*x1931)));
evalcond[1]=((((-1.0)*r10*x1930*x1932))+(((-1.0)*r10*x1931))+(((-1.0)*r12*x1933))+cj12+(((-1.0)*r11*x1928*x1930))+((r11*sj17*x1932)));
evalcond[2]=((((-1.0)*r01*x1928*x1930))+(((-1.0)*cj17*x1929*x1932))+((r01*sj17*x1932))+(((-1.0)*x1929*x1931))+(((-1.0)*sj12))+(((-1.0)*r02*x1933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j13eval[1];
IkReal x1934=((1.816)*sj12);
IkReal x1935=((1.816)*cj12);
IkReal x1936=(cj12*cj17);
IkReal x1937=((0.012)*r21);
IkReal x1938=(sj16*sj17);
IkReal x1939=(r21*sj12);
IkReal x1940=(cj16*r02);
IkReal x1941=(r20*sj16);
IkReal x1942=(cj12*pz);
IkReal x1943=(pz*sj12);
IkReal x1944=(cj12*r21);
IkReal x1945=(cj16*r12);
IkReal x1946=(cj17*sj12);
IkReal x1947=((12.0)*x1942);
IkReal x1948=((0.42)*x1940);
IkReal x1949=((12.0)*x1943);
IkReal x1950=((0.42)*x1945);
IkReal x1951=(r20*sj12*sj17);
IkReal x1952=((0.42)*x1938);
IkReal x1953=((5.034)*cj16*r22);
IkReal x1954=(cj12*r20*sj17);
IkReal x1955=((0.42)*cj17*sj16);
IkReal x1956=((0.14)*cj17*sj16);
IkReal x1957=((1.678)*cj16*r22);
IkReal x1958=(r00*x1955);
IkReal x1959=(x1936*x1937);
IkReal x1960=(cj12*x1953);
IkReal x1961=(r01*x1952);
IkReal x1962=((0.012)*x1954);
IkReal x1963=(r10*x1955);
IkReal x1964=(x1937*x1946);
IkReal x1965=(r11*x1952);
IkReal x1966=(sj12*x1953);
IkReal x1967=((0.012)*x1951);
IkReal x1968=((5.034)*x1936*x1941);
IkReal x1969=((5.034)*x1938*x1944);
IkReal x1970=((5.034)*x1941*x1946);
IkReal x1971=((5.034)*x1938*x1939);
IkReal x1972=(x1968+x1947+x1958);
IkReal x1973=(x1963+x1970+x1949);
IkReal x1974=(x1969+x1960+x1961+x1962+x1948+x1959);
IkReal x1975=(x1964+x1965+x1966+x1967+x1971+x1950);
j13eval[0]=((IKabs(((((-0.14)*r11*x1938))+(((-0.14)*x1945))+((r10*x1956))+(((4.0)*x1943))+(((-0.004)*cj17*x1939))+x1934+(((-1.0)*sj12*x1957))+(((-1.678)*x1938*x1939))+(((-0.004)*x1951))+(((1.678)*x1941*x1946)))))+(IKabs(((((-1.0)*x1974))+x1972+(((-1.0)*x1935)))))+(IKabs(((((-1.0)*x1975))+x1973+(((-1.0)*x1934)))))+(IKabs(((((-1.0)*x1974))+x1935+x1972)))+(IKabs(((((-1.0)*x1975))+x1934+x1973)))+(IKabs(((((-0.004)*r21*x1936))+(((-1.0)*cj12*x1957))+(((-0.14)*x1940))+(((-0.14)*r01*x1938))+(((4.0)*x1942))+x1935+((r00*x1956))+(((1.678)*x1936*x1941))+(((-1.678)*x1938*x1944))+(((-0.004)*x1954))))));
if( IKabs(j13eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j13, j14]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j13evalpoly[1];
IkReal x1976=((1.816)*cj12);
IkReal x1977=(cj17*sj16);
IkReal x1978=((1.678)*cj12);
IkReal x1979=(cj16*r22);
IkReal x1980=(cj12*pz);
IkReal x1981=(cj12*r20);
IkReal x1982=(cj16*r02);
IkReal x1983=(sj16*sj17);
IkReal x1984=((5.034)*cj12);
IkReal x1985=((12.0)*x1980);
IkReal x1986=((0.42)*x1982);
IkReal x1987=((4.0)*x1980);
IkReal x1988=((0.14)*x1982);
IkReal x1989=(cj12*cj17*r21);
IkReal x1990=((0.42)*r00*x1977);
IkReal x1991=((0.012)*x1989);
IkReal x1992=(x1979*x1984);
IkReal x1993=((0.42)*r01*x1983);
IkReal x1994=((0.012)*sj17*x1981);
IkReal x1995=((0.14)*r00*x1977);
IkReal x1996=((0.004)*sj17*x1981);
IkReal x1997=(x1978*x1979);
IkReal x1998=((0.14)*r01*x1983);
IkReal x1999=((0.004)*x1989);
IkReal x2000=((5.034)*x1977*x1981);
IkReal x2001=(r21*x1983*x1984);
IkReal x2002=(r20*x1977*x1978);
IkReal x2003=(r21*x1978*x1983);
IkReal x2004=(x2002+x1987+x1995);
IkReal x2005=(x2000+x1985+x1990);
IkReal x2006=(x2003+x1988+x1997+x1996+x1999+x1998);
IkReal x2007=(x2001+x1986+x1991+x1993+x1992+x1994);
op[0]=(x2004+x1976+(((-1.0)*x2006)));
op[1]=0;
op[2]=(x2005+x1976+(((-1.0)*x2007)));
op[3]=0;
op[4]=(x2005+(((-1.0)*x1976))+(((-1.0)*x2007)));
op[5]=0;
op[6]=(x2004+(((-1.0)*x1976))+(((-1.0)*x2006)));
polyroots6(op,zeror,numroots);
IkReal j13array[6], cj13array[6], sj13array[6], tempj13array[1];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ++ij13)
{
IkReal htj13 = zeror[ij13];
tempj13array[0]=((2.0)*(atan(htj13)));
for(int kj13 = 0; kj13 < 1; ++kj13)
{
j13array[numsolutions] = tempj13array[kj13];
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
sj13array[numsolutions] = IKsin(j13array[numsolutions]);
cj13array[numsolutions] = IKcos(j13array[numsolutions]);
numsolutions++;
}
}
bool j13valid[6]={true,true,true,true,true,true};
_nj13 = 6;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
htj13 = IKtan(j13/2);

IkReal x2008=((1.816)*sj12);
IkReal x2009=(sj16*sj17);
IkReal x2010=((5.034)*sj12);
IkReal x2011=(cj16*r22);
IkReal x2012=((1.678)*sj12);
IkReal x2013=(pz*sj12);
IkReal x2014=(cj16*r12);
IkReal x2015=((4.0)*x2013);
IkReal x2016=((12.0)*x2013);
IkReal x2017=((0.42)*x2014);
IkReal x2018=((0.14)*x2014);
IkReal x2019=(r20*sj12*sj17);
IkReal x2020=(cj17*r10*sj16);
IkReal x2021=(cj17*r21*sj12);
IkReal x2022=(cj17*r20*sj16);
IkReal x2023=((0.42)*x2020);
IkReal x2024=((0.012)*x2021);
IkReal x2025=((0.42)*r11*x2009);
IkReal x2026=(x2010*x2011);
IkReal x2027=((0.012)*x2019);
IkReal x2028=((0.14)*x2020);
IkReal x2029=((0.004)*x2021);
IkReal x2030=((0.004)*x2019);
IkReal x2031=(x2011*x2012);
IkReal x2032=((0.14)*r11*x2009);
IkReal x2033=(x2012*x2022);
IkReal x2034=(x2010*x2022);
IkReal x2035=(r21*x2009*x2010);
IkReal x2036=(r21*x2009*x2012);
IkReal x2037=(x2023+x2034+x2016);
IkReal x2038=(x2028+x2033+x2015);
IkReal x2039=(x2029+x2036+x2032+x2031+x2030+x2018);
IkReal x2040=(x2024+x2025+x2026+x2027+x2035+x2017);
j13evalpoly[0]=((((htj13*htj13*htj13*htj13*htj13*htj13)*((x2038+x2008+(((-1.0)*x2039))))))+(((htj13*htj13*htj13*htj13)*(((((-1.0)*x2040))+x2037+x2008))))+x2038+(((-1.0)*x2008))+(((htj13*htj13)*(((((-1.0)*x2040))+x2037+(((-1.0)*x2008))))))+(((-1.0)*x2039)));
if( IKabs(j13evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
{
IkReal j14array[1], cj14array[1], sj14array[1];
bool j14valid[1]={false};
_nj14 = 1;
IkReal x2041=((1.0)*sj16);
IkReal x2042=(r21*sj17);
IkReal x2043=(cj13*cj15);
IkReal x2044=(cj17*r20);
IkReal x2045=(cj15*sj13);
IkReal x2046=(cj13*sj15);
IkReal x2047=(cj17*r21);
IkReal x2048=((1.0)*cj16);
IkReal x2049=(r20*sj17);
IkReal x2050=((1.0)*sj13*sj15);
if( IKabs((((r22*sj16*x2045))+((cj13*sj16*x2044))+((cj16*x2044*x2045))+(((-1.0)*x2049*x2050))+(((-1.0)*cj13*r22*x2048))+(((-1.0)*x2047*x2050))+(((-1.0)*cj13*x2041*x2042))+(((-1.0)*x2042*x2045*x2048)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*sj13*x2048))+(((-1.0)*x2043*x2044*x2048))+(((-1.0)*r22*x2041*x2043))+(((-1.0)*sj13*x2041*x2042))+((x2046*x2049))+((x2046*x2047))+((sj13*sj16*x2044))+((cj16*x2042*x2043)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r22*sj16*x2045))+((cj13*sj16*x2044))+((cj16*x2044*x2045))+(((-1.0)*x2049*x2050))+(((-1.0)*cj13*r22*x2048))+(((-1.0)*x2047*x2050))+(((-1.0)*cj13*x2041*x2042))+(((-1.0)*x2042*x2045*x2048))))+IKsqr(((((-1.0)*r22*sj13*x2048))+(((-1.0)*x2043*x2044*x2048))+(((-1.0)*r22*x2041*x2043))+(((-1.0)*sj13*x2041*x2042))+((x2046*x2049))+((x2046*x2047))+((sj13*sj16*x2044))+((cj16*x2042*x2043))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j14array[0]=IKatan2((((r22*sj16*x2045))+((cj13*sj16*x2044))+((cj16*x2044*x2045))+(((-1.0)*x2049*x2050))+(((-1.0)*cj13*r22*x2048))+(((-1.0)*x2047*x2050))+(((-1.0)*cj13*x2041*x2042))+(((-1.0)*x2042*x2045*x2048))), ((((-1.0)*r22*sj13*x2048))+(((-1.0)*x2043*x2044*x2048))+(((-1.0)*r22*x2041*x2043))+(((-1.0)*sj13*x2041*x2042))+((x2046*x2049))+((x2046*x2047))+((sj13*sj16*x2044))+((cj16*x2042*x2043))));
sj14array[0]=IKsin(j14array[0]);
cj14array[0]=IKcos(j14array[0]);
if( j14array[0] > IKPI )
{
    j14array[0]-=IK2PI;
}
else if( j14array[0] < -IKPI )
{    j14array[0]+=IK2PI;
}
j14valid[0] = true;
for(int ij14 = 0; ij14 < 1; ++ij14)
{
if( !j14valid[ij14] )
{
    continue;
}
_ij14[0] = ij14; _ij14[1] = -1;
for(int iij14 = ij14+1; iij14 < 1; ++iij14)
{
if( j14valid[iij14] && IKabs(cj14array[ij14]-cj14array[iij14]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij14]-sj14array[iij14]) < IKFAST_SOLUTION_THRESH )
{
    j14valid[iij14]=false; _ij14[1] = iij14; break; 
}
}
j14 = j14array[ij14]; cj14 = cj14array[ij14]; sj14 = sj14array[ij14];
{
IkReal evalcond[9];
IkReal x2051=IKcos(j14);
IkReal x2052=IKsin(j14);
IkReal x2053=((1.0)*sj16);
IkReal x2054=(r01*sj17);
IkReal x2055=(cj17*r11);
IkReal x2056=((0.4195)*cj12);
IkReal x2057=(cj17*r10);
IkReal x2058=((1.0)*cj16);
IkReal x2059=(cj15*cj17);
IkReal x2060=((0.035)*sj13);
IkReal x2061=((0.001)*sj17);
IkReal x2062=(sj15*sj17);
IkReal x2063=(r21*sj17);
IkReal x2064=((1.0)*sj12);
IkReal x2065=(cj17*sj16);
IkReal x2066=(cj17*sj15);
IkReal x2067=(cj15*cj16);
IkReal x2068=((1.0)*cj12);
IkReal x2069=(r11*sj17);
IkReal x2070=((0.454)*sj13);
IkReal x2071=((0.001)*cj17);
IkReal x2072=(sj13*x2052);
IkReal x2073=(cj12*x2051);
IkReal x2074=((0.4195)*x2051);
IkReal x2075=(cj13*x2052);
IkReal x2076=(cj13*x2051);
IkReal x2077=((1.0)*sj13*x2051);
evalcond[0]=((((-1.0)*r22*x2058))+(((-1.0)*x2053*x2063))+(((-1.0)*x2077))+((r20*x2065))+(((-1.0)*x2075)));
evalcond[1]=(((cj13*x2073))+(((-1.0)*r02*x2058))+((r00*x2065))+(((-1.0)*x2053*x2054))+(((-1.0)*x2068*x2072)));
evalcond[2]=((((-1.0)*x2064*x2072))+((sj12*x2076))+(((-1.0)*r12*x2058))+(((-1.0)*x2053*x2069))+((sj16*x2057)));
evalcond[3]=(((r21*x2066))+x2072+(((-1.0)*cj15*r22*x2053))+((r20*x2062))+(((-1.0)*x2076))+((x2063*x2067))+(((-1.0)*r20*x2058*x2059)));
evalcond[4]=((((-0.4195)*x2075))+(((-1.0)*sj13*x2074))+(((0.454)*cj13))+(((-1.0)*x2052*x2060))+((r20*x2061))+(((-1.0)*pz))+(((0.035)*x2076))+((r21*x2071)));
evalcond[5]=(((x2054*x2067))+(((-1.0)*sj13*x2051*x2068))+(((-1.0)*r00*x2058*x2059))+((r00*x2062))+((r01*x2066))+(((-1.0)*cj15*r02*x2053))+(((-1.0)*x2068*x2075)));
evalcond[6]=(((x2067*x2069))+(((-1.0)*x2064*x2075))+(((-1.0)*sj13*x2051*x2064))+((r10*x2062))+(((-1.0)*cj15*r12*x2053))+(((-1.0)*cj15*x2057*x2058))+((sj15*x2055)));
evalcond[7]=((((0.035)*cj12*x2075))+((cj12*x2070))+(((0.025)*cj12))+((x2056*x2076))+(((-1.0)*px))+((x2060*x2073))+((r01*x2071))+((r00*x2061))+(((-1.0)*x2056*x2072))+(((0.001)*sj12)));
evalcond[8]=(((cj13*sj12*x2074))+((sj12*x2070))+(((0.035)*sj12*x2075))+(((0.025)*sj12))+(((-1.0)*py))+(((-0.4195)*sj12*x2072))+((r10*x2061))+(((-0.001)*cj12))+(((0.001)*x2055))+((sj12*x2051*x2060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j12;
vinfos[0].indices[0] = _ij12[0];
vinfos[0].indices[1] = _ij12[1];
vinfos[0].maxsolutions = _nj12;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j13;
vinfos[1].indices[0] = _ij13[0];
vinfos[1].indices[1] = _ij13[1];
vinfos[1].maxsolutions = _nj13;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j14;
vinfos[2].indices[0] = _ij14[0];
vinfos[2].indices[1] = _ij14[1];
vinfos[2].maxsolutions = _nj14;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j15;
vinfos[3].indices[0] = _ij15[0];
vinfos[3].indices[1] = _ij15[1];
vinfos[3].maxsolutions = _nj15;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j16;
vinfos[4].indices[0] = _ij16[0];
vinfos[4].indices[1] = _ij16[1];
vinfos[4].maxsolutions = _nj16;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j17;
vinfos[5].indices[0] = _ij17[0];
vinfos[5].indices[1] = _ij17[1];
vinfos[5].maxsolutions = _nj17;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "71e1c993d1de6b94c4acc07215f7fcc4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
