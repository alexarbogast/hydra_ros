/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-01-17 08:28:17.402545
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61;
x0=IKcos(j[0]);
x1=IKsin(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[1]);
x4=IKcos(j[2]);
x5=IKcos(j[4]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKsin(j[3]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((1.0)*x5);
x13=((1.0)*x6);
x14=((0.18613)*x0);
x15=((0.159)*x5);
x16=((0.001)*x6);
x17=((0.454)*x1);
x18=((0.035)*x9);
x19=((1.0)*x9);
x20=((0.159)*x6);
x21=((1.0)*x7);
x22=((0.4195)*x9);
x23=((0.4195)*x0);
x24=((0.001)*x9);
x25=((1.0)*x0);
x26=((0.001)*x0);
x27=((0.18613)*x9);
x28=((0.18613)*x6);
x29=((0.159)*x7);
x30=(x1*x2);
x31=(x3*x4);
x32=(x10*x8);
x33=(x2*x3);
x34=(x1*x4);
x35=(x6*x7);
x36=(x19*x8);
x37=((1.0)*x31);
x38=(x0*x34);
x39=(x33+x34);
x40=((((-1.0)*x37))+x30);
x41=((((-1.0)*x30))+x37);
x42=(x39*x7);
x43=(x40*x6);
x44=((((-1.0)*x25*x31))+((x0*x30)));
x45=(((x30*x9))+(((-1.0)*x19*x31)));
x46=(x43*x5);
x47=(x25*(((((-1.0)*x34))+(((-1.0)*x33)))));
x48=(x25*((x33+x34)));
x49=(x19*(((((-1.0)*x34))+(((-1.0)*x33)))));
x50=(x19*((x33+x34)));
x51=(x44*x7);
x52=(x45*x7);
x53=(x49*x6);
x54=(x50*x8);
x55=(x48*x8);
x56=(x55+(((-1.0)*x13*x9)));
x57=((((-1.0)*x36))+((x47*x6)));
x58=(((x0*x8))+x53);
x59=(((x0*x6))+x54);
x60=(x5*x58);
x61=(x5*x57);
eerot[0]=(((x44*x5))+((x7*((x36+(((-1.0)*x13*x47)))))));
eerot[1]=(((x11*x56))+((x10*(((((-1.0)*x12*x57))+(((-1.0)*x21*x44)))))));
eerot[2]=(((x11*((x51+x61))))+((x10*x56)));
IkReal x62=((1.0)*x9);
IkReal x63=((1.0)*x30);
eetrans[0]=((((-1.0)*x16*x62))+(((0.025)*x0))+((x0*x17))+((x7*((((x28*x47))+(((-0.18613)*x8*x9))))))+((x23*x31))+((x8*((((x26*x33))+((x26*x34))))))+((x5*(((((-1.0)*x14*x63))+((x14*x31))))))+(((0.035)*x38))+x24+(((-1.0)*x23*x63))+((x11*((((x29*x44))+((x15*x57))))))+(((0.035)*x0*x33))+((x10*(((((-1.0)*x20*x62))+(((0.159)*x55)))))));
eerot[3]=(((x7*(((((-1.0)*x25*x8))+(((-1.0)*x13*x49))))))+((x45*x5)));
eerot[4]=(((x11*x59))+((x10*(((((-1.0)*x12*x58))+(((-1.0)*x21*x45)))))));
eerot[5]=(((x11*((x52+x60))))+((x10*x59)));
IkReal x64=((1.0)*x30);
eetrans[1]=(((x5*((((x27*x31))+(((-1.0)*x27*x64))))))+((x11*((((x29*x45))+((x15*x58))))))+(((0.025)*x9))+((x0*x16))+((x18*x34))+((x18*x33))+(((-1.0)*x26))+((x22*x31))+((x7*((((x28*x49))+((x14*x8))))))+((x17*x9))+((x10*((((x0*x20))+(((0.159)*x54))))))+(((-1.0)*x22*x64))+((x8*((((x24*x34))+((x24*x33)))))));
eerot[6]=(((x35*x41))+((x39*x5)));
eerot[7]=(((x11*x41*x8))+((x10*(((((-1.0)*x12*x43))+(((-1.0)*x21*x39)))))));
eerot[8]=(((x32*x41))+((x11*((x46+x42)))));
eetrans[2]=((0.45)+((x11*((((x29*x39))+((x15*x43))))))+(((-0.035)*x30))+((x35*(((((0.18613)*x30))+(((-0.18613)*x31))))))+(((-0.4195)*x34))+(((-0.4195)*x33))+((x5*(((((-0.18613)*x33))+(((-0.18613)*x34))))))+((x8*(((((-0.001)*x30))+(((0.001)*x31))))))+(((0.035)*x31))+(((0.454)*x3))+((x32*(((((-0.159)*x30))+(((0.159)*x31)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r02;
new_r01=r01;
new_r02=((-1.0)*r00);
new_px=((((-0.159)*r02))+px+(((0.18613)*r00)));
new_r10=r12;
new_r11=r11;
new_r12=((-1.0)*r10);
new_py=((((-0.159)*r12))+(((0.18613)*r10))+py);
new_r20=r22;
new_r21=r21;
new_r22=((-1.0)*r20);
new_pz=((-0.45)+(((-0.159)*r22))+pz+(((0.18613)*r20)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*px);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x67))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=((((-1.0)*r10*x65))+((py*r00)));
rxp1_0=((((-1.0)*r21*x67))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x65))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x67)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x66)));
rxp2_2=((((-1.0)*r12*x65))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x68=((0.001)*r20);
IkReal x69=((0.001)*r02);
IkReal x70=((1.0)*rxp2_2);
IkReal x71=((0.002)*r21);
IkReal x72=((0.839)*npz);
IkReal x73=((0.00175)*r22);
IkReal x74=((7.0e-5)*r10);
IkReal x75=((5.0e-5)*r01);
IkReal x76=((0.05)*px);
IkReal x77=((0.020975)*r02);
IkReal x78=((0.07)*rxp2_1);
IkReal x79=((0.002)*npy);
IkReal x80=((1.0)*pp);
IkReal x81=((7.0e-5)*r22);
IkReal x82=((0.07)*rxp2_0);
IkReal x83=((5.0e-5)*r11);
IkReal x84=((0.05)*py);
IkReal x85=((7.0e-5)*r00);
IkReal x86=((0.020975)*r12);
IkReal x87=((0.004)*npx);
IkReal x88=((0.0001)*r00);
IkReal x89=((0.00014)*r11);
IkReal x90=((2.0)*rxp0_2);
IkReal x91=((0.002)*r00);
IkReal x92=((0.002)*r22);
IkReal x93=((0.002)*r10);
IkReal x94=((0.004)*r01);
IkReal x95=((4.0)*rxp1_2);
IkReal x96=((0.0035)*r20);
IkReal x97=((1.678)*npx);
IkReal x98=((0.00014)*r12);
IkReal x99=((0.14)*rxp0_1);
IkReal x100=((0.04195)*r00);
IkReal x101=((0.00014)*r20);
IkReal x102=((0.00014)*r02);
IkReal x103=((0.14)*rxp0_0);
IkReal x104=((0.04195)*r10);
IkReal x105=((0.28)*rxp1_0);
IkReal x106=((0.0839)*r11);
IkReal x107=((0.00028)*r21);
IkReal x108=((3.356)*npy);
IkReal x109=((0.007)*r21);
IkReal x110=((0.28)*rxp1_1);
IkReal x111=((0.0839)*r01);
IkReal x112=((0.001)*r12);
IkReal x113=((0.00014)*r01);
IkReal x114=((0.0001)*r10);
IkReal x115=((-0.001)*r12);
IkReal x116=((-0.004)*r11);
IkReal x117=((-0.002)*r10);
IkReal x118=((-0.002)*r21);
IkReal x119=((((-1.0)*x114))+x113);
IkReal x120=((0.02828575)+x74);
IkReal x121=((5.0e-5)+x84);
IkReal x122=((-5.0e-5)+x84);
IkReal x123=((0.02828575)+x75);
IkReal x124=((((-1.0)*x113))+(((-1.0)*x114)));
IkReal x125=(x68+x69);
IkReal x126=(x89+x87);
IkReal x127=(x90+x92);
IkReal x128=(x104+x102);
IkReal x129=(x77+x78);
IkReal x130=(x75+x74);
IkReal x131=(x100+x99);
IkReal x132=(x76+x80);
IkReal x133=(x82+x81);
IkReal x134=(x82+x85);
IkReal x135=(x81+x86);
IkReal x136=(x83+x85);
IkReal x137=(x108+x109);
IkReal x138=(x111+x110);
IkReal x139=(x97+x96);
IkReal x140=(x101+x103);
IkReal x141=(x79+x80);
IkReal x142=((0.02828575)+x73+x72);
IkReal x143=(x75+x73+x72);
IkReal x144=(x74+x73+x72);
IkReal x145=(x142+x79);
IkReal x146=(x131+x139);
op[0]=((((-1.0)*x70))+(((-1.0)*x125)));
op[1]=x115;
op[2]=x71;
op[3]=0;
op[4]=((((-1.0)*x70))+x68+(((-1.0)*x69)));
op[5]=x115;
op[6]=x115;
op[7]=((((-1.0)*x70))+x69+(((-1.0)*x68)));
op[8]=0;
op[9]=x71;
op[10]=x115;
op[11]=((((-1.0)*x70))+x125);
op[12]=((((-1.0)*x129))+x145+(((-1.0)*x130))+x76+(((-1.0)*x80)));
op[13]=(x133+x122+x85+(((-1.0)*x86))+(((-1.0)*x83)));
op[14]=(x126+(((-1.0)*x88)));
op[15]=x124;
op[16]=((((-1.0)*x141))+(((-1.0)*x129))+x143+x120+x76);
op[17]=(x133+x122+x83+(((-1.0)*x86))+(((-1.0)*x85)));
op[18]=(x134+x121+(((-1.0)*x135))+(((-1.0)*x83)));
op[19]=(x143+x120+x129+(((-1.0)*x132))+x79);
op[20]=x124;
op[21]=(x88+x87+(((-1.0)*x89)));
op[22]=(x121+(((-1.0)*x135))+x82+x83+(((-1.0)*x85)));
op[23]=((((-1.0)*x79))+x142+x129+(((-1.0)*x132))+(((-1.0)*x130)));
op[24]=(x91+x90+(((-1.0)*x92)));
op[25]=x93;
op[26]=((((-1.0)*x94))+(((-1.0)*x95)));
op[27]=x116;
op[28]=((((-1.0)*x127))+(((-1.0)*x91)));
op[29]=x117;
op[30]=x93;
op[31]=(x90+(((-1.0)*x91))+(((-1.0)*x92)));
op[32]=x116;
op[33]=(x94+(((-1.0)*x95)));
op[34]=x117;
op[35]=((((-1.0)*x127))+x91);
op[36]=(x131+(((-1.0)*x139))+(((-1.0)*x98)));
op[37]=((((-1.0)*x140))+x128);
op[38]=(x137+(((-1.0)*x138)));
op[39]=((((-1.0)*x106))+x105+x107);
op[40]=(x139+(((-1.0)*x131))+(((-1.0)*x98)));
op[41]=((((-1.0)*x104))+x140+x102);
op[42]=((((-1.0)*x103))+x128+x101);
op[43]=((((-1.0)*x146))+x98);
op[44]=((((-1.0)*x107))+(((-1.0)*x106))+x105);
op[45]=(x137+x138);
op[46]=((((-1.0)*x101))+(((-1.0)*x104))+x102+x103);
op[47]=(x146+x98);
op[48]=(rxp2_2+x125);
op[49]=x112;
op[50]=x118;
op[51]=0;
op[52]=(rxp2_2+x69+(((-1.0)*x68)));
op[53]=x112;
op[54]=x112;
op[55]=(rxp2_2+x68+(((-1.0)*x69)));
op[56]=0;
op[57]=x118;
op[58]=x112;
op[59]=(rxp2_2+(((-1.0)*x125)));
op[60]=((((-1.0)*x143))+x120+x129+x76+x79+(((-1.0)*x80)));
op[61]=(x122+(((-1.0)*x136))+(((-1.0)*x133))+x86);
op[62]=(x87+(((-1.0)*x89))+(((-1.0)*x88)));
op[63]=x119;
op[64]=((((-1.0)*x144))+(((-1.0)*x141))+x123+x129+x76);
op[65]=(x136+x122+(((-1.0)*x133))+x86);
op[66]=(x135+x121+(((-1.0)*x134))+(((-1.0)*x83)));
op[67]=((((-1.0)*x144))+(((-1.0)*x129))+x123+(((-1.0)*x132))+x79);
op[68]=x119;
op[69]=(x126+x88);
op[70]=(x135+x136+x121+(((-1.0)*x82)));
op[71]=((((-1.0)*x143))+(((-1.0)*x79))+(((-1.0)*x129))+x120+(((-1.0)*x132)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x147=htj4*htj4;
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+x147),-1);
if(!x148.valid){
continue;
}
cj4array[numsolutions]=((x148.value)*(((1.0)+(((-1.0)*x147)))));
CheckValue<IkReal> x149=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x149.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x149.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x150=htj5*htj5;
CheckValue<IkReal> x151=IKPowWithIntegerCheck(((1.0)+x150),-1);
if(!x151.valid){
continue;
}
cj5array[numsolutions]=((x151.value)*(((1.0)+(((-1.0)*x150)))));
CheckValue<IkReal> x152=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x152.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x152.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x153=htj0*htj0;
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((1.0)+x153),-1);
if(!x154.valid){
continue;
}
cj0array[numsolutions]=((x154.value)*(((1.0)+(((-1.0)*x153)))));
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x155.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x155.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x156=((1.0)*cj0);
IkReal x157=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)));
j3eval[0]=x157;
j3eval[1]=IKsign(x157);
j3eval[2]=((IKabs((((cj0*cj4*cj5*r20))+(((-1.0)*cj4*r21*sj5*x156))+((cj0*r22*sj4)))))+(IKabs(((((-1.0)*r20*sj5*x156))+(((-1.0)*cj5*r21*x156))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x158=((1.0)*sj5);
IkReal x159=(r20*sj0);
IkReal x160=((1.0)*r21*sj0);
IkReal x161=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x158))+(((-1.0)*cj4*r12)));
j3eval[0]=x161;
j3eval[1]=((IKabs(((((-1.0)*cj5*x160))+(((-1.0)*x158*x159)))))+(IKabs((((cj4*cj5*x159))+(((-1.0)*cj4*r21*sj0*x158))+((r22*sj0*sj4))))));
j3eval[2]=IKsign(x161);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x162=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x162;
j3eval[1]=IKsign(x162);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x163=((1.0)*cj5);
IkReal x164=((1.0)*sj5);
IkReal x165=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x163)));
j3eval[0]=x165;
j3eval[1]=((IKabs(((((-1.0)*r01*x163))+(((-1.0)*r00*x164)))))+(IKabs(((((-1.0)*cj4*r01*x164))+((r02*sj4))+((cj4*cj5*r00))))));
j3eval[2]=IKsign(x165);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x166=((1.0)*sj5);
IkReal x167=((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x166)));
j3eval[0]=x167;
j3eval[1]=((IKabs(((((-1.0)*cj5*r21))+(((-1.0)*r20*x166)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x166))))));
j3eval[2]=IKsign(x167);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x168=cj4*cj4;
IkReal x169=cj5*cj5;
IkReal x170=r10*r10;
IkReal x171=r11*r11;
IkReal x172=r12*r12;
IkReal x173=(r11*sj5);
IkReal x174=((1.0)*r10);
IkReal x175=(r12*sj4);
IkReal x176=((1.0)*x170);
IkReal x177=((2.0)*cj5*r10);
IkReal x178=(x169*x171);
IkReal x179=(((x168*x173*x177))+(((-1.0)*cj4*x175*x177))+(((-1.0)*x176))+(((2.0)*cj4*x173*x175))+((x168*x172))+((x168*x178))+((x169*x170))+(((-1.0)*x178))+(((-1.0)*x172))+(((-1.0)*x168*x171))+(((-1.0)*x168*x169*x176))+(((-1.0)*x173*x177)));
j3eval[0]=x179;
j3eval[1]=IKsign(x179);
j3eval[2]=((IKabs((((cj4*x173))+(((-1.0)*x175))+(((-1.0)*cj4*cj5*x174)))))+(IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x174))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x180=cj4*cj4;
IkReal x181=cj5*cj5;
IkReal x182=r10*r10;
IkReal x183=r11*r11;
IkReal x184=r12*r12;
IkReal x185=(r11*sj5);
IkReal x186=((1.0)*cj5);
IkReal x187=(r12*sj4);
IkReal x188=((1.0)*x182);
IkReal x189=((2.0)*cj5*r10);
IkReal x190=(x181*x183);
CheckValue<IkReal> x191=IKPowWithIntegerCheck(IKsign((((x180*x185*x189))+((x180*x184))+(((2.0)*cj4*x185*x187))+((x180*x190))+(((-1.0)*x188))+(((-1.0)*x190))+(((-1.0)*cj4*x187*x189))+(((-1.0)*x184))+(((-1.0)*x180*x183))+(((-1.0)*x185*x189))+(((-1.0)*x180*x181*x188))+((x181*x182)))),-1);
if(!x191.valid){
continue;
}
CheckValue<IkReal> x192 = IKatan2WithCheck(IkReal(((((-1.0)*x187))+(((-1.0)*cj4*r10*x186))+((cj4*x185)))),IkReal(((((-1.0)*r11*x186))+(((-1.0)*r10*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x192.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x191.value)))+(x192.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x193=IKsin(j3);
IkReal x194=IKcos(j3);
IkReal x195=(r10*sj5);
IkReal x196=(cj4*sj5);
IkReal x197=(cj5*r11);
IkReal x198=(cj4*cj5);
IkReal x199=(r12*sj4);
IkReal x200=((1.0)*x194);
IkReal x201=((1.0)*x193);
evalcond[0]=(((r11*x194*x196))+((x193*x195))+((x193*x197))+(((-1.0)*r10*x198*x200))+(((-1.0)*x199*x200)));
evalcond[1]=((((-1.0)*r20*x198*x201))+((r21*x193*x196))+(((-1.0)*r20*sj5*x200))+(((-1.0)*cj5*r21*x200))+(((-1.0)*r22*sj4*x201)));
evalcond[2]=((((-1.0)*cj5*r01*x200))+(((-1.0)*r00*sj5*x200))+((r01*x193*x196))+(((-1.0)*r00*x198*x201))+(((-1.0)*r02*sj4*x201)));
evalcond[3]=((1.0)+(((-1.0)*x195*x200))+(((-1.0)*x197*x200))+(((-1.0)*r10*x198*x201))+((r11*x193*x196))+(((-1.0)*x199*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x202=((12.0)*pz);
IkReal x203=((5.034)*px);
IkReal x204=((0.42)*pz);
IkReal x205=(r20*sj5);
IkReal x206=(r00*sj5);
IkReal x207=(cj4*r02);
IkReal x208=(cj5*r01);
IkReal x209=(cj5*r21);
IkReal x210=((5.034)*sj4);
IkReal x211=(cj5*r20);
IkReal x212=(r21*sj5);
IkReal x213=(cj4*r22);
IkReal x214=((1.678)*sj4);
IkReal x215=(r01*sj4*sj5);
IkReal x216=(cj5*r00*sj4);
IkReal x217=(x210*x211);
IkReal x218=((0.42)*x216);
IkReal x219=((2.126463)*x216);
IkReal x220=(x219+x204+x203);
IkReal x221=(x217+x218+x202);
IkReal x222=((((0.00042)*x209))+(((0.00042)*x205))+(((2.126463)*x215))+(((0.005034)*x208))+(((0.005034)*x206))+(((2.126463)*x207)));
IkReal x223=((((0.012)*x209))+(((0.012)*x205))+((x210*x212))+(((0.42)*x207))+(((5.034)*x213))+(((0.42)*x215)));
j1eval[0]=((6.094496)+(IKabs(((1.816)+x221+(((-1.0)*x223)))))+(IKabs(((0.02161)+(((-0.00014)*x209))+(((-0.00014)*x205))+(((0.14)*pz))+(((-0.708821)*x207))+(((0.708821)*x216))+(((1.678)*px))+(((-0.001678)*x208))+(((-0.001678)*x206))+(((-0.708821)*x215)))))+(IKabs(((-0.18941)+x220+(((-1.0)*x222)))))+(IKabs(((-1.816)+x221+(((-1.0)*x223)))))+(IKabs(((1.816)+(((-0.004)*x205))+(((-0.004)*x209))+(((4.0)*pz))+(((-0.14)*x215))+(((-1.678)*x213))+((x211*x214))+(((0.14)*x216))+(((-0.14)*x207))+(((-1.0)*x212*x214)))))+(IKabs(((-0.06229)+x220+(((-1.0)*x222))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x224=((12.0)*pz);
IkReal x225=((4.0)*pz);
IkReal x226=(cj5*r21);
IkReal x227=(cj4*r22);
IkReal x228=(sj4*sj5);
IkReal x229=(r20*sj5);
IkReal x230=(cj4*r02);
IkReal x231=(cj5*r00*sj4);
IkReal x232=(cj5*r20*sj4);
IkReal x233=((5.034)*x232);
IkReal x234=((0.42)*x231);
IkReal x235=((1.678)*x232);
IkReal x236=((0.14)*x231);
IkReal x237=(x225+x236+x235);
IkReal x238=(x224+x233+x234);
IkReal x239=((((5.034)*r21*x228))+(((5.034)*x227))+(((0.42)*x230))+(((0.42)*r01*x228))+(((0.012)*x229))+(((0.012)*x226)));
IkReal x240=((((0.14)*r01*x228))+(((1.678)*r21*x228))+(((1.678)*x227))+(((0.004)*x229))+(((0.004)*x226))+(((0.14)*x230)));
op[0]=((1.816)+x237+(((-1.0)*x240)));
op[1]=0;
op[2]=((1.816)+(((-1.0)*x239))+x238);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x239))+x238);
op[5]=0;
op[6]=((-1.816)+x237+(((-1.0)*x240)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x241=((0.14)*pz);
IkReal x242=((1.678)*px);
IkReal x243=((5.034)*px);
IkReal x244=((0.42)*pz);
IkReal x245=(cj4*r02);
IkReal x246=(cj5*r01);
IkReal x247=((2.126463)*sj4);
IkReal x248=(r01*sj5);
IkReal x249=(cj5*r21);
IkReal x250=(r20*sj5);
IkReal x251=(r00*sj5);
IkReal x252=(cj5*r00);
IkReal x253=((0.708821)*sj4);
IkReal x254=((0.001678)*x246);
IkReal x255=((0.708821)*x245);
IkReal x256=((0.00014)*x250);
IkReal x257=((0.00014)*x249);
IkReal x258=((0.001678)*x251);
IkReal x259=(x252*x253);
IkReal x260=(x247*x252);
IkReal x261=(x248*x253);
IkReal x262=(x260+x243+x244);
IkReal x263=(x259+x242+x241);
IkReal x264=((((2.126463)*x245))+(((0.005034)*x251))+(((0.005034)*x246))+(((0.00042)*x250))+(((0.00042)*x249))+((x247*x248)));
IkReal x265=(x258+x254+x255+x256+x257+x261);
j1evalpoly[0]=((-0.10551)+(((-1.523624)*htj1))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.06229)+x262+(((-1.0)*x264))))))+(((-3.047248)*(htj1*htj1*htj1)))+x263+(((htj1*htj1)*(((-0.18941)+x262+(((-1.0)*x264))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+x263+(((-1.0)*x265))))))+(((-1.0)*x265)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x266=((1.0)*cj1);
IkReal x267=(cj4*r22);
IkReal x268=(cj5*sj4);
IkReal x269=(sj4*sj5);
IkReal x270=((1.0)*sj1);
IkReal x271=(cj4*r02);
if( IKabs(((((-1.0)*r21*x266*x269))+(((-1.0)*r01*x269*x270))+((cj1*r20*x268))+((r00*sj1*x268))+(((-1.0)*x270*x271))+(((-1.0)*x266*x267)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x271))+((r20*sj1*x268))+((cj1*r01*x269))+(((-1.0)*r21*x269*x270))+(((-1.0)*x267*x270))+(((-1.0)*r00*x266*x268)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x266*x269))+(((-1.0)*r01*x269*x270))+((cj1*r20*x268))+((r00*sj1*x268))+(((-1.0)*x270*x271))+(((-1.0)*x266*x267))))+IKsqr((((cj1*x271))+((r20*sj1*x268))+((cj1*r01*x269))+(((-1.0)*r21*x269*x270))+(((-1.0)*x267*x270))+(((-1.0)*r00*x266*x268))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x266*x269))+(((-1.0)*r01*x269*x270))+((cj1*r20*x268))+((r00*sj1*x268))+(((-1.0)*x270*x271))+(((-1.0)*x266*x267))), (((cj1*x271))+((r20*sj1*x268))+((cj1*r01*x269))+(((-1.0)*r21*x269*x270))+(((-1.0)*x267*x270))+(((-1.0)*r00*x266*x268))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x272=IKcos(j2);
IkReal x273=IKsin(j2);
IkReal x274=((0.035)*sj1);
IkReal x275=((1.0)*cj3);
IkReal x276=(cj5*r00);
IkReal x277=(cj5*r01);
IkReal x278=(cj5*r20);
IkReal x279=(r00*sj5);
IkReal x280=((1.0)*sj1);
IkReal x281=(cj5*r21);
IkReal x282=((1.0)*cj4);
IkReal x283=(r20*sj5);
IkReal x284=(cj1*x272);
IkReal x285=(cj3*cj4*sj5);
IkReal x286=((1.0)*sj4*sj5);
IkReal x287=((0.4195)*x273);
IkReal x288=(cj1*x273);
IkReal x289=(x272*x280);
IkReal x290=((1.0)*x288);
IkReal x291=(x290+x289);
evalcond[0]=((((-1.0)*r02*x282))+x284+(((-1.0)*r01*x286))+(((-1.0)*x273*x280))+((sj4*x276)));
evalcond[1]=((((-1.0)*r21*x286))+(((-1.0)*x291))+(((-1.0)*r22*x282))+((sj4*x278)));
evalcond[2]=((((-1.0)*r22*sj4*x275))+((r21*x285))+((sj3*x283))+((sj3*x281))+(((-1.0)*x284))+(((-1.0)*cj4*x275*x278))+((sj1*x273)));
evalcond[3]=(((r01*x285))+(((-1.0)*r02*sj4*x275))+((sj3*x277))+((sj3*x279))+(((-1.0)*x291))+(((-1.0)*cj4*x275*x276)));
evalcond[4]=((((-1.0)*x273*x274))+(((0.001)*x283))+(((0.001)*x281))+(((0.454)*cj1))+(((-1.0)*pz))+(((-1.0)*cj1*x287))+(((0.035)*x284))+(((-0.4195)*sj1*x272)));
evalcond[5]=((0.025)+((x272*x274))+(((-1.0)*sj1*x287))+(((0.001)*x279))+(((0.001)*x277))+(((-1.0)*px))+(((0.4195)*x284))+(((0.035)*x288))+(((0.454)*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x292=((1.0)*sj5);
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*x292)))),-1);
if(!x293.valid){
continue;
}
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x292)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x292))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x293.value)))+(x294.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x295=IKsin(j3);
IkReal x296=IKcos(j3);
IkReal x297=(r10*sj5);
IkReal x298=(cj4*sj5);
IkReal x299=(cj5*r11);
IkReal x300=(cj4*cj5);
IkReal x301=(r12*sj4);
IkReal x302=((1.0)*x296);
IkReal x303=((1.0)*x295);
evalcond[0]=((((-1.0)*x301*x302))+((r11*x296*x298))+((x295*x297))+((x295*x299))+(((-1.0)*r10*x300*x302)));
evalcond[1]=((((-1.0)*r20*sj5*x302))+(((-1.0)*r22*sj4*x303))+(((-1.0)*r20*x300*x303))+((r21*x295*x298))+(((-1.0)*cj5*r21*x302)));
evalcond[2]=((((-1.0)*r00*sj5*x302))+(((-1.0)*cj5*r01*x302))+(((-1.0)*r02*sj4*x303))+((r01*x295*x298))+(((-1.0)*r00*x300*x303)));
evalcond[3]=((1.0)+(((-1.0)*x301*x303))+(((-1.0)*x297*x302))+(((-1.0)*x299*x302))+(((-1.0)*r10*x300*x303))+((r11*x295*x298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x304=((12.0)*pz);
IkReal x305=((5.034)*px);
IkReal x306=((0.42)*pz);
IkReal x307=(r20*sj5);
IkReal x308=(r00*sj5);
IkReal x309=(cj4*r02);
IkReal x310=(cj5*r01);
IkReal x311=(cj5*r21);
IkReal x312=((5.034)*sj4);
IkReal x313=(cj5*r20);
IkReal x314=(r21*sj5);
IkReal x315=(cj4*r22);
IkReal x316=((1.678)*sj4);
IkReal x317=(r01*sj4*sj5);
IkReal x318=(cj5*r00*sj4);
IkReal x319=(x312*x313);
IkReal x320=((0.42)*x318);
IkReal x321=((2.126463)*x318);
IkReal x322=(x306+x305+x321);
IkReal x323=(x304+x320+x319);
IkReal x324=((((0.00042)*x307))+(((2.126463)*x309))+(((0.00042)*x311))+(((0.005034)*x310))+(((2.126463)*x317))+(((0.005034)*x308)));
IkReal x325=(((x312*x314))+(((0.012)*x311))+(((0.42)*x317))+(((5.034)*x315))+(((0.42)*x309))+(((0.012)*x307)));
j1eval[0]=((6.094496)+(IKabs(((1.816)+(((-1.0)*x325))+x323)))+(IKabs(((-1.816)+(((-1.0)*x325))+x323)))+(IKabs(((0.02161)+(((-0.001678)*x310))+(((-0.00014)*x311))+(((0.14)*pz))+(((-0.00014)*x307))+(((-0.708821)*x309))+(((-0.708821)*x317))+(((0.708821)*x318))+(((1.678)*px))+(((-0.001678)*x308)))))+(IKabs(((-0.06229)+(((-1.0)*x324))+x322)))+(IKabs(((1.816)+(((4.0)*pz))+(((-0.004)*x307))+(((-0.14)*x309))+(((-0.004)*x311))+(((-1.678)*x315))+(((0.14)*x318))+(((-1.0)*x314*x316))+(((-0.14)*x317))+((x313*x316)))))+(IKabs(((-0.18941)+(((-1.0)*x324))+x322))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x326=((12.0)*pz);
IkReal x327=((4.0)*pz);
IkReal x328=(cj5*r21);
IkReal x329=(cj4*r22);
IkReal x330=(sj4*sj5);
IkReal x331=(r20*sj5);
IkReal x332=(cj4*r02);
IkReal x333=(cj5*r00*sj4);
IkReal x334=(cj5*r20*sj4);
IkReal x335=((5.034)*x334);
IkReal x336=((0.42)*x333);
IkReal x337=((1.678)*x334);
IkReal x338=((0.14)*x333);
IkReal x339=(x338+x337+x327);
IkReal x340=(x336+x335+x326);
IkReal x341=((((0.012)*x331))+(((5.034)*r21*x330))+(((0.012)*x328))+(((5.034)*x329))+(((0.42)*r01*x330))+(((0.42)*x332)));
IkReal x342=((((0.004)*x331))+(((0.14)*x332))+(((0.004)*x328))+(((1.678)*r21*x330))+(((1.678)*x329))+(((0.14)*r01*x330)));
op[0]=((1.816)+x339+(((-1.0)*x342)));
op[1]=0;
op[2]=((1.816)+x340+(((-1.0)*x341)));
op[3]=0;
op[4]=((-1.816)+x340+(((-1.0)*x341)));
op[5]=0;
op[6]=((-1.816)+x339+(((-1.0)*x342)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x343=((0.14)*pz);
IkReal x344=((1.678)*px);
IkReal x345=((5.034)*px);
IkReal x346=((0.42)*pz);
IkReal x347=(cj4*r02);
IkReal x348=(cj5*r01);
IkReal x349=((2.126463)*sj4);
IkReal x350=(r01*sj5);
IkReal x351=(cj5*r21);
IkReal x352=(r20*sj5);
IkReal x353=(r00*sj5);
IkReal x354=(cj5*r00);
IkReal x355=((0.708821)*sj4);
IkReal x356=((0.001678)*x348);
IkReal x357=((0.708821)*x347);
IkReal x358=((0.00014)*x352);
IkReal x359=((0.00014)*x351);
IkReal x360=((0.001678)*x353);
IkReal x361=(x354*x355);
IkReal x362=(x349*x354);
IkReal x363=(x350*x355);
IkReal x364=(x346+x345+x362);
IkReal x365=(x343+x344+x361);
IkReal x366=((((0.005034)*x353))+(((2.126463)*x347))+((x349*x350))+(((0.00042)*x351))+(((0.00042)*x352))+(((0.005034)*x348)));
IkReal x367=(x357+x356+x359+x358+x360+x363);
j1evalpoly[0]=((-0.10551)+(((-1.523624)*htj1))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x367))+x365+(((htj1*htj1*htj1*htj1)*(((-0.06229)+(((-1.0)*x366))+x364))))+(((-3.047248)*(htj1*htj1*htj1)))+(((htj1*htj1)*(((-0.18941)+(((-1.0)*x366))+x364))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+(((-1.0)*x367))+x365)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x368=((1.0)*cj1);
IkReal x369=(cj4*r22);
IkReal x370=(cj5*sj4);
IkReal x371=(sj4*sj5);
IkReal x372=((1.0)*sj1);
IkReal x373=(cj4*r02);
if( IKabs(((((-1.0)*r01*x371*x372))+(((-1.0)*x372*x373))+((r00*sj1*x370))+(((-1.0)*r21*x368*x371))+((cj1*r20*x370))+(((-1.0)*x368*x369)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r21*x371*x372))+((r20*sj1*x370))+((cj1*x373))+(((-1.0)*r00*x368*x370))+((cj1*r01*x371))+(((-1.0)*x369*x372)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x371*x372))+(((-1.0)*x372*x373))+((r00*sj1*x370))+(((-1.0)*r21*x368*x371))+((cj1*r20*x370))+(((-1.0)*x368*x369))))+IKsqr(((((-1.0)*r21*x371*x372))+((r20*sj1*x370))+((cj1*x373))+(((-1.0)*r00*x368*x370))+((cj1*r01*x371))+(((-1.0)*x369*x372))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x371*x372))+(((-1.0)*x372*x373))+((r00*sj1*x370))+(((-1.0)*r21*x368*x371))+((cj1*r20*x370))+(((-1.0)*x368*x369))), ((((-1.0)*r21*x371*x372))+((r20*sj1*x370))+((cj1*x373))+(((-1.0)*r00*x368*x370))+((cj1*r01*x371))+(((-1.0)*x369*x372))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x374=IKcos(j2);
IkReal x375=IKsin(j2);
IkReal x376=((0.035)*sj1);
IkReal x377=((1.0)*cj3);
IkReal x378=(cj5*r00);
IkReal x379=(cj5*r01);
IkReal x380=(cj5*r20);
IkReal x381=(r00*sj5);
IkReal x382=((1.0)*sj1);
IkReal x383=(cj5*r21);
IkReal x384=((1.0)*cj4);
IkReal x385=(r20*sj5);
IkReal x386=(cj1*x374);
IkReal x387=(cj3*cj4*sj5);
IkReal x388=((1.0)*sj4*sj5);
IkReal x389=((0.4195)*x375);
IkReal x390=(cj1*x375);
IkReal x391=(x374*x382);
IkReal x392=((1.0)*x390);
IkReal x393=(x391+x392);
evalcond[0]=(((sj4*x378))+(((-1.0)*x375*x382))+x386+(((-1.0)*r02*x384))+(((-1.0)*r01*x388)));
evalcond[1]=((((-1.0)*x393))+(((-1.0)*r22*x384))+((sj4*x380))+(((-1.0)*r21*x388)));
evalcond[2]=(((sj1*x375))+(((-1.0)*r22*sj4*x377))+((r21*x387))+(((-1.0)*x386))+(((-1.0)*cj4*x377*x380))+((sj3*x383))+((sj3*x385)));
evalcond[3]=((((-1.0)*x393))+(((-1.0)*r02*sj4*x377))+(((-1.0)*cj4*x377*x378))+((sj3*x379))+((sj3*x381))+((r01*x387)));
evalcond[4]=((((-1.0)*cj1*x389))+(((0.454)*cj1))+(((0.001)*x383))+(((0.001)*x385))+(((-0.4195)*sj1*x374))+(((-1.0)*pz))+(((-1.0)*x375*x376))+(((0.035)*x386)));
evalcond[5]=((0.025)+(((0.001)*x381))+(((0.035)*x390))+(((0.4195)*x386))+(((-1.0)*px))+(((0.001)*x379))+(((0.454)*sj1))+((x374*x376))+(((-1.0)*sj1*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x394=((1.0)*r01);
CheckValue<IkReal> x395=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x395.valid){
continue;
}
CheckValue<IkReal> x396 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x394))+(((-1.0)*r00*sj5)))),IkReal(((((-1.0)*cj4*sj5*x394))+((r02*sj4))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x396.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x395.value)))+(x396.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x397=IKsin(j3);
IkReal x398=IKcos(j3);
IkReal x399=(r10*sj5);
IkReal x400=(cj4*sj5);
IkReal x401=(cj5*r11);
IkReal x402=(cj4*cj5);
IkReal x403=(r12*sj4);
IkReal x404=((1.0)*x398);
IkReal x405=((1.0)*x397);
evalcond[0]=(((x397*x401))+((r11*x398*x400))+(((-1.0)*x403*x404))+((x397*x399))+(((-1.0)*r10*x402*x404)));
evalcond[1]=((((-1.0)*cj5*r21*x404))+(((-1.0)*r20*x402*x405))+(((-1.0)*r22*sj4*x405))+(((-1.0)*r20*sj5*x404))+((r21*x397*x400)));
evalcond[2]=((((-1.0)*cj5*r01*x404))+(((-1.0)*r02*sj4*x405))+((r01*x397*x400))+(((-1.0)*r00*sj5*x404))+(((-1.0)*r00*x402*x405)));
evalcond[3]=((1.0)+(((-1.0)*x403*x405))+((r11*x397*x400))+(((-1.0)*x401*x404))+(((-1.0)*x399*x404))+(((-1.0)*r10*x402*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=1.0;
j0=0;
IkReal x406=((12.0)*pz);
IkReal x407=((5.034)*px);
IkReal x408=((0.42)*pz);
IkReal x409=(r20*sj5);
IkReal x410=(r00*sj5);
IkReal x411=(cj4*r02);
IkReal x412=(cj5*r01);
IkReal x413=(cj5*r21);
IkReal x414=((5.034)*sj4);
IkReal x415=(cj5*r20);
IkReal x416=(r21*sj5);
IkReal x417=(cj4*r22);
IkReal x418=((1.678)*sj4);
IkReal x419=(r01*sj4*sj5);
IkReal x420=(cj5*r00*sj4);
IkReal x421=(x414*x415);
IkReal x422=((0.42)*x420);
IkReal x423=((2.126463)*x420);
IkReal x424=(x407+x408+x423);
IkReal x425=(x406+x422+x421);
IkReal x426=((((0.00042)*x413))+(((0.00042)*x409))+(((2.126463)*x411))+(((2.126463)*x419))+(((0.005034)*x410))+(((0.005034)*x412)));
IkReal x427=(((x414*x416))+(((0.012)*x413))+(((5.034)*x417))+(((0.42)*x419))+(((0.42)*x411))+(((0.012)*x409)));
j1eval[0]=((6.094496)+(IKabs(((1.816)+(((-0.14)*x419))+(((-0.14)*x411))+(((0.14)*x420))+(((-0.004)*x413))+(((4.0)*pz))+(((-0.004)*x409))+((x415*x418))+(((-1.678)*x417))+(((-1.0)*x416*x418)))))+(IKabs(((-0.06229)+(((-1.0)*x426))+x424)))+(IKabs(((0.02161)+(((0.708821)*x420))+(((-0.001678)*x412))+(((-0.001678)*x410))+(((0.14)*pz))+(((-0.00014)*x409))+(((-0.708821)*x419))+(((-0.708821)*x411))+(((-0.00014)*x413))+(((1.678)*px)))))+(IKabs(((1.816)+(((-1.0)*x427))+x425)))+(IKabs(((-1.816)+(((-1.0)*x427))+x425)))+(IKabs(((-0.18941)+(((-1.0)*x426))+x424))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x428=((12.0)*pz);
IkReal x429=((4.0)*pz);
IkReal x430=(cj5*r21);
IkReal x431=(cj4*r22);
IkReal x432=(sj4*sj5);
IkReal x433=(r20*sj5);
IkReal x434=(cj4*r02);
IkReal x435=(cj5*r00*sj4);
IkReal x436=(cj5*r20*sj4);
IkReal x437=((5.034)*x436);
IkReal x438=((0.42)*x435);
IkReal x439=((1.678)*x436);
IkReal x440=((0.14)*x435);
IkReal x441=(x429+x439+x440);
IkReal x442=(x428+x438+x437);
IkReal x443=((((5.034)*x431))+(((0.42)*x434))+(((0.012)*x433))+(((0.012)*x430))+(((5.034)*r21*x432))+(((0.42)*r01*x432)));
IkReal x444=((((0.004)*x430))+(((0.004)*x433))+(((0.14)*x434))+(((1.678)*x431))+(((1.678)*r21*x432))+(((0.14)*r01*x432)));
op[0]=((1.816)+(((-1.0)*x444))+x441);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x443))+x442);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x443))+x442);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x444))+x441);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x445=((0.14)*pz);
IkReal x446=((1.678)*px);
IkReal x447=((5.034)*px);
IkReal x448=((0.42)*pz);
IkReal x449=(cj4*r02);
IkReal x450=(cj5*r01);
IkReal x451=((2.126463)*sj4);
IkReal x452=(r01*sj5);
IkReal x453=(cj5*r21);
IkReal x454=(r20*sj5);
IkReal x455=(r00*sj5);
IkReal x456=(cj5*r00);
IkReal x457=((0.708821)*sj4);
IkReal x458=((0.001678)*x450);
IkReal x459=((0.708821)*x449);
IkReal x460=((0.00014)*x454);
IkReal x461=((0.00014)*x453);
IkReal x462=((0.001678)*x455);
IkReal x463=(x456*x457);
IkReal x464=(x451*x456);
IkReal x465=(x452*x457);
IkReal x466=(x448+x447+x464);
IkReal x467=(x445+x446+x463);
IkReal x468=((((0.00042)*x454))+(((0.00042)*x453))+(((2.126463)*x449))+(((0.005034)*x455))+(((0.005034)*x450))+((x451*x452)));
IkReal x469=(x458+x459+x462+x461+x460+x465);
j1evalpoly[0]=((-0.10551)+(((htj1*htj1*htj1*htj1)*(((-0.06229)+(((-1.0)*x468))+x466))))+(((-1.523624)*htj1))+(((htj1*htj1)*(((-0.18941)+(((-1.0)*x468))+x466))))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x469))+(((-3.047248)*(htj1*htj1*htj1)))+x467+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+(((-1.0)*x469))+x467)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x470=((1.0)*cj1);
IkReal x471=(cj4*r22);
IkReal x472=(cj5*sj4);
IkReal x473=(sj4*sj5);
IkReal x474=((1.0)*sj1);
IkReal x475=(cj4*r02);
if( IKabs((((cj1*r20*x472))+(((-1.0)*r21*x470*x473))+(((-1.0)*r01*x473*x474))+(((-1.0)*x470*x471))+(((-1.0)*x474*x475))+((r00*sj1*x472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r01*x473))+(((-1.0)*r00*x470*x472))+((r20*sj1*x472))+(((-1.0)*r21*x473*x474))+((cj1*x475))+(((-1.0)*x471*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x472))+(((-1.0)*r21*x470*x473))+(((-1.0)*r01*x473*x474))+(((-1.0)*x470*x471))+(((-1.0)*x474*x475))+((r00*sj1*x472))))+IKsqr((((cj1*r01*x473))+(((-1.0)*r00*x470*x472))+((r20*sj1*x472))+(((-1.0)*r21*x473*x474))+((cj1*x475))+(((-1.0)*x471*x474))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x472))+(((-1.0)*r21*x470*x473))+(((-1.0)*r01*x473*x474))+(((-1.0)*x470*x471))+(((-1.0)*x474*x475))+((r00*sj1*x472))), (((cj1*r01*x473))+(((-1.0)*r00*x470*x472))+((r20*sj1*x472))+(((-1.0)*r21*x473*x474))+((cj1*x475))+(((-1.0)*x471*x474))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x476=IKcos(j2);
IkReal x477=IKsin(j2);
IkReal x478=((0.035)*sj1);
IkReal x479=((1.0)*cj3);
IkReal x480=(cj5*r00);
IkReal x481=(cj5*r01);
IkReal x482=(cj5*r20);
IkReal x483=(r00*sj5);
IkReal x484=((1.0)*sj1);
IkReal x485=(cj5*r21);
IkReal x486=((1.0)*cj4);
IkReal x487=(r20*sj5);
IkReal x488=(cj1*x476);
IkReal x489=(cj3*cj4*sj5);
IkReal x490=((1.0)*sj4*sj5);
IkReal x491=((0.4195)*x477);
IkReal x492=(cj1*x477);
IkReal x493=(x476*x484);
IkReal x494=((1.0)*x492);
IkReal x495=(x493+x494);
evalcond[0]=((((-1.0)*r01*x490))+((sj4*x480))+x488+(((-1.0)*x477*x484))+(((-1.0)*r02*x486)));
evalcond[1]=((((-1.0)*r21*x490))+(((-1.0)*x495))+((sj4*x482))+(((-1.0)*r22*x486)));
evalcond[2]=((((-1.0)*x488))+((r21*x489))+(((-1.0)*r22*sj4*x479))+((sj1*x477))+((sj3*x487))+((sj3*x485))+(((-1.0)*cj4*x479*x482)));
evalcond[3]=((((-1.0)*x495))+((r01*x489))+((sj3*x483))+((sj3*x481))+(((-1.0)*r02*sj4*x479))+(((-1.0)*cj4*x479*x480)));
evalcond[4]=((((-1.0)*x477*x478))+(((-1.0)*cj1*x491))+(((0.454)*cj1))+(((0.001)*x487))+(((0.001)*x485))+(((0.035)*x488))+(((-0.4195)*sj1*x476))+(((-1.0)*pz)));
evalcond[5]=((0.025)+(((0.001)*x483))+(((0.001)*x481))+(((-1.0)*sj1*x491))+(((0.4195)*x488))+(((-1.0)*px))+(((0.035)*x492))+(((0.454)*sj1))+((x476*x478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x496=((1.0)*sj5);
IkReal x497=((1.0)*cj5);
IkReal x498=(((r01*sj4*sj5))+(((-1.0)*r00*sj4*x497))+((cj4*r02)));
j3eval[0]=x498;
j3eval[1]=IKsign(x498);
j3eval[2]=((IKabs(((((-1.0)*r21*x497))+(((-1.0)*r20*x496)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x496))+((cj4*cj5*r20))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x499=((1.0)*r01);
IkReal x500=((1.0)*sj5);
IkReal x501=(((cj5*r20*sj4))+(((-1.0)*cj4*r22))+(((-1.0)*r21*sj4*x500)));
j3eval[0]=x501;
j3eval[1]=((IKabs(((((-1.0)*r00*x500))+(((-1.0)*cj5*x499)))))+(IKabs((((r02*sj4))+((cj4*cj5*r00))+(((-1.0)*cj4*sj5*x499))))));
j3eval[2]=IKsign(x501);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x502=cj4*cj4;
IkReal x503=r10*r10;
IkReal x504=cj5*cj5;
IkReal x505=r11*r11;
IkReal x506=r12*r12;
IkReal x507=(r11*sj5);
IkReal x508=((1.0)*r10);
IkReal x509=(r12*sj4);
IkReal x510=((1.0)*x502);
IkReal x511=((2.0)*cj5*r10);
IkReal x512=(x504*x505);
IkReal x513=(x503*x504);
IkReal x514=(((x507*x511))+((x502*x513))+(((-1.0)*x513))+(((-2.0)*cj4*x507*x509))+((cj4*x509*x511))+x503+x506+x512+(((-1.0)*x506*x510))+((x502*x505))+(((-1.0)*x502*x507*x511))+(((-1.0)*x510*x512)));
j3eval[0]=x514;
j3eval[1]=IKsign(x514);
j3eval[2]=((IKabs(((((-1.0)*cj5*r11))+(((-1.0)*sj5*x508)))))+(IKabs(((((-1.0)*cj4*cj5*x508))+((cj4*x507))+(((-1.0)*x509))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x515=cj4*cj4;
IkReal x516=r10*r10;
IkReal x517=cj5*cj5;
IkReal x518=r11*r11;
IkReal x519=r12*r12;
IkReal x520=(r11*sj5);
IkReal x521=((1.0)*cj5);
IkReal x522=(r12*sj4);
IkReal x523=((1.0)*x515);
IkReal x524=((2.0)*cj5*r10);
IkReal x525=(x517*x518);
IkReal x526=(x516*x517);
CheckValue<IkReal> x527=IKPowWithIntegerCheck(IKsign((((cj4*x522*x524))+(((-1.0)*x523*x525))+(((-1.0)*x526))+((x515*x526))+(((-2.0)*cj4*x520*x522))+(((-1.0)*x515*x520*x524))+((x520*x524))+x525+x519+x516+((x515*x518))+(((-1.0)*x519*x523)))),-1);
if(!x527.valid){
continue;
}
CheckValue<IkReal> x528 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x521))+((cj4*x520))+(((-1.0)*x522)))),IkReal(((((-1.0)*r10*sj5))+(((-1.0)*r11*x521)))),IKFAST_ATAN2_MAGTHRESH);
if(!x528.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x527.value)))+(x528.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x529=IKsin(j3);
IkReal x530=IKcos(j3);
IkReal x531=(r10*sj5);
IkReal x532=(cj4*sj5);
IkReal x533=(cj5*r11);
IkReal x534=(cj4*cj5);
IkReal x535=(r12*sj4);
IkReal x536=((1.0)*x530);
IkReal x537=((1.0)*x529);
evalcond[0]=(((r11*x530*x532))+(((-1.0)*r10*x534*x536))+(((-1.0)*x535*x536))+((x529*x531))+((x529*x533)));
evalcond[1]=((((-1.0)*r20*x534*x537))+((r21*x529*x532))+(((-1.0)*r20*sj5*x536))+(((-1.0)*r22*sj4*x537))+(((-1.0)*cj5*r21*x536)));
evalcond[2]=(((r01*x529*x532))+(((-1.0)*r00*x534*x537))+(((-1.0)*cj5*r01*x536))+(((-1.0)*r00*sj5*x536))+(((-1.0)*r02*sj4*x537)));
evalcond[3]=((-1.0)+(((-1.0)*x533*x536))+(((-1.0)*x531*x536))+((r11*x529*x532))+(((-1.0)*r10*x534*x537))+(((-1.0)*x535*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x538=((12.0)*pz);
IkReal x539=((4.0)*pz);
IkReal x540=(r20*sj5);
IkReal x541=((0.42)*sj4);
IkReal x542=(cj3*r22);
IkReal x543=((0.42)*sj3);
IkReal x544=((0.14)*r21);
IkReal x545=(r01*sj5);
IkReal x546=((0.14)*sj4);
IkReal x547=(cj5*r00);
IkReal x548=((0.14)*cj4);
IkReal x549=(cj5*r21);
IkReal x550=((5.034)*sj4);
IkReal x551=(cj5*r20);
IkReal x552=(r21*sj5);
IkReal x553=(cj4*r22);
IkReal x554=((0.42)*cj4);
IkReal x555=((1.678)*sj4);
IkReal x556=((5.034)*x553);
IkReal x557=((0.012)*x549);
IkReal x558=((0.012)*x540);
IkReal x559=((0.004)*x549);
IkReal x560=((0.004)*x540);
IkReal x561=((1.678)*x553);
IkReal x562=(cj3*cj4*sj5);
IkReal x563=(x550*x552);
IkReal x564=(x550*x551);
IkReal x565=(x541*x547);
IkReal x566=(x552*x555);
IkReal x567=(x551*x555);
IkReal x568=(x540*x543);
IkReal x569=(x543*x549);
IkReal x570=(cj3*x552*x554);
IkReal x571=(x539+x567);
IkReal x572=(x538+x564);
IkReal x573=(((x541*x545))+((r02*x554))+x572);
IkReal x574=((-1.816)+x559+x566+x560+x561);
IkReal x575=(((x541*x542))+((cj3*x551*x554))+x572);
IkReal x576=(x558+x557+x556+x565+x563);
IkReal x577=(x558+x557+x556+x570+x568+x569+x563);
j1eval[0]=((IKabs(((((-1.0)*x542*x546))+(((-1.0)*x571))+x574+((x544*x562))+(((-1.0)*cj3*x548*x551))+((cj5*sj3*x544))+(((0.14)*sj3*x540)))))+(IKabs(((1.816)+(((-1.0)*x573))+x576)))+(IKabs(((-1.816)+(((-1.0)*x573))+x576)))+(IKabs(((((-1.0)*x545*x546))+(((-1.0)*r02*x548))+(((-1.0)*x571))+x574+((x546*x547)))))+(IKabs(((1.816)+(((-1.0)*x575))+x577)))+(IKabs(((-1.816)+(((-1.0)*x575))+x577))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x578=(sj4*sj5);
IkReal x579=(cj4*r22);
IkReal x580=(cj4*r02);
IkReal x581=(r20*sj5);
IkReal x582=(cj5*r21);
IkReal x583=((5.034)*x579);
IkReal x584=((0.012)*x582);
IkReal x585=((0.012)*x581);
IkReal x586=((0.004)*x582);
IkReal x587=((0.004)*x581);
IkReal x588=((1.678)*x579);
IkReal x589=(cj5*r00*sj4);
IkReal x590=(cj5*r20*sj4);
IkReal x591=((5.034)*r21*x578);
IkReal x592=((0.42)*x589);
IkReal x593=((1.678)*r21*x578);
IkReal x594=((0.14)*x589);
IkReal x595=((((12.0)*pz))+(((5.034)*x590))+(((0.42)*x580))+(((0.42)*r01*x578)));
IkReal x596=((((4.0)*pz))+(((0.14)*r01*x578))+(((0.14)*x580))+(((1.678)*x590)));
IkReal x597=(x583+x584+x585+x592+x591);
IkReal x598=(x586+x587+x588+x594+x593);
op[0]=((-1.816)+(((-1.0)*x596))+x598);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x595))+x597);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x595))+x597);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x596))+x598);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x599=(r20*sj5);
IkReal x600=((0.42)*cj3);
IkReal x601=(r22*sj4);
IkReal x602=(r21*sj5);
IkReal x603=((1.678)*sj4);
IkReal x604=((0.42)*sj3);
IkReal x605=(cj5*r21);
IkReal x606=((0.14)*sj3);
IkReal x607=((5.034)*sj4);
IkReal x608=(cj5*r20);
IkReal x609=(cj4*r22);
IkReal x610=((0.004)*x605);
IkReal x611=((0.004)*x599);
IkReal x612=((1.678)*x609);
IkReal x613=((5.034)*x609);
IkReal x614=((0.012)*x605);
IkReal x615=((0.012)*x599);
IkReal x616=((0.14)*cj3*cj4);
IkReal x617=(x605*x606);
IkReal x618=(x602*x603);
IkReal x619=(x599*x606);
IkReal x620=(x599*x604);
IkReal x621=(x602*x607);
IkReal x622=(x604*x605);
IkReal x623=(cj4*x600*x602);
IkReal x624=(x602*x616);
IkReal x625=((((12.0)*pz))+((x600*x601))+((cj4*x600*x608))+((x607*x608)));
IkReal x626=(((x608*x616))+(((4.0)*pz))+(((0.14)*cj3*x601))+((x603*x608)));
IkReal x627=(x614+x615+x613+x621+x620+x623+x622);
IkReal x628=(x618+x619+x617+x610+x611+x612+x624);
j1evalpoly[0]=((1.816)+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x626))+x628))))+(((-1.0)*x626))+x628+(((htj1*htj1)*(((1.816)+(((-1.0)*x625))+x627))))+(((htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x625))+x627)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x629=(sj1*sj4);
IkReal x630=(r01*sj5);
IkReal x631=((1.0)*cj1);
IkReal x632=(cj4*r22);
IkReal x633=(cj4*r02);
IkReal x634=(cj5*r20);
IkReal x635=(cj1*sj4);
IkReal x636=(cj5*r00);
IkReal x637=(r21*sj5);
if( IKabs(((((-1.0)*x631*x632))+((x634*x635))+((x629*x630))+(((-1.0)*x629*x636))+((sj1*x633))+(((-1.0)*sj4*x631*x637)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x631*x633))+(((-1.0)*sj1*x632))+((x635*x636))+((x629*x634))+(((-1.0)*x629*x637))+(((-1.0)*sj4*x630*x631)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x631*x632))+((x634*x635))+((x629*x630))+(((-1.0)*x629*x636))+((sj1*x633))+(((-1.0)*sj4*x631*x637))))+IKsqr(((((-1.0)*x631*x633))+(((-1.0)*sj1*x632))+((x635*x636))+((x629*x634))+(((-1.0)*x629*x637))+(((-1.0)*sj4*x630*x631))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x631*x632))+((x634*x635))+((x629*x630))+(((-1.0)*x629*x636))+((sj1*x633))+(((-1.0)*sj4*x631*x637))), ((((-1.0)*x631*x633))+(((-1.0)*sj1*x632))+((x635*x636))+((x629*x634))+(((-1.0)*x629*x637))+(((-1.0)*sj4*x630*x631))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x638=IKcos(j2);
IkReal x639=IKsin(j2);
IkReal x640=((0.035)*sj1);
IkReal x641=((1.0)*cj3);
IkReal x642=(cj5*r00);
IkReal x643=(cj5*r01);
IkReal x644=(cj5*r20);
IkReal x645=(r00*sj5);
IkReal x646=(cj5*r21);
IkReal x647=((1.0)*cj4);
IkReal x648=(r20*sj5);
IkReal x649=(sj1*x639);
IkReal x650=(cj3*cj4*sj5);
IkReal x651=((1.0)*sj4*sj5);
IkReal x652=((1.0)*x638);
IkReal x653=(cj1*x639);
IkReal x654=(cj1*x638);
IkReal x655=(sj1*x638);
IkReal x656=(cj1*x652);
evalcond[0]=(((sj4*x642))+(((-1.0)*r01*x651))+(((-1.0)*r02*x647))+(((-1.0)*x656))+x649);
evalcond[1]=((((-1.0)*sj1*x652))+(((-1.0)*x653))+((sj4*x644))+(((-1.0)*r22*x647))+(((-1.0)*r21*x651)));
evalcond[2]=((((-1.0)*r02*sj4*x641))+(((-1.0)*cj4*x641*x642))+x653+x655+((sj3*x643))+((sj3*x645))+((r01*x650)));
evalcond[3]=((((-1.0)*cj4*x641*x644))+(((-1.0)*x656))+x649+((sj3*x646))+((sj3*x648))+(((-1.0)*r22*sj4*x641))+((r21*x650)));
evalcond[4]=((((0.454)*cj1))+(((0.035)*x654))+(((-0.4195)*x655))+(((-0.4195)*x653))+(((-1.0)*x639*x640))+(((-1.0)*pz))+(((0.001)*x648))+(((0.001)*x646)));
evalcond[5]=((-0.025)+(((-0.035)*x653))+(((0.4195)*x649))+(((-0.4195)*x654))+(((-1.0)*px))+(((-0.454)*sj1))+(((0.001)*x643))+(((0.001)*x645))+(((-1.0)*x638*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x657=((1.0)*r01);
IkReal x658=((1.0)*sj5);
CheckValue<IkReal> x659=IKPowWithIntegerCheck(IKsign((((cj5*r20*sj4))+(((-1.0)*r21*sj4*x658))+(((-1.0)*cj4*r22)))),-1);
if(!x659.valid){
continue;
}
CheckValue<IkReal> x660 = IKatan2WithCheck(IkReal(((((-1.0)*r00*x658))+(((-1.0)*cj5*x657)))),IkReal((((r02*sj4))+(((-1.0)*cj4*sj5*x657))+((cj4*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x660.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x659.value)))+(x660.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x661=IKsin(j3);
IkReal x662=IKcos(j3);
IkReal x663=(r10*sj5);
IkReal x664=(cj4*sj5);
IkReal x665=(cj5*r11);
IkReal x666=(cj4*cj5);
IkReal x667=(r12*sj4);
IkReal x668=((1.0)*x662);
IkReal x669=((1.0)*x661);
evalcond[0]=(((x661*x663))+((x661*x665))+(((-1.0)*r10*x666*x668))+(((-1.0)*x667*x668))+((r11*x662*x664)));
evalcond[1]=((((-1.0)*r20*x666*x669))+(((-1.0)*r20*sj5*x668))+(((-1.0)*r22*sj4*x669))+((r21*x661*x664))+(((-1.0)*cj5*r21*x668)));
evalcond[2]=((((-1.0)*r02*sj4*x669))+(((-1.0)*r00*x666*x669))+(((-1.0)*cj5*r01*x668))+(((-1.0)*r00*sj5*x668))+((r01*x661*x664)));
evalcond[3]=((-1.0)+(((-1.0)*x665*x668))+(((-1.0)*x663*x668))+(((-1.0)*r10*x666*x669))+(((-1.0)*x667*x669))+((r11*x661*x664)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x670=((12.0)*pz);
IkReal x671=((4.0)*pz);
IkReal x672=(r20*sj5);
IkReal x673=((0.42)*sj4);
IkReal x674=(cj3*r22);
IkReal x675=((0.42)*sj3);
IkReal x676=((0.14)*r21);
IkReal x677=(r01*sj5);
IkReal x678=((0.14)*sj4);
IkReal x679=(cj5*r00);
IkReal x680=((0.14)*cj4);
IkReal x681=(cj5*r21);
IkReal x682=((5.034)*sj4);
IkReal x683=(cj5*r20);
IkReal x684=(r21*sj5);
IkReal x685=(cj4*r22);
IkReal x686=((0.42)*cj4);
IkReal x687=((1.678)*sj4);
IkReal x688=((5.034)*x685);
IkReal x689=((0.012)*x681);
IkReal x690=((0.012)*x672);
IkReal x691=((0.004)*x681);
IkReal x692=((0.004)*x672);
IkReal x693=((1.678)*x685);
IkReal x694=(cj3*cj4*sj5);
IkReal x695=(x682*x684);
IkReal x696=(x682*x683);
IkReal x697=(x673*x679);
IkReal x698=(x684*x687);
IkReal x699=(x683*x687);
IkReal x700=(x672*x675);
IkReal x701=(x675*x681);
IkReal x702=(cj3*x684*x686);
IkReal x703=(x671+x699);
IkReal x704=(x670+x696);
IkReal x705=(((x673*x677))+x704+((r02*x686)));
IkReal x706=((-1.816)+x691+x692+x693+x698);
IkReal x707=(((x673*x674))+((cj3*x683*x686))+x704);
IkReal x708=(x689+x688+x695+x697+x690);
IkReal x709=(x689+x688+x695+x690+x702+x700+x701);
j1eval[0]=((IKabs(((-1.816)+(((-1.0)*x707))+x709)))+(IKabs(((1.816)+(((-1.0)*x707))+x709)))+(IKabs(((((-1.0)*r02*x680))+((x678*x679))+(((-1.0)*x703))+x706+(((-1.0)*x677*x678)))))+(IKabs(((1.816)+(((-1.0)*x705))+x708)))+(IKabs(((((0.14)*sj3*x672))+((cj5*sj3*x676))+(((-1.0)*x703))+((x676*x694))+x706+(((-1.0)*x674*x678))+(((-1.0)*cj3*x680*x683)))))+(IKabs(((-1.816)+(((-1.0)*x705))+x708))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x710=(sj4*sj5);
IkReal x711=(cj4*r22);
IkReal x712=(cj4*r02);
IkReal x713=(r20*sj5);
IkReal x714=(cj5*r21);
IkReal x715=((5.034)*x711);
IkReal x716=((0.012)*x714);
IkReal x717=((0.012)*x713);
IkReal x718=((0.004)*x714);
IkReal x719=((0.004)*x713);
IkReal x720=((1.678)*x711);
IkReal x721=(cj5*r00*sj4);
IkReal x722=(cj5*r20*sj4);
IkReal x723=((5.034)*r21*x710);
IkReal x724=((0.42)*x721);
IkReal x725=((1.678)*r21*x710);
IkReal x726=((0.14)*x721);
IkReal x727=((((12.0)*pz))+(((5.034)*x722))+(((0.42)*r01*x710))+(((0.42)*x712)));
IkReal x728=((((0.14)*x712))+(((4.0)*pz))+(((0.14)*r01*x710))+(((1.678)*x722)));
IkReal x729=(x715+x717+x716+x723+x724);
IkReal x730=(x719+x718+x720+x725+x726);
op[0]=((-1.816)+(((-1.0)*x728))+x730);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x727))+x729);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x727))+x729);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x728))+x730);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x731=(r20*sj5);
IkReal x732=((0.42)*cj3);
IkReal x733=(r22*sj4);
IkReal x734=(r21*sj5);
IkReal x735=((1.678)*sj4);
IkReal x736=((0.42)*sj3);
IkReal x737=(cj5*r21);
IkReal x738=((0.14)*sj3);
IkReal x739=((5.034)*sj4);
IkReal x740=(cj5*r20);
IkReal x741=(cj4*r22);
IkReal x742=((0.004)*x737);
IkReal x743=((0.004)*x731);
IkReal x744=((1.678)*x741);
IkReal x745=((5.034)*x741);
IkReal x746=((0.012)*x737);
IkReal x747=((0.012)*x731);
IkReal x748=((0.14)*cj3*cj4);
IkReal x749=(x737*x738);
IkReal x750=(x734*x735);
IkReal x751=(x731*x738);
IkReal x752=(x731*x736);
IkReal x753=(x734*x739);
IkReal x754=(x736*x737);
IkReal x755=(cj4*x732*x734);
IkReal x756=(x734*x748);
IkReal x757=((((12.0)*pz))+((cj4*x732*x740))+((x739*x740))+((x732*x733)));
IkReal x758=((((4.0)*pz))+(((0.14)*cj3*x733))+((x740*x748))+((x735*x740)));
IkReal x759=(x755+x754+x753+x752+x746+x747+x745);
IkReal x760=(x756+x751+x750+x744+x742+x743+x749);
j1evalpoly[0]=((1.816)+(((htj1*htj1)*(((1.816)+x759+(((-1.0)*x757))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+x760+(((-1.0)*x758))))))+(((htj1*htj1*htj1*htj1)*(((-1.816)+x759+(((-1.0)*x757))))))+x760+(((-1.0)*x758)));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x761=(sj1*sj4);
IkReal x762=(r01*sj5);
IkReal x763=((1.0)*cj1);
IkReal x764=(cj4*r22);
IkReal x765=(cj4*r02);
IkReal x766=(cj5*r20);
IkReal x767=(cj1*sj4);
IkReal x768=(cj5*r00);
IkReal x769=(r21*sj5);
if( IKabs(((((-1.0)*x761*x768))+(((-1.0)*x763*x764))+((sj1*x765))+((x761*x762))+((x766*x767))+(((-1.0)*sj4*x763*x769)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x761*x769))+(((-1.0)*sj1*x764))+(((-1.0)*x763*x765))+((x761*x766))+((x767*x768))+(((-1.0)*sj4*x762*x763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x761*x768))+(((-1.0)*x763*x764))+((sj1*x765))+((x761*x762))+((x766*x767))+(((-1.0)*sj4*x763*x769))))+IKsqr(((((-1.0)*x761*x769))+(((-1.0)*sj1*x764))+(((-1.0)*x763*x765))+((x761*x766))+((x767*x768))+(((-1.0)*sj4*x762*x763))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x761*x768))+(((-1.0)*x763*x764))+((sj1*x765))+((x761*x762))+((x766*x767))+(((-1.0)*sj4*x763*x769))), ((((-1.0)*x761*x769))+(((-1.0)*sj1*x764))+(((-1.0)*x763*x765))+((x761*x766))+((x767*x768))+(((-1.0)*sj4*x762*x763))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x770=IKcos(j2);
IkReal x771=IKsin(j2);
IkReal x772=((0.035)*sj1);
IkReal x773=((1.0)*cj3);
IkReal x774=(cj5*r00);
IkReal x775=(cj5*r01);
IkReal x776=(cj5*r20);
IkReal x777=(r00*sj5);
IkReal x778=(cj5*r21);
IkReal x779=((1.0)*cj4);
IkReal x780=(r20*sj5);
IkReal x781=(sj1*x771);
IkReal x782=(cj3*cj4*sj5);
IkReal x783=((1.0)*sj4*sj5);
IkReal x784=((1.0)*x770);
IkReal x785=(cj1*x771);
IkReal x786=(cj1*x770);
IkReal x787=(sj1*x770);
IkReal x788=(cj1*x784);
evalcond[0]=(((sj4*x774))+(((-1.0)*r01*x783))+(((-1.0)*x788))+(((-1.0)*r02*x779))+x781);
evalcond[1]=(((sj4*x776))+(((-1.0)*r22*x779))+(((-1.0)*r21*x783))+(((-1.0)*x785))+(((-1.0)*sj1*x784)));
evalcond[2]=(((r01*x782))+((sj3*x775))+((sj3*x777))+(((-1.0)*cj4*x773*x774))+x787+x785+(((-1.0)*r02*sj4*x773)));
evalcond[3]=((((-1.0)*r22*sj4*x773))+(((-1.0)*x788))+((r21*x782))+((sj3*x778))+(((-1.0)*cj4*x773*x776))+x781+((sj3*x780)));
evalcond[4]=((((0.001)*x780))+(((-0.4195)*x787))+(((-0.4195)*x785))+(((0.454)*cj1))+(((-1.0)*pz))+(((-1.0)*x771*x772))+(((0.001)*x778))+(((0.035)*x786)));
evalcond[5]=((-0.025)+(((-0.035)*x785))+(((-0.4195)*x786))+(((0.4195)*x781))+(((-1.0)*px))+(((-0.454)*sj1))+(((0.001)*x775))+(((0.001)*x777))+(((-1.0)*x770*x772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x789=((1.0)*cj5);
IkReal x790=((1.0)*sj5);
CheckValue<IkReal> x791 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x790))+(((-1.0)*r21*x789)))),IkReal((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x790)))),IKFAST_ATAN2_MAGTHRESH);
if(!x791.valid){
continue;
}
CheckValue<IkReal> x792=IKPowWithIntegerCheck(IKsign((((r01*sj4*sj5))+(((-1.0)*r00*sj4*x789))+((cj4*r02)))),-1);
if(!x792.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x791.value)+(((1.5707963267949)*(x792.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x793=IKsin(j3);
IkReal x794=IKcos(j3);
IkReal x795=(r10*sj5);
IkReal x796=(cj4*sj5);
IkReal x797=(cj5*r11);
IkReal x798=(cj4*cj5);
IkReal x799=(r12*sj4);
IkReal x800=((1.0)*x794);
IkReal x801=((1.0)*x793);
evalcond[0]=(((r11*x794*x796))+(((-1.0)*x799*x800))+((x793*x797))+((x793*x795))+(((-1.0)*r10*x798*x800)));
evalcond[1]=((((-1.0)*r20*x798*x801))+(((-1.0)*r20*sj5*x800))+(((-1.0)*r22*sj4*x801))+((r21*x793*x796))+(((-1.0)*cj5*r21*x800)));
evalcond[2]=((((-1.0)*r00*x798*x801))+(((-1.0)*r00*sj5*x800))+((r01*x793*x796))+(((-1.0)*r02*sj4*x801))+(((-1.0)*cj5*r01*x800)));
evalcond[3]=((-1.0)+(((-1.0)*x799*x801))+(((-1.0)*x797*x800))+((r11*x793*x796))+(((-1.0)*x795*x800))+(((-1.0)*r10*x798*x801)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x802=((12.0)*pz);
IkReal x803=((4.0)*pz);
IkReal x804=(r20*sj5);
IkReal x805=((0.42)*sj4);
IkReal x806=(cj3*r22);
IkReal x807=((0.42)*sj3);
IkReal x808=((0.14)*r21);
IkReal x809=(r01*sj5);
IkReal x810=((0.14)*sj4);
IkReal x811=(cj5*r00);
IkReal x812=((0.14)*cj4);
IkReal x813=(cj5*r21);
IkReal x814=((5.034)*sj4);
IkReal x815=(cj5*r20);
IkReal x816=(r21*sj5);
IkReal x817=(cj4*r22);
IkReal x818=((0.42)*cj4);
IkReal x819=((1.678)*sj4);
IkReal x820=((5.034)*x817);
IkReal x821=((0.012)*x813);
IkReal x822=((0.012)*x804);
IkReal x823=((0.004)*x813);
IkReal x824=((0.004)*x804);
IkReal x825=((1.678)*x817);
IkReal x826=(cj3*cj4*sj5);
IkReal x827=(x814*x816);
IkReal x828=(x814*x815);
IkReal x829=(x805*x811);
IkReal x830=(x816*x819);
IkReal x831=(x815*x819);
IkReal x832=(x804*x807);
IkReal x833=(x807*x813);
IkReal x834=(cj3*x816*x818);
IkReal x835=(x831+x803);
IkReal x836=(x828+x802);
IkReal x837=(((x805*x809))+x836+((r02*x818)));
IkReal x838=((-1.816)+x823+x825+x824+x830);
IkReal x839=(((x805*x806))+x836+((cj3*x815*x818)));
IkReal x840=(x829+x822+x821+x820+x827);
IkReal x841=(x822+x821+x820+x827+x834+x832+x833);
j1eval[0]=((IKabs(((-1.816)+(((-1.0)*x839))+x841)))+(IKabs(((1.816)+(((-1.0)*x837))+x840)))+(IKabs(((((-1.0)*cj3*x812*x815))+(((0.14)*sj3*x804))+((cj5*sj3*x808))+((x808*x826))+(((-1.0)*x835))+x838+(((-1.0)*x806*x810)))))+(IKabs(((1.816)+(((-1.0)*x839))+x841)))+(IKabs((((x810*x811))+(((-1.0)*x809*x810))+(((-1.0)*x835))+x838+(((-1.0)*r02*x812)))))+(IKabs(((-1.816)+(((-1.0)*x837))+x840))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x842=(sj4*sj5);
IkReal x843=(cj4*r22);
IkReal x844=(cj4*r02);
IkReal x845=(r20*sj5);
IkReal x846=(cj5*r21);
IkReal x847=((5.034)*x843);
IkReal x848=((0.012)*x846);
IkReal x849=((0.012)*x845);
IkReal x850=((0.004)*x846);
IkReal x851=((0.004)*x845);
IkReal x852=((1.678)*x843);
IkReal x853=(cj5*r00*sj4);
IkReal x854=(cj5*r20*sj4);
IkReal x855=((5.034)*r21*x842);
IkReal x856=((0.42)*x853);
IkReal x857=((1.678)*r21*x842);
IkReal x858=((0.14)*x853);
IkReal x859=((((12.0)*pz))+(((0.42)*r01*x842))+(((5.034)*x854))+(((0.42)*x844)));
IkReal x860=((((4.0)*pz))+(((1.678)*x854))+(((0.14)*r01*x842))+(((0.14)*x844)));
IkReal x861=(x856+x855+x847+x849+x848);
IkReal x862=(x852+x850+x851+x857+x858);
op[0]=((-1.816)+(((-1.0)*x860))+x862);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x859))+x861);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x859))+x861);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x860))+x862);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x863=(r20*sj5);
IkReal x864=((0.42)*cj3);
IkReal x865=(r22*sj4);
IkReal x866=(r21*sj5);
IkReal x867=((1.678)*sj4);
IkReal x868=((0.42)*sj3);
IkReal x869=(cj5*r21);
IkReal x870=((0.14)*sj3);
IkReal x871=((5.034)*sj4);
IkReal x872=(cj5*r20);
IkReal x873=(cj4*r22);
IkReal x874=((0.004)*x869);
IkReal x875=((0.004)*x863);
IkReal x876=((1.678)*x873);
IkReal x877=((5.034)*x873);
IkReal x878=((0.012)*x869);
IkReal x879=((0.012)*x863);
IkReal x880=((0.14)*cj3*cj4);
IkReal x881=(x869*x870);
IkReal x882=(x866*x867);
IkReal x883=(x863*x870);
IkReal x884=(x863*x868);
IkReal x885=(x866*x871);
IkReal x886=(x868*x869);
IkReal x887=(cj4*x864*x866);
IkReal x888=(x866*x880);
IkReal x889=(((x871*x872))+(((12.0)*pz))+((cj4*x864*x872))+((x864*x865)));
IkReal x890=(((x867*x872))+(((4.0)*pz))+(((0.14)*cj3*x865))+((x872*x880)));
IkReal x891=(x878+x879+x877+x885+x884+x887+x886);
IkReal x892=(x874+x875+x876+x881+x883+x882+x888);
j1evalpoly[0]=((1.816)+(((htj1*htj1)*(((1.816)+(((-1.0)*x889))+x891))))+(((-1.0)*x890))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x890))+x892))))+(((htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x889))+x891))))+x892);
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x893=(sj1*sj4);
IkReal x894=(r01*sj5);
IkReal x895=((1.0)*cj1);
IkReal x896=(cj4*r22);
IkReal x897=(cj4*r02);
IkReal x898=(cj5*r20);
IkReal x899=(cj1*sj4);
IkReal x900=(cj5*r00);
IkReal x901=(r21*sj5);
if( IKabs((((x898*x899))+((sj1*x897))+(((-1.0)*x895*x896))+((x893*x894))+(((-1.0)*sj4*x895*x901))+(((-1.0)*x893*x900)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x895*x897))+(((-1.0)*sj4*x894*x895))+(((-1.0)*sj1*x896))+((x899*x900))+((x893*x898))+(((-1.0)*x893*x901)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x898*x899))+((sj1*x897))+(((-1.0)*x895*x896))+((x893*x894))+(((-1.0)*sj4*x895*x901))+(((-1.0)*x893*x900))))+IKsqr(((((-1.0)*x895*x897))+(((-1.0)*sj4*x894*x895))+(((-1.0)*sj1*x896))+((x899*x900))+((x893*x898))+(((-1.0)*x893*x901))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x898*x899))+((sj1*x897))+(((-1.0)*x895*x896))+((x893*x894))+(((-1.0)*sj4*x895*x901))+(((-1.0)*x893*x900))), ((((-1.0)*x895*x897))+(((-1.0)*sj4*x894*x895))+(((-1.0)*sj1*x896))+((x899*x900))+((x893*x898))+(((-1.0)*x893*x901))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x902=IKcos(j2);
IkReal x903=IKsin(j2);
IkReal x904=((0.035)*sj1);
IkReal x905=((1.0)*cj3);
IkReal x906=(cj5*r00);
IkReal x907=(cj5*r01);
IkReal x908=(cj5*r20);
IkReal x909=(r00*sj5);
IkReal x910=(cj5*r21);
IkReal x911=((1.0)*cj4);
IkReal x912=(r20*sj5);
IkReal x913=(sj1*x903);
IkReal x914=(cj3*cj4*sj5);
IkReal x915=((1.0)*sj4*sj5);
IkReal x916=((1.0)*x902);
IkReal x917=(cj1*x903);
IkReal x918=(cj1*x902);
IkReal x919=(sj1*x902);
IkReal x920=(cj1*x916);
evalcond[0]=((((-1.0)*x920))+(((-1.0)*r01*x915))+(((-1.0)*r02*x911))+((sj4*x906))+x913);
evalcond[1]=((((-1.0)*r22*x911))+(((-1.0)*r21*x915))+(((-1.0)*sj1*x916))+(((-1.0)*x917))+((sj4*x908)));
evalcond[2]=(((sj3*x909))+((sj3*x907))+(((-1.0)*r02*sj4*x905))+(((-1.0)*cj4*x905*x906))+x919+x917+((r01*x914)));
evalcond[3]=((((-1.0)*x920))+((sj3*x912))+((sj3*x910))+(((-1.0)*cj4*x905*x908))+((r21*x914))+(((-1.0)*r22*sj4*x905))+x913);
evalcond[4]=((((-1.0)*x903*x904))+(((0.454)*cj1))+(((-0.4195)*x919))+(((-0.4195)*x917))+(((0.001)*x912))+(((0.001)*x910))+(((-1.0)*pz))+(((0.035)*x918)));
evalcond[5]=((-0.025)+(((-1.0)*x902*x904))+(((-0.4195)*x918))+(((0.4195)*x913))+(((0.001)*x907))+(((0.001)*x909))+(((-1.0)*px))+(((-0.454)*sj1))+(((-0.035)*x917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x921=((1.0)*r11);
IkReal x922=(((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)));
j3eval[0]=x922;
j3eval[1]=IKsign(x922);
j3eval[2]=((IKabs(((((-1.0)*cj4*sj5*x921))+((cj4*cj5*r10))+((r12*sj4)))))+(IKabs(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x921))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x923=((1.0)*sj5);
IkReal x924=(((cj5*r10*sj4))+(((-1.0)*r11*sj4*x923))+(((-1.0)*cj4*r12)));
j3eval[0]=x924;
j3eval[1]=((IKabs(((((-1.0)*r20*x923))+(((-1.0)*cj5*r21)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x923))))));
j3eval[2]=IKsign(x924);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x925=r00*r00;
IkReal x926=cj5*cj5;
IkReal x927=cj4*cj4;
IkReal x928=r01*r01;
IkReal x929=r02*r02;
IkReal x930=(cj5*r00);
IkReal x931=(r02*sj4);
IkReal x932=((2.0)*r01*sj5);
IkReal x933=((1.0)*x927);
IkReal x934=(x925*x926);
IkReal x935=(x926*x928);
IkReal x936=(((x927*x934))+((x927*x928))+((x930*x932))+(((-1.0)*x934))+(((-1.0)*x929*x933))+(((-1.0)*cj4*x931*x932))+(((-1.0)*x933*x935))+(((2.0)*cj4*x930*x931))+x935+x929+x925+(((-1.0)*x927*x930*x932)));
j3eval[0]=x936;
j3eval[1]=((IKabs(((((-1.0)*cj4*x930))+(((-1.0)*x931))+((cj4*r01*sj5)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
j3eval[2]=IKsign(x936);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x937=r00*r00;
IkReal x938=cj5*cj5;
IkReal x939=cj4*cj4;
IkReal x940=r01*r01;
IkReal x941=r02*r02;
IkReal x942=(cj5*r00);
IkReal x943=(r02*sj4);
IkReal x944=((2.0)*r01*sj5);
IkReal x945=((1.0)*x939);
IkReal x946=(x937*x938);
IkReal x947=(x938*x940);
CheckValue<IkReal> x948 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x942))+(((-1.0)*x943))+((cj4*r01*sj5)))),IkReal(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x948.valid){
continue;
}
CheckValue<IkReal> x949=IKPowWithIntegerCheck(IKsign(((((2.0)*cj4*x942*x943))+(((-1.0)*x939*x942*x944))+(((-1.0)*x945*x947))+((x939*x940))+((x939*x946))+(((-1.0)*x941*x945))+(((-1.0)*x946))+((x942*x944))+(((-1.0)*cj4*x943*x944))+x937+x941+x947)),-1);
if(!x949.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x948.value)+(((1.5707963267949)*(x949.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x950=IKsin(j3);
IkReal x951=IKcos(j3);
IkReal x952=(r02*sj4);
IkReal x953=(cj4*cj5);
IkReal x954=(cj4*sj5);
IkReal x955=(cj5*r01);
IkReal x956=(r00*sj5);
IkReal x957=((1.0)*x951);
IkReal x958=((1.0)*x950);
evalcond[0]=(((r01*x951*x954))+(((-1.0)*r00*x953*x957))+(((-1.0)*x952*x957))+((x950*x955))+((x950*x956)));
evalcond[1]=((((-1.0)*r20*x953*x958))+(((-1.0)*r22*sj4*x958))+(((-1.0)*r20*sj5*x957))+((r21*x950*x954))+(((-1.0)*cj5*r21*x957)));
evalcond[2]=(((r11*x950*x954))+(((-1.0)*r10*x953*x958))+(((-1.0)*r10*sj5*x957))+(((-1.0)*cj5*r11*x957))+(((-1.0)*r12*sj4*x958)));
evalcond[3]=((-1.0)+((r01*x950*x954))+(((-1.0)*r00*x953*x958))+(((-1.0)*x956*x957))+(((-1.0)*x955*x957))+(((-1.0)*x952*x958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x959=((5.034)*py);
IkReal x960=((0.42)*pz);
IkReal x961=((12.0)*pz);
IkReal x962=(r20*sj5);
IkReal x963=(cj4*r12);
IkReal x964=(cj5*r11);
IkReal x965=(sj4*sj5);
IkReal x966=(cj5*r21);
IkReal x967=(r10*sj5);
IkReal x968=(cj4*r22);
IkReal x969=(cj5*r10*sj4);
IkReal x970=(cj5*r20*sj4);
IkReal x971=((2.126463)*x969);
IkReal x972=((5.034)*x970);
IkReal x973=((0.42)*x969);
IkReal x974=(x971+x960+x959);
IkReal x975=(x973+x972+x961);
IkReal x976=((((0.00042)*x962))+(((0.00042)*x966))+(((2.126463)*x963))+(((2.126463)*r11*x965))+(((0.005034)*x967))+(((0.005034)*x964)));
IkReal x977=((((5.034)*x968))+(((0.42)*x963))+(((5.034)*r21*x965))+(((0.012)*x966))+(((0.012)*x962))+(((0.42)*r11*x965)));
j1eval[0]=((6.094496)+(IKabs(((1.816)+x975+(((-1.0)*x977)))))+(IKabs(((-0.18941)+x974+(((-1.0)*x976)))))+(IKabs(((-0.06229)+x974+(((-1.0)*x976)))))+(IKabs(((0.02161)+(((-0.001678)*x967))+(((-0.001678)*x964))+(((0.708821)*x969))+(((-0.708821)*r11*x965))+(((0.14)*pz))+(((-0.708821)*x963))+(((1.678)*py))+(((-0.00014)*x962))+(((-0.00014)*x966)))))+(IKabs(((-1.816)+x975+(((-1.0)*x977)))))+(IKabs(((1.816)+(((-0.004)*x966))+(((-0.004)*x962))+(((1.678)*x970))+(((4.0)*pz))+(((-1.678)*x968))+(((-0.14)*r11*x965))+(((-1.678)*r21*x965))+(((-0.14)*x963))+(((0.14)*x969))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x978=((12.0)*pz);
IkReal x979=((4.0)*pz);
IkReal x980=(cj4*r12);
IkReal x981=((0.42)*sj4);
IkReal x982=(r11*sj5);
IkReal x983=(cj4*r22);
IkReal x984=((1.678)*sj4);
IkReal x985=(cj5*r20);
IkReal x986=(cj5*r21);
IkReal x987=(cj5*r10);
IkReal x988=(r21*sj5);
IkReal x989=((5.034)*sj4);
IkReal x990=(r20*sj5);
IkReal x991=((0.14)*sj4);
IkReal x992=(x985*x989);
IkReal x993=(x981*x987);
IkReal x994=(x984*x985);
IkReal x995=(x987*x991);
IkReal x996=(x993+x992+x978);
IkReal x997=(x995+x994+x979);
IkReal x998=(((x981*x982))+(((0.012)*x990))+((x988*x989))+(((0.42)*x980))+(((5.034)*x983))+(((0.012)*x986)));
IkReal x999=((((1.678)*x983))+(((0.004)*x986))+(((0.004)*x990))+(((0.14)*x980))+((x984*x988))+((x982*x991)));
op[0]=((1.816)+(((-1.0)*x999))+x997);
op[1]=0;
op[2]=((1.816)+(((-1.0)*x998))+x996);
op[3]=0;
op[4]=((-1.816)+(((-1.0)*x998))+x996);
op[5]=0;
op[6]=((-1.816)+(((-1.0)*x999))+x997);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1000=((0.14)*pz);
IkReal x1001=((5.034)*py);
IkReal x1002=((0.42)*pz);
IkReal x1003=((1.678)*py);
IkReal x1004=(cj4*r12);
IkReal x1005=(cj5*r11);
IkReal x1006=(cj5*r21);
IkReal x1007=(r10*sj5);
IkReal x1008=(r20*sj5);
IkReal x1009=((0.708821)*x1004);
IkReal x1010=((0.001678)*x1005);
IkReal x1011=((0.00014)*x1008);
IkReal x1012=((0.001678)*x1007);
IkReal x1013=((0.00014)*x1006);
IkReal x1014=(cj5*r10*sj4);
IkReal x1015=(r11*sj4*sj5);
IkReal x1016=((0.708821)*x1014);
IkReal x1017=((2.126463)*x1014);
IkReal x1018=((0.708821)*x1015);
IkReal x1019=(x1017+x1002+x1001);
IkReal x1020=(x1016+x1003+x1000);
IkReal x1021=((((0.00042)*x1006))+(((0.00042)*x1008))+(((2.126463)*x1004))+(((0.005034)*x1007))+(((0.005034)*x1005))+(((2.126463)*x1015)));
IkReal x1022=(x1018+x1010+x1011+x1012+x1013+x1009);
j1evalpoly[0]=((-0.10551)+(((-1.523624)*htj1))+x1020+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+x1020+(((-1.0)*x1022))))))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((-1.0)*x1022))+(((htj1*htj1)*(((-0.18941)+x1019+(((-1.0)*x1021))))))+(((-3.047248)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.06229)+x1019+(((-1.0)*x1021)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1023=(cj1*cj4);
IkReal x1024=((1.0)*r22);
IkReal x1025=(cj5*sj4);
IkReal x1026=((1.0)*cj1);
IkReal x1027=((1.0)*sj1);
IkReal x1028=(sj4*sj5);
if( IKabs(((((-1.0)*x1023*x1024))+(((-1.0)*r11*x1027*x1028))+((r10*sj1*x1025))+(((-1.0)*r21*x1026*x1028))+(((-1.0)*cj4*r12*x1027))+((cj1*r20*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1025))+((r12*x1023))+(((-1.0)*r10*x1025*x1026))+((cj1*r11*x1028))+(((-1.0)*r21*x1027*x1028))+(((-1.0)*cj4*sj1*x1024)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1023*x1024))+(((-1.0)*r11*x1027*x1028))+((r10*sj1*x1025))+(((-1.0)*r21*x1026*x1028))+(((-1.0)*cj4*r12*x1027))+((cj1*r20*x1025))))+IKsqr((((r20*sj1*x1025))+((r12*x1023))+(((-1.0)*r10*x1025*x1026))+((cj1*r11*x1028))+(((-1.0)*r21*x1027*x1028))+(((-1.0)*cj4*sj1*x1024))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1023*x1024))+(((-1.0)*r11*x1027*x1028))+((r10*sj1*x1025))+(((-1.0)*r21*x1026*x1028))+(((-1.0)*cj4*r12*x1027))+((cj1*r20*x1025))), (((r20*sj1*x1025))+((r12*x1023))+(((-1.0)*r10*x1025*x1026))+((cj1*r11*x1028))+(((-1.0)*r21*x1027*x1028))+(((-1.0)*cj4*sj1*x1024))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1029=IKcos(j2);
IkReal x1030=IKsin(j2);
IkReal x1031=(cj3*cj4);
IkReal x1032=(r21*sj5);
IkReal x1033=((1.0)*sj4);
IkReal x1034=((1.0)*cj5);
IkReal x1035=(cj5*r11);
IkReal x1036=(cj5*r21);
IkReal x1037=(cj5*sj4);
IkReal x1038=((1.0)*cj4);
IkReal x1039=((0.001)*sj5);
IkReal x1040=(sj3*sj5);
IkReal x1041=(r11*sj5);
IkReal x1042=(cj1*x1029);
IkReal x1043=(sj1*x1030);
IkReal x1044=(sj1*x1029);
IkReal x1045=(cj1*x1030);
IkReal x1046=((1.0)*x1044);
IkReal x1047=((1.0)*x1045);
IkReal x1048=(x1047+x1046);
evalcond[0]=(((r10*x1037))+x1042+(((-1.0)*x1033*x1041))+(((-1.0)*r12*x1038))+(((-1.0)*x1043)));
evalcond[1]=((((-1.0)*x1032*x1033))+((r20*x1037))+(((-1.0)*r22*x1038))+(((-1.0)*x1048)));
evalcond[2]=(((x1031*x1032))+x1043+(((-1.0)*cj3*r22*x1033))+(((-1.0)*r20*x1031*x1034))+((r20*x1040))+((sj3*x1036))+(((-1.0)*x1042)));
evalcond[3]=((((-1.0)*cj3*r12*x1033))+((x1031*x1041))+((sj3*x1035))+((r10*x1040))+(((-1.0)*x1048))+(((-1.0)*r10*x1031*x1034)));
evalcond[4]=((((-0.035)*x1043))+(((0.454)*cj1))+(((-1.0)*pz))+(((-0.4195)*x1044))+(((-0.4195)*x1045))+((r20*x1039))+(((0.035)*x1042))+(((0.001)*x1036)));
evalcond[5]=((0.025)+((r10*x1039))+(((0.4195)*x1042))+(((-1.0)*py))+(((-0.4195)*x1043))+(((0.454)*sj1))+(((0.035)*x1045))+(((0.035)*x1044))+(((0.001)*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1049=((1.0)*sj5);
CheckValue<IkReal> x1050 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r21))+(((-1.0)*r20*x1049)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x1049))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1050.valid){
continue;
}
CheckValue<IkReal> x1051=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj4*x1049))+((cj5*r10*sj4))+(((-1.0)*cj4*r12)))),-1);
if(!x1051.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1050.value)+(((1.5707963267949)*(x1051.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1052=IKsin(j3);
IkReal x1053=IKcos(j3);
IkReal x1054=(r02*sj4);
IkReal x1055=(cj4*cj5);
IkReal x1056=(cj4*sj5);
IkReal x1057=(cj5*r01);
IkReal x1058=(r00*sj5);
IkReal x1059=((1.0)*x1053);
IkReal x1060=((1.0)*x1052);
evalcond[0]=(((x1052*x1058))+((x1052*x1057))+(((-1.0)*r00*x1055*x1059))+(((-1.0)*x1054*x1059))+((r01*x1053*x1056)));
evalcond[1]=((((-1.0)*cj5*r21*x1059))+(((-1.0)*r20*sj5*x1059))+((r21*x1052*x1056))+(((-1.0)*r22*sj4*x1060))+(((-1.0)*r20*x1055*x1060)));
evalcond[2]=(((r11*x1052*x1056))+(((-1.0)*r12*sj4*x1060))+(((-1.0)*r10*x1055*x1060))+(((-1.0)*r10*sj5*x1059))+(((-1.0)*cj5*r11*x1059)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x1055*x1060))+(((-1.0)*x1058*x1059))+(((-1.0)*x1054*x1060))+(((-1.0)*x1057*x1059))+((r01*x1052*x1056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1061=((5.034)*py);
IkReal x1062=((0.42)*pz);
IkReal x1063=((12.0)*pz);
IkReal x1064=(r20*sj5);
IkReal x1065=(cj4*r12);
IkReal x1066=(cj5*r11);
IkReal x1067=(sj4*sj5);
IkReal x1068=(cj5*r21);
IkReal x1069=(r10*sj5);
IkReal x1070=(cj4*r22);
IkReal x1071=(cj5*r10*sj4);
IkReal x1072=(cj5*r20*sj4);
IkReal x1073=((2.126463)*x1071);
IkReal x1074=((5.034)*x1072);
IkReal x1075=((0.42)*x1071);
IkReal x1076=(x1073+x1061+x1062);
IkReal x1077=(x1074+x1075+x1063);
IkReal x1078=((((2.126463)*r11*x1067))+(((0.00042)*x1068))+(((0.00042)*x1064))+(((0.005034)*x1066))+(((0.005034)*x1069))+(((2.126463)*x1065)));
IkReal x1079=((((0.42)*x1065))+(((5.034)*x1070))+(((0.012)*x1064))+(((0.012)*x1068))+(((0.42)*r11*x1067))+(((5.034)*r21*x1067)));
j1eval[0]=((6.094496)+(IKabs(((-0.06229)+x1076+(((-1.0)*x1078)))))+(IKabs(((-1.816)+x1077+(((-1.0)*x1079)))))+(IKabs(((-0.18941)+x1076+(((-1.0)*x1078)))))+(IKabs(((0.02161)+(((-0.708821)*x1065))+(((0.14)*pz))+(((0.708821)*x1071))+(((-0.00014)*x1068))+(((-0.00014)*x1064))+(((-0.001678)*x1066))+(((-0.001678)*x1069))+(((1.678)*py))+(((-0.708821)*r11*x1067)))))+(IKabs(((1.816)+(((4.0)*pz))+(((-0.14)*r11*x1067))+(((0.14)*x1071))+(((-0.14)*x1065))+(((-0.004)*x1064))+(((-0.004)*x1068))+(((-1.678)*r21*x1067))+(((1.678)*x1072))+(((-1.678)*x1070)))))+(IKabs(((1.816)+x1077+(((-1.0)*x1079))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1080=((12.0)*pz);
IkReal x1081=((4.0)*pz);
IkReal x1082=(cj4*r12);
IkReal x1083=((0.42)*sj4);
IkReal x1084=(r11*sj5);
IkReal x1085=(cj4*r22);
IkReal x1086=((1.678)*sj4);
IkReal x1087=(cj5*r20);
IkReal x1088=(cj5*r21);
IkReal x1089=(cj5*r10);
IkReal x1090=(r21*sj5);
IkReal x1091=((5.034)*sj4);
IkReal x1092=(r20*sj5);
IkReal x1093=((0.14)*sj4);
IkReal x1094=(x1087*x1091);
IkReal x1095=(x1083*x1089);
IkReal x1096=(x1086*x1087);
IkReal x1097=(x1089*x1093);
IkReal x1098=(x1094+x1095+x1080);
IkReal x1099=(x1096+x1097+x1081);
IkReal x1100=((((0.012)*x1092))+(((0.42)*x1082))+(((5.034)*x1085))+(((0.012)*x1088))+((x1090*x1091))+((x1083*x1084)));
IkReal x1101=(((x1084*x1093))+((x1086*x1090))+(((0.14)*x1082))+(((0.004)*x1088))+(((1.678)*x1085))+(((0.004)*x1092)));
op[0]=((1.816)+x1099+(((-1.0)*x1101)));
op[1]=0;
op[2]=((1.816)+x1098+(((-1.0)*x1100)));
op[3]=0;
op[4]=((-1.816)+x1098+(((-1.0)*x1100)));
op[5]=0;
op[6]=((-1.816)+x1099+(((-1.0)*x1101)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1102=((0.14)*pz);
IkReal x1103=((5.034)*py);
IkReal x1104=((0.42)*pz);
IkReal x1105=((1.678)*py);
IkReal x1106=(cj4*r12);
IkReal x1107=(cj5*r11);
IkReal x1108=(cj5*r21);
IkReal x1109=(r10*sj5);
IkReal x1110=(r20*sj5);
IkReal x1111=((0.708821)*x1106);
IkReal x1112=((0.001678)*x1107);
IkReal x1113=((0.00014)*x1110);
IkReal x1114=((0.001678)*x1109);
IkReal x1115=((0.00014)*x1108);
IkReal x1116=(cj5*r10*sj4);
IkReal x1117=(r11*sj4*sj5);
IkReal x1118=((0.708821)*x1116);
IkReal x1119=((2.126463)*x1116);
IkReal x1120=((0.708821)*x1117);
IkReal x1121=(x1104+x1103+x1119);
IkReal x1122=(x1105+x1102+x1118);
IkReal x1123=((((0.00042)*x1110))+(((0.00042)*x1108))+(((2.126463)*x1117))+(((2.126463)*x1106))+(((0.005034)*x1109))+(((0.005034)*x1107)));
IkReal x1124=(x1111+x1113+x1112+x1115+x1114+x1120);
j1evalpoly[0]=((-0.10551)+(((htj1*htj1)*(((-0.18941)+x1121+(((-1.0)*x1123))))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+x1122+(((-1.0)*x1124))))))+x1122+(((-1.523624)*htj1))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((-3.047248)*(htj1*htj1*htj1)))+(((-1.0)*x1124))+(((htj1*htj1*htj1*htj1)*(((-0.06229)+x1121+(((-1.0)*x1123)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1125=(cj1*cj4);
IkReal x1126=((1.0)*r22);
IkReal x1127=(cj5*sj4);
IkReal x1128=((1.0)*cj1);
IkReal x1129=((1.0)*sj1);
IkReal x1130=(sj4*sj5);
if( IKabs(((((-1.0)*r11*x1129*x1130))+(((-1.0)*cj4*r12*x1129))+(((-1.0)*r21*x1128*x1130))+((cj1*r20*x1127))+((r10*sj1*x1127))+(((-1.0)*x1125*x1126)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj4*sj1*x1126))+(((-1.0)*r10*x1127*x1128))+(((-1.0)*r21*x1129*x1130))+((r20*sj1*x1127))+((r12*x1125))+((cj1*r11*x1130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x1129*x1130))+(((-1.0)*cj4*r12*x1129))+(((-1.0)*r21*x1128*x1130))+((cj1*r20*x1127))+((r10*sj1*x1127))+(((-1.0)*x1125*x1126))))+IKsqr(((((-1.0)*cj4*sj1*x1126))+(((-1.0)*r10*x1127*x1128))+(((-1.0)*r21*x1129*x1130))+((r20*sj1*x1127))+((r12*x1125))+((cj1*r11*x1130))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r11*x1129*x1130))+(((-1.0)*cj4*r12*x1129))+(((-1.0)*r21*x1128*x1130))+((cj1*r20*x1127))+((r10*sj1*x1127))+(((-1.0)*x1125*x1126))), ((((-1.0)*cj4*sj1*x1126))+(((-1.0)*r10*x1127*x1128))+(((-1.0)*r21*x1129*x1130))+((r20*sj1*x1127))+((r12*x1125))+((cj1*r11*x1130))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1131=IKcos(j2);
IkReal x1132=IKsin(j2);
IkReal x1133=(cj3*cj4);
IkReal x1134=(r21*sj5);
IkReal x1135=((1.0)*sj4);
IkReal x1136=((1.0)*cj5);
IkReal x1137=(cj5*r11);
IkReal x1138=(cj5*r21);
IkReal x1139=(cj5*sj4);
IkReal x1140=((1.0)*cj4);
IkReal x1141=((0.001)*sj5);
IkReal x1142=(sj3*sj5);
IkReal x1143=(r11*sj5);
IkReal x1144=(cj1*x1131);
IkReal x1145=(sj1*x1132);
IkReal x1146=(sj1*x1131);
IkReal x1147=(cj1*x1132);
IkReal x1148=((1.0)*x1146);
IkReal x1149=((1.0)*x1147);
IkReal x1150=(x1148+x1149);
evalcond[0]=((((-1.0)*x1135*x1143))+x1144+((r10*x1139))+(((-1.0)*x1145))+(((-1.0)*r12*x1140)));
evalcond[1]=((((-1.0)*x1150))+(((-1.0)*x1134*x1135))+(((-1.0)*r22*x1140))+((r20*x1139)));
evalcond[2]=(x1145+(((-1.0)*x1144))+((r20*x1142))+((sj3*x1138))+((x1133*x1134))+(((-1.0)*cj3*r22*x1135))+(((-1.0)*r20*x1133*x1136)));
evalcond[3]=((((-1.0)*x1150))+((x1133*x1143))+(((-1.0)*cj3*r12*x1135))+((sj3*x1137))+(((-1.0)*r10*x1133*x1136))+((r10*x1142)));
evalcond[4]=((((-0.4195)*x1147))+(((-0.4195)*x1146))+(((0.035)*x1144))+(((0.454)*cj1))+(((-0.035)*x1145))+(((0.001)*x1138))+(((-1.0)*pz))+((r20*x1141)));
evalcond[5]=((0.025)+(((-0.4195)*x1145))+(((0.035)*x1147))+(((0.035)*x1146))+(((0.001)*x1137))+(((0.4195)*x1144))+(((-1.0)*py))+(((0.454)*sj1))+((r10*x1141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1151=((1.0)*r11);
CheckValue<IkReal> x1152 = IKatan2WithCheck(IkReal(((((-1.0)*r10*sj5))+(((-1.0)*cj5*x1151)))),IkReal((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x1151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1152.valid){
continue;
}
CheckValue<IkReal> x1153=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*cj5*r20*sj4)))),-1);
if(!x1153.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1152.value)+(((1.5707963267949)*(x1153.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1154=IKsin(j3);
IkReal x1155=IKcos(j3);
IkReal x1156=(r02*sj4);
IkReal x1157=(cj4*cj5);
IkReal x1158=(cj4*sj5);
IkReal x1159=(cj5*r01);
IkReal x1160=(r00*sj5);
IkReal x1161=((1.0)*x1155);
IkReal x1162=((1.0)*x1154);
evalcond[0]=((((-1.0)*x1156*x1161))+(((-1.0)*r00*x1157*x1161))+((x1154*x1160))+((x1154*x1159))+((r01*x1155*x1158)));
evalcond[1]=((((-1.0)*cj5*r21*x1161))+((r21*x1154*x1158))+(((-1.0)*r20*x1157*x1162))+(((-1.0)*r22*sj4*x1162))+(((-1.0)*r20*sj5*x1161)));
evalcond[2]=((((-1.0)*r10*x1157*x1162))+(((-1.0)*r10*sj5*x1161))+(((-1.0)*r12*sj4*x1162))+(((-1.0)*cj5*r11*x1161))+((r11*x1154*x1158)));
evalcond[3]=((-1.0)+(((-1.0)*x1156*x1162))+((r01*x1154*x1158))+(((-1.0)*r00*x1157*x1162))+(((-1.0)*x1159*x1161))+(((-1.0)*x1160*x1161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x1163=((5.034)*py);
IkReal x1164=((0.42)*pz);
IkReal x1165=((12.0)*pz);
IkReal x1166=(r20*sj5);
IkReal x1167=(cj4*r12);
IkReal x1168=(cj5*r11);
IkReal x1169=(sj4*sj5);
IkReal x1170=(cj5*r21);
IkReal x1171=(r10*sj5);
IkReal x1172=(cj4*r22);
IkReal x1173=(cj5*r10*sj4);
IkReal x1174=(cj5*r20*sj4);
IkReal x1175=((2.126463)*x1173);
IkReal x1176=((5.034)*x1174);
IkReal x1177=((0.42)*x1173);
IkReal x1178=(x1164+x1163+x1175);
IkReal x1179=(x1165+x1177+x1176);
IkReal x1180=((((0.00042)*x1170))+(((0.00042)*x1166))+(((2.126463)*r11*x1169))+(((0.005034)*x1168))+(((2.126463)*x1167))+(((0.005034)*x1171)));
IkReal x1181=((((0.012)*x1170))+(((0.012)*x1166))+(((0.42)*x1167))+(((5.034)*x1172))+(((5.034)*r21*x1169))+(((0.42)*r11*x1169)));
j1eval[0]=((6.094496)+(IKabs(((-1.816)+x1179+(((-1.0)*x1181)))))+(IKabs(((1.816)+x1179+(((-1.0)*x1181)))))+(IKabs(((-0.06229)+x1178+(((-1.0)*x1180)))))+(IKabs(((-0.18941)+x1178+(((-1.0)*x1180)))))+(IKabs(((1.816)+(((0.14)*x1173))+(((-0.14)*x1167))+(((4.0)*pz))+(((-1.678)*x1172))+(((-0.004)*x1170))+(((-0.004)*x1166))+(((-0.14)*r11*x1169))+(((1.678)*x1174))+(((-1.678)*r21*x1169)))))+(IKabs(((0.02161)+(((-0.00014)*x1170))+(((-0.708821)*r11*x1169))+(((-0.708821)*x1167))+(((0.14)*pz))+(((1.678)*py))+(((0.708821)*x1173))+(((-0.001678)*x1171))+(((-0.001678)*x1168))+(((-0.00014)*x1166))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1182=((12.0)*pz);
IkReal x1183=((4.0)*pz);
IkReal x1184=(cj4*r12);
IkReal x1185=((0.42)*sj4);
IkReal x1186=(r11*sj5);
IkReal x1187=(cj4*r22);
IkReal x1188=((1.678)*sj4);
IkReal x1189=(cj5*r20);
IkReal x1190=(cj5*r21);
IkReal x1191=(cj5*r10);
IkReal x1192=(r21*sj5);
IkReal x1193=((5.034)*sj4);
IkReal x1194=(r20*sj5);
IkReal x1195=((0.14)*sj4);
IkReal x1196=(x1189*x1193);
IkReal x1197=(x1185*x1191);
IkReal x1198=(x1188*x1189);
IkReal x1199=(x1191*x1195);
IkReal x1200=(x1182+x1197+x1196);
IkReal x1201=(x1183+x1199+x1198);
IkReal x1202=(((x1185*x1186))+((x1192*x1193))+(((0.012)*x1194))+(((0.012)*x1190))+(((0.42)*x1184))+(((5.034)*x1187)));
IkReal x1203=((((1.678)*x1187))+((x1186*x1195))+((x1188*x1192))+(((0.14)*x1184))+(((0.004)*x1194))+(((0.004)*x1190)));
op[0]=((1.816)+x1201+(((-1.0)*x1203)));
op[1]=0;
op[2]=((1.816)+x1200+(((-1.0)*x1202)));
op[3]=0;
op[4]=((-1.816)+x1200+(((-1.0)*x1202)));
op[5]=0;
op[6]=((-1.816)+x1201+(((-1.0)*x1203)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1204=((0.14)*pz);
IkReal x1205=((5.034)*py);
IkReal x1206=((0.42)*pz);
IkReal x1207=((1.678)*py);
IkReal x1208=(cj4*r12);
IkReal x1209=(cj5*r11);
IkReal x1210=(cj5*r21);
IkReal x1211=(r10*sj5);
IkReal x1212=(r20*sj5);
IkReal x1213=((0.708821)*x1208);
IkReal x1214=((0.001678)*x1209);
IkReal x1215=((0.00014)*x1212);
IkReal x1216=((0.001678)*x1211);
IkReal x1217=((0.00014)*x1210);
IkReal x1218=(cj5*r10*sj4);
IkReal x1219=(r11*sj4*sj5);
IkReal x1220=((0.708821)*x1218);
IkReal x1221=((2.126463)*x1218);
IkReal x1222=((0.708821)*x1219);
IkReal x1223=(x1205+x1206+x1221);
IkReal x1224=(x1204+x1207+x1220);
IkReal x1225=((((2.126463)*x1219))+(((0.005034)*x1209))+(((2.126463)*x1208))+(((0.00042)*x1212))+(((0.00042)*x1210))+(((0.005034)*x1211)));
IkReal x1226=(x1222+x1213+x1216+x1217+x1214+x1215);
j1evalpoly[0]=((-0.10551)+x1224+(((-1.523624)*htj1))+(((htj1*htj1)*(((-0.18941)+x1223+(((-1.0)*x1225))))))+(((-1.0)*x1226))+(((-1.523624)*(htj1*htj1*htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1)*(((-0.06229)+x1223+(((-1.0)*x1225))))))+(((-3.047248)*(htj1*htj1*htj1)))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((0.02161)+x1224+(((-1.0)*x1226)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1227=(cj1*cj4);
IkReal x1228=((1.0)*r22);
IkReal x1229=(cj5*sj4);
IkReal x1230=((1.0)*cj1);
IkReal x1231=((1.0)*sj1);
IkReal x1232=(sj4*sj5);
if( IKabs((((cj1*r20*x1229))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*r11*x1231*x1232))+(((-1.0)*x1227*x1228))+((r10*sj1*x1229))+(((-1.0)*cj4*r12*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*sj1*x1229))+(((-1.0)*cj4*sj1*x1228))+(((-1.0)*r10*x1229*x1230))+(((-1.0)*r21*x1231*x1232))+((cj1*r11*x1232))+((r12*x1227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r20*x1229))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*r11*x1231*x1232))+(((-1.0)*x1227*x1228))+((r10*sj1*x1229))+(((-1.0)*cj4*r12*x1231))))+IKsqr((((r20*sj1*x1229))+(((-1.0)*cj4*sj1*x1228))+(((-1.0)*r10*x1229*x1230))+(((-1.0)*r21*x1231*x1232))+((cj1*r11*x1232))+((r12*x1227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r20*x1229))+(((-1.0)*r21*x1230*x1232))+(((-1.0)*r11*x1231*x1232))+(((-1.0)*x1227*x1228))+((r10*sj1*x1229))+(((-1.0)*cj4*r12*x1231))), (((r20*sj1*x1229))+(((-1.0)*cj4*sj1*x1228))+(((-1.0)*r10*x1229*x1230))+(((-1.0)*r21*x1231*x1232))+((cj1*r11*x1232))+((r12*x1227))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1233=IKcos(j2);
IkReal x1234=IKsin(j2);
IkReal x1235=(cj3*cj4);
IkReal x1236=(r21*sj5);
IkReal x1237=((1.0)*sj4);
IkReal x1238=((1.0)*cj5);
IkReal x1239=(cj5*r11);
IkReal x1240=(cj5*r21);
IkReal x1241=(cj5*sj4);
IkReal x1242=((1.0)*cj4);
IkReal x1243=((0.001)*sj5);
IkReal x1244=(sj3*sj5);
IkReal x1245=(r11*sj5);
IkReal x1246=(cj1*x1233);
IkReal x1247=(sj1*x1234);
IkReal x1248=(sj1*x1233);
IkReal x1249=(cj1*x1234);
IkReal x1250=((1.0)*x1248);
IkReal x1251=((1.0)*x1249);
IkReal x1252=(x1250+x1251);
evalcond[0]=(x1246+(((-1.0)*x1247))+(((-1.0)*r12*x1242))+(((-1.0)*x1237*x1245))+((r10*x1241)));
evalcond[1]=((((-1.0)*x1252))+((r20*x1241))+(((-1.0)*x1236*x1237))+(((-1.0)*r22*x1242)));
evalcond[2]=(x1247+((x1235*x1236))+(((-1.0)*x1246))+(((-1.0)*cj3*r22*x1237))+((r20*x1244))+((sj3*x1240))+(((-1.0)*r20*x1235*x1238)));
evalcond[3]=((((-1.0)*x1252))+((sj3*x1239))+(((-1.0)*cj3*r12*x1237))+(((-1.0)*r10*x1235*x1238))+((x1235*x1245))+((r10*x1244)));
evalcond[4]=((((0.454)*cj1))+((r20*x1243))+(((-1.0)*pz))+(((-0.035)*x1247))+(((-0.4195)*x1248))+(((-0.4195)*x1249))+(((0.035)*x1246))+(((0.001)*x1240)));
evalcond[5]=((0.025)+(((0.4195)*x1246))+(((-1.0)*py))+(((-0.4195)*x1247))+(((0.454)*sj1))+(((0.035)*x1249))+(((0.035)*x1248))+((r10*x1243))+(((0.001)*x1239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1253=((1.0)*cj5);
IkReal x1254=((1.0)*sj5);
IkReal x1255=((((-1.0)*r10*sj4*x1253))+((r11*sj4*sj5))+((cj4*r12)));
j3eval[0]=x1255;
j3eval[1]=((IKabs(((((-1.0)*r20*x1254))+(((-1.0)*r21*x1253)))))+(IKabs((((r22*sj4))+((cj4*cj5*r20))+(((-1.0)*cj4*r21*x1254))))));
j3eval[2]=IKsign(x1255);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1256=((1.0)*r11);
IkReal x1257=((1.0)*sj5);
IkReal x1258=(((cj5*r20*sj4))+(((-1.0)*r21*sj4*x1257))+(((-1.0)*cj4*r22)));
j3eval[0]=x1258;
j3eval[1]=((IKabs(((((-1.0)*cj5*x1256))+(((-1.0)*r10*x1257)))))+(IKabs((((cj4*cj5*r10))+((r12*sj4))+(((-1.0)*cj4*sj5*x1256))))));
j3eval[2]=IKsign(x1258);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1259=cj4*cj4;
IkReal x1260=cj5*cj5;
IkReal x1261=r01*r01;
IkReal x1262=r02*r02;
IkReal x1263=r00*r00;
IkReal x1264=(cj5*r00);
IkReal x1265=(r01*sj5);
IkReal x1266=(r02*sj4);
IkReal x1267=((2.0)*cj4);
IkReal x1268=((1.0)*x1259);
IkReal x1269=(x1260*x1263);
IkReal x1270=(x1260*x1261);
IkReal x1271=(x1269+(((-1.0)*x1261*x1268))+(((-1.0)*x1268*x1269))+((x1259*x1270))+((x1259*x1262))+(((2.0)*x1259*x1264*x1265))+(((-1.0)*x1270))+((x1265*x1266*x1267))+(((-1.0)*x1263))+(((-1.0)*x1262))+(((-1.0)*x1264*x1266*x1267))+(((-2.0)*x1264*x1265)));
j3eval[0]=x1271;
j3eval[1]=IKsign(x1271);
j3eval[2]=((IKabs(((((-1.0)*cj4*x1264))+(((-1.0)*x1266))+((cj4*x1265)))))+(IKabs(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1272=cj4*cj4;
IkReal x1273=cj5*cj5;
IkReal x1274=r01*r01;
IkReal x1275=r02*r02;
IkReal x1276=r00*r00;
IkReal x1277=((1.0)*cj5);
IkReal x1278=(cj4*r00);
IkReal x1279=(r02*sj4);
IkReal x1280=((2.0)*cj5);
IkReal x1281=(r00*sj5);
IkReal x1282=((1.0)*x1273);
IkReal x1283=(cj4*r01*sj5);
IkReal x1284=(x1272*x1274);
CheckValue<IkReal> x1285 = IKatan2WithCheck(IkReal((x1283+(((-1.0)*x1277*x1278))+(((-1.0)*x1279)))),IkReal(((((-1.0)*x1281))+(((-1.0)*r01*x1277)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1285.valid){
continue;
}
CheckValue<IkReal> x1286=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1284))+((r01*x1272*x1280*x1281))+(((-1.0)*r01*x1280*x1281))+((x1272*x1275))+((x1273*x1276))+(((2.0)*x1279*x1283))+(((-1.0)*x1275))+(((-1.0)*x1276))+(((-1.0)*x1274*x1282))+(((-1.0)*x1272*x1276*x1282))+(((-1.0)*x1278*x1279*x1280))+((x1273*x1284)))),-1);
if(!x1286.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1285.value)+(((1.5707963267949)*(x1286.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1287=IKsin(j3);
IkReal x1288=IKcos(j3);
IkReal x1289=(r02*sj4);
IkReal x1290=(cj4*cj5);
IkReal x1291=(cj4*sj5);
IkReal x1292=(cj5*r01);
IkReal x1293=(r00*sj5);
IkReal x1294=((1.0)*x1288);
IkReal x1295=((1.0)*x1287);
evalcond[0]=(((x1287*x1292))+((x1287*x1293))+(((-1.0)*x1289*x1294))+(((-1.0)*r00*x1290*x1294))+((r01*x1288*x1291)));
evalcond[1]=((((-1.0)*r20*sj5*x1294))+(((-1.0)*r20*x1290*x1295))+(((-1.0)*r22*sj4*x1295))+((r21*x1287*x1291))+(((-1.0)*cj5*r21*x1294)));
evalcond[2]=((((-1.0)*cj5*r11*x1294))+(((-1.0)*r12*sj4*x1295))+(((-1.0)*r10*x1290*x1295))+((r11*x1287*x1291))+(((-1.0)*r10*sj5*x1294)));
evalcond[3]=((1.0)+(((-1.0)*x1289*x1295))+((r01*x1287*x1291))+(((-1.0)*r00*x1290*x1295))+(((-1.0)*x1293*x1294))+(((-1.0)*x1292*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1296=((4.0)*pz);
IkReal x1297=((12.0)*pz);
IkReal x1298=(r20*sj5);
IkReal x1299=((0.42)*sj4);
IkReal x1300=(cj3*r22);
IkReal x1301=((0.14)*cj5);
IkReal x1302=(r21*sj3);
IkReal x1303=(cj5*r21);
IkReal x1304=((0.14)*sj5);
IkReal x1305=((0.42)*cj4);
IkReal x1306=((5.034)*sj4);
IkReal x1307=(cj5*r20);
IkReal x1308=(r21*sj5);
IkReal x1309=(cj4*r22);
IkReal x1310=((1.678)*sj4);
IkReal x1311=((0.004)*x1303);
IkReal x1312=((0.004)*x1298);
IkReal x1313=((1.678)*x1309);
IkReal x1314=((5.034)*x1309);
IkReal x1315=((0.012)*x1303);
IkReal x1316=((0.012)*x1298);
IkReal x1317=(cj3*cj4*r21);
IkReal x1318=(x1308*x1310);
IkReal x1319=(x1307*x1310);
IkReal x1320=(x1306*x1308);
IkReal x1321=(x1306*x1307);
IkReal x1322=(cj5*r10*x1299);
IkReal x1323=((0.42)*sj3*x1298);
IkReal x1324=((0.42)*cj5*x1302);
IkReal x1325=(cj3*x1305*x1308);
IkReal x1326=(x1321+x1297);
IkReal x1327=(x1319+x1296);
IkReal x1328=(x1326+((r12*x1305))+((r11*sj5*x1299)));
IkReal x1329=(x1316+x1315+x1314+x1320);
IkReal x1330=(x1323+x1324+x1325);
IkReal x1331=((-1.816)+x1313+x1312+x1311+x1318);
IkReal x1332=(x1326+((x1299*x1300))+((cj3*x1305*x1307)));
j1eval[0]=((IKabs(((1.816)+x1329+x1330+(((-1.0)*x1332)))))+(IKabs(((1.816)+x1322+x1329+(((-1.0)*x1328)))))+(IKabs((x1331+(((-1.0)*cj3*cj4*r20*x1301))+(((-1.0)*x1327))+(((0.14)*sj3*x1298))+(((-0.14)*sj4*x1300))+((x1304*x1317))+((x1301*x1302)))))+(IKabs(((-1.816)+x1322+x1329+(((-1.0)*x1328)))))+(IKabs(((-1.816)+x1329+x1330+(((-1.0)*x1332)))))+(IKabs((x1331+((r10*sj4*x1301))+(((-1.0)*x1327))+(((-0.14)*cj4*r12))+(((-1.0)*r11*sj4*x1304))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1333=(cj4*r12);
IkReal x1334=(cj4*r22);
IkReal x1335=(r20*sj5);
IkReal x1336=(cj5*r21);
IkReal x1337=((0.42)*sj4);
IkReal x1338=(cj5*r10);
IkReal x1339=((1.678)*sj4);
IkReal x1340=(r21*sj5);
IkReal x1341=(r11*sj5);
IkReal x1342=(cj5*r20);
IkReal x1343=((5.034)*sj4);
IkReal x1344=((0.14)*sj4);
IkReal x1345=((5.034)*x1334);
IkReal x1346=((0.012)*x1336);
IkReal x1347=((0.012)*x1335);
IkReal x1348=((0.004)*x1336);
IkReal x1349=((0.004)*x1335);
IkReal x1350=((1.678)*x1334);
IkReal x1351=(x1337*x1338);
IkReal x1352=(x1340*x1343);
IkReal x1353=(x1339*x1340);
IkReal x1354=(x1338*x1344);
IkReal x1355=((((12.0)*pz))+(((0.42)*x1333))+((x1337*x1341))+((x1342*x1343)));
IkReal x1356=((((0.14)*x1333))+((x1339*x1342))+(((4.0)*pz))+((x1341*x1344)));
IkReal x1357=(x1348+x1349+x1353+x1350+x1354);
IkReal x1358=(x1345+x1346+x1347+x1352+x1351);
op[0]=((-1.816)+x1357+(((-1.0)*x1356)));
op[1]=0;
op[2]=((-1.816)+x1358+(((-1.0)*x1355)));
op[3]=0;
op[4]=((1.816)+x1358+(((-1.0)*x1355)));
op[5]=0;
op[6]=((1.816)+x1357+(((-1.0)*x1356)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1359=(r20*sj5);
IkReal x1360=((0.42)*cj3);
IkReal x1361=(r22*sj4);
IkReal x1362=(r21*sj5);
IkReal x1363=((1.678)*sj4);
IkReal x1364=((0.42)*sj3);
IkReal x1365=(cj5*r21);
IkReal x1366=((0.14)*sj3);
IkReal x1367=((5.034)*sj4);
IkReal x1368=(cj5*r20);
IkReal x1369=(cj4*r22);
IkReal x1370=((0.004)*x1365);
IkReal x1371=((0.004)*x1359);
IkReal x1372=((1.678)*x1369);
IkReal x1373=((5.034)*x1369);
IkReal x1374=((0.012)*x1365);
IkReal x1375=((0.012)*x1359);
IkReal x1376=((0.14)*cj3*cj4);
IkReal x1377=(x1365*x1366);
IkReal x1378=(x1362*x1363);
IkReal x1379=(x1359*x1366);
IkReal x1380=(x1359*x1364);
IkReal x1381=(x1362*x1367);
IkReal x1382=(x1364*x1365);
IkReal x1383=(cj4*x1360*x1362);
IkReal x1384=(x1362*x1376);
IkReal x1385=(((x1367*x1368))+(((12.0)*pz))+((x1360*x1361))+((cj4*x1360*x1368)));
IkReal x1386=((((4.0)*pz))+((x1363*x1368))+(((0.14)*cj3*x1361))+((x1368*x1376)));
IkReal x1387=(x1373+x1375+x1374+x1380+x1381+x1382+x1383);
IkReal x1388=(x1371+x1370+x1372+x1377+x1379+x1378+x1384);
j1evalpoly[0]=((1.816)+(((-1.0)*x1386))+x1388+(((htj1*htj1)*(((1.816)+(((-1.0)*x1385))+x1387))))+(((htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x1385))+x1387))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x1386))+x1388)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1389=(cj1*sj4);
IkReal x1390=(cj5*r20);
IkReal x1391=(r11*sj5);
IkReal x1392=(sj1*sj4);
IkReal x1393=(cj4*r12);
IkReal x1394=(cj5*r10);
IkReal x1395=((1.0)*cj4*r22);
IkReal x1396=((1.0)*r21*sj5);
if( IKabs(((((-1.0)*x1389*x1396))+((sj1*x1393))+(((-1.0)*cj1*x1395))+((x1389*x1390))+((x1391*x1392))+(((-1.0)*x1392*x1394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1392*x1396))+(((-1.0)*cj1*x1393))+((x1390*x1392))+(((-1.0)*x1389*x1391))+((x1389*x1394))+(((-1.0)*sj1*x1395)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1389*x1396))+((sj1*x1393))+(((-1.0)*cj1*x1395))+((x1389*x1390))+((x1391*x1392))+(((-1.0)*x1392*x1394))))+IKsqr(((((-1.0)*x1392*x1396))+(((-1.0)*cj1*x1393))+((x1390*x1392))+(((-1.0)*x1389*x1391))+((x1389*x1394))+(((-1.0)*sj1*x1395))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1389*x1396))+((sj1*x1393))+(((-1.0)*cj1*x1395))+((x1389*x1390))+((x1391*x1392))+(((-1.0)*x1392*x1394))), ((((-1.0)*x1392*x1396))+(((-1.0)*cj1*x1393))+((x1390*x1392))+(((-1.0)*x1389*x1391))+((x1389*x1394))+(((-1.0)*sj1*x1395))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1397=IKcos(j2);
IkReal x1398=IKsin(j2);
IkReal x1399=(cj3*cj4);
IkReal x1400=(r21*sj5);
IkReal x1401=((1.0)*sj4);
IkReal x1402=((1.0)*cj5);
IkReal x1403=(cj5*r11);
IkReal x1404=(cj5*r21);
IkReal x1405=(cj5*sj4);
IkReal x1406=((1.0)*cj4);
IkReal x1407=((0.001)*sj5);
IkReal x1408=(sj3*sj5);
IkReal x1409=(r11*sj5);
IkReal x1410=(sj1*x1398);
IkReal x1411=((1.0)*x1397);
IkReal x1412=(cj1*x1398);
IkReal x1413=((0.035)*x1397);
IkReal x1414=(sj1*x1397);
IkReal x1415=(cj1*x1411);
evalcond[0]=((((-1.0)*r12*x1406))+(((-1.0)*x1415))+x1410+(((-1.0)*x1401*x1409))+((r10*x1405)));
evalcond[1]=((((-1.0)*r22*x1406))+((r20*x1405))+(((-1.0)*x1400*x1401))+(((-1.0)*sj1*x1411))+(((-1.0)*x1412)));
evalcond[2]=(((sj3*x1403))+(((-1.0)*r10*x1399*x1402))+((x1399*x1409))+x1412+x1414+(((-1.0)*cj3*r12*x1401))+((r10*x1408)));
evalcond[3]=((((-1.0)*r20*x1399*x1402))+(((-1.0)*x1415))+(((-1.0)*cj3*r22*x1401))+((sj3*x1404))+((r20*x1408))+((x1399*x1400))+x1410);
evalcond[4]=((((0.454)*cj1))+(((-0.4195)*x1414))+(((-0.4195)*x1412))+(((0.001)*x1404))+((r20*x1407))+(((-1.0)*pz))+(((-0.035)*x1410))+((cj1*x1413)));
evalcond[5]=((-0.025)+(((0.4195)*x1410))+(((0.001)*x1403))+(((-1.0)*py))+(((-0.454)*sj1))+(((-0.035)*x1412))+(((-1.0)*sj1*x1413))+((r10*x1407))+(((-0.4195)*cj1*x1397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1416=((1.0)*r11);
IkReal x1417=((1.0)*sj5);
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1417))+(((-1.0)*cj5*x1416)))),IkReal(((((-1.0)*cj4*sj5*x1416))+((cj4*cj5*r10))+((r12*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
CheckValue<IkReal> x1419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x1417))+((cj5*r20*sj4))+(((-1.0)*cj4*r22)))),-1);
if(!x1419.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1418.value)+(((1.5707963267949)*(x1419.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1420=IKsin(j3);
IkReal x1421=IKcos(j3);
IkReal x1422=(r02*sj4);
IkReal x1423=(cj4*cj5);
IkReal x1424=(cj4*sj5);
IkReal x1425=(cj5*r01);
IkReal x1426=(r00*sj5);
IkReal x1427=((1.0)*x1421);
IkReal x1428=((1.0)*x1420);
evalcond[0]=(((r01*x1421*x1424))+((x1420*x1426))+((x1420*x1425))+(((-1.0)*r00*x1423*x1427))+(((-1.0)*x1422*x1427)));
evalcond[1]=(((r21*x1420*x1424))+(((-1.0)*r20*x1423*x1428))+(((-1.0)*r20*sj5*x1427))+(((-1.0)*cj5*r21*x1427))+(((-1.0)*r22*sj4*x1428)));
evalcond[2]=((((-1.0)*r10*x1423*x1428))+((r11*x1420*x1424))+(((-1.0)*cj5*r11*x1427))+(((-1.0)*r10*sj5*x1427))+(((-1.0)*r12*sj4*x1428)));
evalcond[3]=((1.0)+(((-1.0)*x1426*x1427))+(((-1.0)*x1425*x1427))+((r01*x1420*x1424))+(((-1.0)*r00*x1423*x1428))+(((-1.0)*x1422*x1428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1429=((4.0)*pz);
IkReal x1430=((12.0)*pz);
IkReal x1431=(r20*sj5);
IkReal x1432=((0.42)*sj4);
IkReal x1433=(cj3*r22);
IkReal x1434=((0.14)*cj5);
IkReal x1435=(r21*sj3);
IkReal x1436=(cj5*r21);
IkReal x1437=((0.14)*sj5);
IkReal x1438=((0.42)*cj4);
IkReal x1439=((5.034)*sj4);
IkReal x1440=(cj5*r20);
IkReal x1441=(r21*sj5);
IkReal x1442=(cj4*r22);
IkReal x1443=((1.678)*sj4);
IkReal x1444=((0.004)*x1436);
IkReal x1445=((0.004)*x1431);
IkReal x1446=((1.678)*x1442);
IkReal x1447=((5.034)*x1442);
IkReal x1448=((0.012)*x1436);
IkReal x1449=((0.012)*x1431);
IkReal x1450=(cj3*cj4*r21);
IkReal x1451=(x1441*x1443);
IkReal x1452=(x1440*x1443);
IkReal x1453=(x1439*x1441);
IkReal x1454=(x1439*x1440);
IkReal x1455=(cj5*r10*x1432);
IkReal x1456=((0.42)*sj3*x1431);
IkReal x1457=((0.42)*cj5*x1435);
IkReal x1458=(cj3*x1438*x1441);
IkReal x1459=(x1430+x1454);
IkReal x1460=(x1429+x1452);
IkReal x1461=(((r12*x1438))+((r11*sj5*x1432))+x1459);
IkReal x1462=(x1453+x1447+x1449+x1448);
IkReal x1463=(x1456+x1457+x1458);
IkReal x1464=((-1.816)+x1451+x1446+x1445+x1444);
IkReal x1465=(((x1432*x1433))+x1459+((cj3*x1438*x1440)));
j1eval[0]=((IKabs(((-1.816)+(((-1.0)*x1461))+x1462+x1455)))+(IKabs(((((-1.0)*x1460))+(((-0.14)*cj4*r12))+x1464+((r10*sj4*x1434))+(((-1.0)*r11*sj4*x1437)))))+(IKabs(((-1.816)+(((-1.0)*x1465))+x1463+x1462)))+(IKabs(((((-1.0)*cj3*cj4*r20*x1434))+(((-1.0)*x1460))+((x1437*x1450))+((x1434*x1435))+(((-0.14)*sj4*x1433))+(((0.14)*sj3*x1431))+x1464)))+(IKabs(((1.816)+(((-1.0)*x1461))+x1462+x1455)))+(IKabs(((1.816)+(((-1.0)*x1465))+x1463+x1462))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1466=(cj4*r12);
IkReal x1467=(cj4*r22);
IkReal x1468=(r20*sj5);
IkReal x1469=(cj5*r21);
IkReal x1470=((0.42)*sj4);
IkReal x1471=(cj5*r10);
IkReal x1472=((1.678)*sj4);
IkReal x1473=(r21*sj5);
IkReal x1474=(r11*sj5);
IkReal x1475=(cj5*r20);
IkReal x1476=((5.034)*sj4);
IkReal x1477=((0.14)*sj4);
IkReal x1478=((5.034)*x1467);
IkReal x1479=((0.012)*x1469);
IkReal x1480=((0.012)*x1468);
IkReal x1481=((0.004)*x1469);
IkReal x1482=((0.004)*x1468);
IkReal x1483=((1.678)*x1467);
IkReal x1484=(x1470*x1471);
IkReal x1485=(x1473*x1476);
IkReal x1486=(x1472*x1473);
IkReal x1487=(x1471*x1477);
IkReal x1488=((((12.0)*pz))+(((0.42)*x1466))+((x1470*x1474))+((x1475*x1476)));
IkReal x1489=((((0.14)*x1466))+(((4.0)*pz))+((x1474*x1477))+((x1472*x1475)));
IkReal x1490=(x1483+x1482+x1481+x1487+x1486);
IkReal x1491=(x1478+x1479+x1480+x1485+x1484);
op[0]=((-1.816)+(((-1.0)*x1489))+x1490);
op[1]=0;
op[2]=((-1.816)+(((-1.0)*x1488))+x1491);
op[3]=0;
op[4]=((1.816)+(((-1.0)*x1488))+x1491);
op[5]=0;
op[6]=((1.816)+(((-1.0)*x1489))+x1490);
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1492=(r20*sj5);
IkReal x1493=((0.42)*cj3);
IkReal x1494=(r22*sj4);
IkReal x1495=(r21*sj5);
IkReal x1496=((1.678)*sj4);
IkReal x1497=((0.42)*sj3);
IkReal x1498=(cj5*r21);
IkReal x1499=((0.14)*sj3);
IkReal x1500=((5.034)*sj4);
IkReal x1501=(cj5*r20);
IkReal x1502=(cj4*r22);
IkReal x1503=((0.004)*x1498);
IkReal x1504=((0.004)*x1492);
IkReal x1505=((1.678)*x1502);
IkReal x1506=((5.034)*x1502);
IkReal x1507=((0.012)*x1498);
IkReal x1508=((0.012)*x1492);
IkReal x1509=((0.14)*cj3*cj4);
IkReal x1510=(x1498*x1499);
IkReal x1511=(x1495*x1496);
IkReal x1512=(x1492*x1499);
IkReal x1513=(x1492*x1497);
IkReal x1514=(x1495*x1500);
IkReal x1515=(x1497*x1498);
IkReal x1516=(cj4*x1493*x1495);
IkReal x1517=(x1495*x1509);
IkReal x1518=((((12.0)*pz))+((cj4*x1493*x1501))+((x1500*x1501))+((x1493*x1494)));
IkReal x1519=((((4.0)*pz))+((x1501*x1509))+((x1496*x1501))+(((0.14)*cj3*x1494)));
IkReal x1520=(x1506+x1507+x1508+x1515+x1514+x1516+x1513);
IkReal x1521=(x1503+x1504+x1505+x1517+x1511+x1510+x1512);
j1evalpoly[0]=((1.816)+(((-1.0)*x1519))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x1519))+x1521))))+x1521+(((htj1*htj1*htj1*htj1)*(((-1.816)+(((-1.0)*x1518))+x1520))))+(((htj1*htj1)*(((1.816)+(((-1.0)*x1518))+x1520)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1522=(cj1*sj4);
IkReal x1523=(cj5*r20);
IkReal x1524=(r11*sj5);
IkReal x1525=(sj1*sj4);
IkReal x1526=(cj4*r12);
IkReal x1527=(cj5*r10);
IkReal x1528=((1.0)*cj4*r22);
IkReal x1529=((1.0)*r21*sj5);
if( IKabs((((x1524*x1525))+(((-1.0)*x1525*x1527))+((x1522*x1523))+((sj1*x1526))+(((-1.0)*x1522*x1529))+(((-1.0)*cj1*x1528)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj1*x1526))+(((-1.0)*sj1*x1528))+((x1522*x1527))+(((-1.0)*x1525*x1529))+((x1523*x1525))+(((-1.0)*x1522*x1524)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1524*x1525))+(((-1.0)*x1525*x1527))+((x1522*x1523))+((sj1*x1526))+(((-1.0)*x1522*x1529))+(((-1.0)*cj1*x1528))))+IKsqr(((((-1.0)*cj1*x1526))+(((-1.0)*sj1*x1528))+((x1522*x1527))+(((-1.0)*x1525*x1529))+((x1523*x1525))+(((-1.0)*x1522*x1524))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1524*x1525))+(((-1.0)*x1525*x1527))+((x1522*x1523))+((sj1*x1526))+(((-1.0)*x1522*x1529))+(((-1.0)*cj1*x1528))), ((((-1.0)*cj1*x1526))+(((-1.0)*sj1*x1528))+((x1522*x1527))+(((-1.0)*x1525*x1529))+((x1523*x1525))+(((-1.0)*x1522*x1524))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1530=IKcos(j2);
IkReal x1531=IKsin(j2);
IkReal x1532=(cj3*cj4);
IkReal x1533=(r21*sj5);
IkReal x1534=((1.0)*sj4);
IkReal x1535=((1.0)*cj5);
IkReal x1536=(cj5*r11);
IkReal x1537=(cj5*r21);
IkReal x1538=(cj5*sj4);
IkReal x1539=((1.0)*cj4);
IkReal x1540=((0.001)*sj5);
IkReal x1541=(sj3*sj5);
IkReal x1542=(r11*sj5);
IkReal x1543=(sj1*x1531);
IkReal x1544=((1.0)*x1530);
IkReal x1545=(cj1*x1531);
IkReal x1546=((0.035)*x1530);
IkReal x1547=(sj1*x1530);
IkReal x1548=(cj1*x1544);
evalcond[0]=((((-1.0)*r12*x1539))+((r10*x1538))+x1543+(((-1.0)*x1534*x1542))+(((-1.0)*x1548)));
evalcond[1]=((((-1.0)*x1545))+(((-1.0)*r22*x1539))+((r20*x1538))+(((-1.0)*x1533*x1534))+(((-1.0)*sj1*x1544)));
evalcond[2]=(((x1532*x1542))+((sj3*x1536))+(((-1.0)*r10*x1532*x1535))+x1547+x1545+(((-1.0)*cj3*r12*x1534))+((r10*x1541)));
evalcond[3]=((((-1.0)*r20*x1532*x1535))+((sj3*x1537))+((x1532*x1533))+x1543+(((-1.0)*cj3*r22*x1534))+(((-1.0)*x1548))+((r20*x1541)));
evalcond[4]=((((-0.035)*x1543))+(((-0.4195)*x1545))+(((-0.4195)*x1547))+(((0.454)*cj1))+((cj1*x1546))+(((-1.0)*pz))+(((0.001)*x1537))+((r20*x1540)));
evalcond[5]=((-0.025)+(((-0.035)*x1545))+(((-0.4195)*cj1*x1530))+(((0.4195)*x1543))+(((-1.0)*py))+(((-0.454)*sj1))+(((0.001)*x1536))+((r10*x1540))+(((-1.0)*sj1*x1546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1549=((1.0)*r21);
CheckValue<IkReal> x1550=IKPowWithIntegerCheck(IKsign((((r11*sj4*sj5))+((cj4*r12))+(((-1.0)*cj5*r10*sj4)))),-1);
if(!x1550.valid){
continue;
}
CheckValue<IkReal> x1551 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1549))+(((-1.0)*r20*sj5)))),IkReal(((((-1.0)*cj4*sj5*x1549))+((r22*sj4))+((cj4*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1551.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1550.value)))+(x1551.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x1552=IKsin(j3);
IkReal x1553=IKcos(j3);
IkReal x1554=(r02*sj4);
IkReal x1555=(cj4*cj5);
IkReal x1556=(cj4*sj5);
IkReal x1557=(cj5*r01);
IkReal x1558=(r00*sj5);
IkReal x1559=((1.0)*x1553);
IkReal x1560=((1.0)*x1552);
evalcond[0]=(((x1552*x1557))+((x1552*x1558))+(((-1.0)*r00*x1555*x1559))+(((-1.0)*x1554*x1559))+((r01*x1553*x1556)));
evalcond[1]=(((r21*x1552*x1556))+(((-1.0)*r20*sj5*x1559))+(((-1.0)*r20*x1555*x1560))+(((-1.0)*r22*sj4*x1560))+(((-1.0)*cj5*r21*x1559)));
evalcond[2]=(((r11*x1552*x1556))+(((-1.0)*r12*sj4*x1560))+(((-1.0)*r10*sj5*x1559))+(((-1.0)*cj5*r11*x1559))+(((-1.0)*r10*x1555*x1560)));
evalcond[3]=((1.0)+(((-1.0)*x1558*x1559))+(((-1.0)*r00*x1555*x1560))+(((-1.0)*x1557*x1559))+(((-1.0)*x1554*x1560))+((r01*x1552*x1556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x1561=((4.0)*pz);
IkReal x1562=((12.0)*pz);
IkReal x1563=(r20*sj5);
IkReal x1564=((0.42)*sj4);
IkReal x1565=(cj3*r22);
IkReal x1566=((0.14)*cj5);
IkReal x1567=(r21*sj3);
IkReal x1568=(cj5*r21);
IkReal x1569=((0.14)*sj5);
IkReal x1570=((0.42)*cj4);
IkReal x1571=((5.034)*sj4);
IkReal x1572=(cj5*r20);
IkReal x1573=(r21*sj5);
IkReal x1574=(cj4*r22);
IkReal x1575=((1.678)*sj4);
IkReal x1576=((0.004)*x1568);
IkReal x1577=((0.004)*x1563);
IkReal x1578=((1.678)*x1574);
IkReal x1579=((5.034)*x1574);
IkReal x1580=((0.012)*x1568);
IkReal x1581=((0.012)*x1563);
IkReal x1582=(cj3*cj4*r21);
IkReal x1583=(x1573*x1575);
IkReal x1584=(x1572*x1575);
IkReal x1585=(x1571*x1573);
IkReal x1586=(x1571*x1572);
IkReal x1587=(cj5*r10*x1564);
IkReal x1588=((0.42)*sj3*x1563);
IkReal x1589=((0.42)*cj5*x1567);
IkReal x1590=(cj3*x1570*x1573);
IkReal x1591=(x1562+x1586);
IkReal x1592=(x1561+x1584);
IkReal x1593=(((r12*x1570))+((r11*sj5*x1564))+x1591);
IkReal x1594=(x1579+x1580+x1581+x1585);
IkReal x1595=(x1588+x1589+x1590);
IkReal x1596=((-1.816)+x1578+x1577+x1576+x1583);
IkReal x1597=(x1591+((cj3*x1570*x1572))+((x1564*x1565)));
j1eval[0]=((IKabs(((1.816)+(((-1.0)*x1597))+x1595+x1594)))+(IKabs(((-1.816)+(((-1.0)*x1593))+x1587+x1594)))+(IKabs(((((-1.0)*x1592))+((r10*sj4*x1566))+(((-1.0)*r11*sj4*x1569))+x1596+(((-0.14)*cj4*r12)))))+(IKabs((((x1566*x1567))+(((-1.0)*x1592))+(((-0.14)*sj4*x1565))+(((0.14)*sj3*x1563))+x1596+(((-1.0)*cj3*cj4*r20*x1566))+((x1569*x1582)))))+(IKabs(((1.816)+(((-1.0)*x1593))+x1587+x1594)))+(IKabs(((-1.816)+(((-1.0)*x1597))+x1595+x1594))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1598=(cj4*r12);
IkReal x1599=(cj4*r22);
IkReal x1600=(r20*sj5);
IkReal x1601=(cj5*r21);
IkReal x1602=((0.42)*sj4);
IkReal x1603=(cj5*r10);
IkReal x1604=((1.678)*sj4);
IkReal x1605=(r21*sj5);
IkReal x1606=(r11*sj5);
IkReal x1607=(cj5*r20);
IkReal x1608=((5.034)*sj4);
IkReal x1609=((0.14)*sj4);
IkReal x1610=((5.034)*x1599);
IkReal x1611=((0.012)*x1601);
IkReal x1612=((0.012)*x1600);
IkReal x1613=((0.004)*x1601);
IkReal x1614=((0.004)*x1600);
IkReal x1615=((1.678)*x1599);
IkReal x1616=(x1602*x1603);
IkReal x1617=(x1605*x1608);
IkReal x1618=(x1604*x1605);
IkReal x1619=(x1603*x1609);
IkReal x1620=((((12.0)*pz))+((x1607*x1608))+(((0.42)*x1598))+((x1602*x1606)));
IkReal x1621=((((0.14)*x1598))+(((4.0)*pz))+((x1606*x1609))+((x1604*x1607)));
IkReal x1622=(x1618+x1619+x1614+x1615+x1613);
IkReal x1623=(x1616+x1617+x1612+x1610+x1611);
op[0]=((-1.816)+x1622+(((-1.0)*x1621)));
op[1]=0;
op[2]=((-1.816)+x1623+(((-1.0)*x1620)));
op[3]=0;
op[4]=((1.816)+x1623+(((-1.0)*x1620)));
op[5]=0;
op[6]=((1.816)+x1622+(((-1.0)*x1621)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1624=(r20*sj5);
IkReal x1625=((0.42)*cj3);
IkReal x1626=(r22*sj4);
IkReal x1627=(r21*sj5);
IkReal x1628=((1.678)*sj4);
IkReal x1629=((0.42)*sj3);
IkReal x1630=(cj5*r21);
IkReal x1631=((0.14)*sj3);
IkReal x1632=((5.034)*sj4);
IkReal x1633=(cj5*r20);
IkReal x1634=(cj4*r22);
IkReal x1635=((0.004)*x1630);
IkReal x1636=((0.004)*x1624);
IkReal x1637=((1.678)*x1634);
IkReal x1638=((5.034)*x1634);
IkReal x1639=((0.012)*x1630);
IkReal x1640=((0.012)*x1624);
IkReal x1641=((0.14)*cj3*cj4);
IkReal x1642=(x1630*x1631);
IkReal x1643=(x1627*x1628);
IkReal x1644=(x1624*x1631);
IkReal x1645=(x1624*x1629);
IkReal x1646=(x1627*x1632);
IkReal x1647=(x1629*x1630);
IkReal x1648=(cj4*x1625*x1627);
IkReal x1649=(x1627*x1641);
IkReal x1650=((((12.0)*pz))+((cj4*x1625*x1633))+((x1632*x1633))+((x1625*x1626)));
IkReal x1651=((((0.14)*cj3*x1626))+(((4.0)*pz))+((x1628*x1633))+((x1633*x1641)));
IkReal x1652=(x1645+x1647+x1646+x1640+x1648+x1638+x1639);
IkReal x1653=(x1644+x1643+x1642+x1649+x1635+x1636+x1637);
j1evalpoly[0]=((1.816)+x1653+(((htj1*htj1*htj1*htj1)*(((-1.816)+x1652+(((-1.0)*x1650))))))+(((-1.0)*x1651))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((-1.816)+x1653+(((-1.0)*x1651))))))+(((htj1*htj1)*(((1.816)+x1652+(((-1.0)*x1650)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1654=(cj1*sj4);
IkReal x1655=(cj5*r20);
IkReal x1656=(r11*sj5);
IkReal x1657=(sj1*sj4);
IkReal x1658=(cj4*r12);
IkReal x1659=(cj5*r10);
IkReal x1660=((1.0)*cj4*r22);
IkReal x1661=((1.0)*r21*sj5);
if( IKabs((((x1656*x1657))+((sj1*x1658))+((x1654*x1655))+(((-1.0)*cj1*x1660))+(((-1.0)*x1654*x1661))+(((-1.0)*x1657*x1659)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1654*x1659))+(((-1.0)*sj1*x1660))+(((-1.0)*x1654*x1656))+((x1655*x1657))+(((-1.0)*x1657*x1661))+(((-1.0)*cj1*x1658)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x1656*x1657))+((sj1*x1658))+((x1654*x1655))+(((-1.0)*cj1*x1660))+(((-1.0)*x1654*x1661))+(((-1.0)*x1657*x1659))))+IKsqr((((x1654*x1659))+(((-1.0)*sj1*x1660))+(((-1.0)*x1654*x1656))+((x1655*x1657))+(((-1.0)*x1657*x1661))+(((-1.0)*cj1*x1658))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x1656*x1657))+((sj1*x1658))+((x1654*x1655))+(((-1.0)*cj1*x1660))+(((-1.0)*x1654*x1661))+(((-1.0)*x1657*x1659))), (((x1654*x1659))+(((-1.0)*sj1*x1660))+(((-1.0)*x1654*x1656))+((x1655*x1657))+(((-1.0)*x1657*x1661))+(((-1.0)*cj1*x1658))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1662=IKcos(j2);
IkReal x1663=IKsin(j2);
IkReal x1664=(cj3*cj4);
IkReal x1665=(r21*sj5);
IkReal x1666=((1.0)*sj4);
IkReal x1667=((1.0)*cj5);
IkReal x1668=(cj5*r11);
IkReal x1669=(cj5*r21);
IkReal x1670=(cj5*sj4);
IkReal x1671=((1.0)*cj4);
IkReal x1672=((0.001)*sj5);
IkReal x1673=(sj3*sj5);
IkReal x1674=(r11*sj5);
IkReal x1675=(sj1*x1663);
IkReal x1676=((1.0)*x1662);
IkReal x1677=(cj1*x1663);
IkReal x1678=((0.035)*x1662);
IkReal x1679=(sj1*x1662);
IkReal x1680=(cj1*x1676);
evalcond[0]=((((-1.0)*x1680))+x1675+(((-1.0)*r12*x1671))+((r10*x1670))+(((-1.0)*x1666*x1674)));
evalcond[1]=((((-1.0)*sj1*x1676))+((r20*x1670))+(((-1.0)*x1677))+(((-1.0)*x1665*x1666))+(((-1.0)*r22*x1671)));
evalcond[2]=(x1679+x1677+((sj3*x1668))+(((-1.0)*r10*x1664*x1667))+((r10*x1673))+(((-1.0)*cj3*r12*x1666))+((x1664*x1674)));
evalcond[3]=((((-1.0)*x1680))+x1675+((sj3*x1669))+((r20*x1673))+(((-1.0)*cj3*r22*x1666))+(((-1.0)*r20*x1664*x1667))+((x1664*x1665)));
evalcond[4]=((((0.001)*x1669))+(((0.454)*cj1))+(((-0.035)*x1675))+((cj1*x1678))+(((-1.0)*pz))+((r20*x1672))+(((-0.4195)*x1677))+(((-0.4195)*x1679)));
evalcond[5]=((-0.025)+(((-1.0)*sj1*x1678))+(((0.001)*x1668))+(((-0.035)*x1677))+(((-1.0)*py))+(((-0.454)*sj1))+(((-0.4195)*cj1*x1662))+((r10*x1672))+(((0.4195)*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1681=((1.0)*sj0);
IkReal x1682=(cj4*cj5);
IkReal x1683=(cj0*r00);
IkReal x1684=((1.0)*cj5);
IkReal x1685=(cj4*sj5);
IkReal x1686=(cj0*r01);
CheckValue<IkReal> x1687 = IKatan2WithCheck(IkReal(((((-1.0)*sj5*x1683))+(((-1.0)*cj5*r11*x1681))+(((-1.0)*r10*sj5*x1681))+(((-1.0)*x1684*x1686)))),IkReal(((((-1.0)*r11*x1681*x1685))+((r12*sj0*sj4))+((x1682*x1683))+(((-1.0)*x1685*x1686))+((r10*sj0*x1682))+((cj0*r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1687.valid){
continue;
}
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign((((r21*sj4*sj5))+((cj4*r22))+(((-1.0)*r20*sj4*x1684)))),-1);
if(!x1688.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1687.value)+(((1.5707963267949)*(x1688.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1689=IKsin(j3);
IkReal x1690=IKcos(j3);
IkReal x1691=((1.0)*cj5);
IkReal x1692=(cj4*x1689);
IkReal x1693=((1.0)*sj5*x1690);
IkReal x1694=((1.0)*sj4*x1689);
evalcond[0]=((((-1.0)*r20*x1691*x1692))+(((-1.0)*r20*x1693))+(((-1.0)*r22*x1694))+(((-1.0)*r21*x1690*x1691))+((r21*sj5*x1692)));
evalcond[1]=((((-1.0)*r10*x1691*x1692))+((r11*sj5*x1692))+cj0+(((-1.0)*r12*x1694))+(((-1.0)*r11*x1690*x1691))+(((-1.0)*r10*x1693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1691*x1692))+(((-1.0)*r01*x1690*x1691))+((r01*sj5*x1692))+(((-1.0)*r02*x1694))+(((-1.0)*r00*x1693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1695=((1.816)*sj0);
IkReal x1696=((1.816)*cj0);
IkReal x1697=(cj0*sj5);
IkReal x1698=((0.012)*r20);
IkReal x1699=(cj5*r21);
IkReal x1700=((5.034)*sj4);
IkReal x1701=(cj5*r20);
IkReal x1702=((1.678)*cj0);
IkReal x1703=(cj4*r22);
IkReal x1704=((1.678)*sj0);
IkReal x1705=(sj0*sj5);
IkReal x1706=((0.004)*r20);
IkReal x1707=((0.14)*sj4);
IkReal x1708=(r11*sj5);
IkReal x1709=(cj5*r00);
IkReal x1710=((0.42)*sj4);
IkReal x1711=(cj4*r02);
IkReal x1712=(cj4*r12);
IkReal x1713=(r21*sj4);
IkReal x1714=(pz*sj0);
IkReal x1715=(cj0*pz);
IkReal x1716=((12.0)*x1714);
IkReal x1717=((0.42)*x1712);
IkReal x1718=((12.0)*x1715);
IkReal x1719=((0.42)*x1711);
IkReal x1720=(cj5*r10*sj4);
IkReal x1721=(r01*sj4*sj5);
IkReal x1722=(cj5*r10*x1710);
IkReal x1723=((0.012)*sj0*x1699);
IkReal x1724=(x1708*x1710);
IkReal x1725=((5.034)*sj0*x1703);
IkReal x1726=(x1698*x1705);
IkReal x1727=(x1709*x1710);
IkReal x1728=(r01*sj5*x1710);
IkReal x1729=((5.034)*cj0*x1703);
IkReal x1730=(x1697*x1698);
IkReal x1731=((0.012)*cj0*x1699);
IkReal x1732=(sj0*x1700*x1701);
IkReal x1733=(r21*x1700*x1705);
IkReal x1734=(cj0*x1700*x1701);
IkReal x1735=(r21*x1697*x1700);
IkReal x1736=(x1727+x1734+x1718);
IkReal x1737=(x1722+x1732+x1716);
IkReal x1738=(x1728+x1729+x1731+x1730+x1735+x1719);
IkReal x1739=(x1726+x1724+x1725+x1723+x1733+x1717);
j1eval[0]=((IKabs(((((-0.14)*x1712))+(((-1.0)*sj5*x1704*x1713))+x1695+((cj5*r10*x1707))+(((-1.0)*x1707*x1708))+(((-1.0)*x1705*x1706))+(((4.0)*x1714))+(((-1.0)*x1703*x1704))+((sj4*x1701*x1704))+(((-0.004)*sj0*x1699)))))+(IKabs((x1737+x1695+(((-1.0)*x1739)))))+(IKabs(((((-0.004)*cj0*x1699))+(((-1.0)*x1702*x1703))+(((-0.14)*x1711))+x1696+(((-1.0)*r01*sj5*x1707))+(((4.0)*x1715))+((sj4*x1701*x1702))+(((-1.678)*x1697*x1713))+(((-1.0)*x1697*x1706))+((x1707*x1709)))))+(IKabs(((((-1.0)*x1695))+x1737+(((-1.0)*x1739)))))+(IKabs(((((-1.0)*x1696))+x1736+(((-1.0)*x1738)))))+(IKabs((x1736+x1696+(((-1.0)*x1738))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1740=((1.816)*cj0);
IkReal x1741=(cj0*sj5);
IkReal x1742=(r21*sj4);
IkReal x1743=(cj4*r02);
IkReal x1744=(cj0*pz);
IkReal x1745=((12.0)*x1744);
IkReal x1746=((0.42)*x1743);
IkReal x1747=((4.0)*x1744);
IkReal x1748=((0.14)*x1743);
IkReal x1749=(cj5*r00*sj4);
IkReal x1750=(cj0*cj4*r22);
IkReal x1751=(cj0*cj5*r21);
IkReal x1752=(r01*sj4*sj5);
IkReal x1753=((0.42)*x1749);
IkReal x1754=((0.42)*x1752);
IkReal x1755=((5.034)*x1750);
IkReal x1756=((0.012)*r20*x1741);
IkReal x1757=((0.012)*x1751);
IkReal x1758=((0.14)*x1749);
IkReal x1759=((0.004)*r20*x1741);
IkReal x1760=((0.14)*x1752);
IkReal x1761=((1.678)*x1750);
IkReal x1762=((0.004)*x1751);
IkReal x1763=(cj0*cj5*r20*sj4);
IkReal x1764=((5.034)*x1763);
IkReal x1765=((5.034)*x1741*x1742);
IkReal x1766=((1.678)*x1763);
IkReal x1767=((1.678)*x1741*x1742);
IkReal x1768=(x1766+x1747+x1758);
IkReal x1769=(x1764+x1745+x1753);
IkReal x1770=(x1765+x1746+x1757+x1756+x1755+x1754);
IkReal x1771=(x1762+x1760+x1761+x1767+x1748+x1759);
op[0]=(x1768+x1740+(((-1.0)*x1771)));
op[1]=0;
op[2]=(x1769+x1740+(((-1.0)*x1770)));
op[3]=0;
op[4]=(x1769+(((-1.0)*x1770))+(((-1.0)*x1740)));
op[5]=0;
op[6]=(x1768+(((-1.0)*x1771))+(((-1.0)*x1740)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1772=((1.816)*sj0);
IkReal x1773=(cj5*sj0);
IkReal x1774=((5.034)*sj4);
IkReal x1775=(cj4*r12);
IkReal x1776=(pz*sj0);
IkReal x1777=((1.678)*sj4);
IkReal x1778=((4.0)*x1776);
IkReal x1779=((12.0)*x1776);
IkReal x1780=((0.42)*x1775);
IkReal x1781=((0.14)*x1775);
IkReal x1782=(cj5*r10*sj4);
IkReal x1783=(r20*sj0*sj5);
IkReal x1784=(r11*sj4*sj5);
IkReal x1785=(cj4*r22*sj0);
IkReal x1786=(r21*sj0*sj5);
IkReal x1787=((0.14)*x1782);
IkReal x1788=((0.42)*x1782);
IkReal x1789=((0.012)*r21*x1773);
IkReal x1790=((0.42)*x1784);
IkReal x1791=((5.034)*x1785);
IkReal x1792=((0.012)*x1783);
IkReal x1793=((1.678)*x1785);
IkReal x1794=((0.14)*x1784);
IkReal x1795=((0.004)*r21*x1773);
IkReal x1796=((0.004)*x1783);
IkReal x1797=(r20*x1773*x1777);
IkReal x1798=(r20*x1773*x1774);
IkReal x1799=(x1774*x1786);
IkReal x1800=(x1777*x1786);
IkReal x1801=(x1787+x1797+x1778);
IkReal x1802=(x1788+x1798+x1779);
IkReal x1803=(x1781+x1793+x1796+x1795+x1794+x1800);
IkReal x1804=(x1789+x1780+x1799+x1792+x1791+x1790);
j1evalpoly[0]=((((-1.0)*x1803))+(((-1.0)*x1772))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x1772+(((-1.0)*x1803))+x1801))))+(((htj1*htj1)*(((((-1.0)*x1804))+(((-1.0)*x1772))+x1802))))+x1801+(((htj1*htj1*htj1*htj1)*((x1772+(((-1.0)*x1804))+x1802)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1805=((1.0)*cj1);
IkReal x1806=(cj4*r22);
IkReal x1807=(r21*sj5);
IkReal x1808=(cj1*r20);
IkReal x1809=(sj3*sj5);
IkReal x1810=(cj3*sj1);
IkReal x1811=(r22*sj4);
IkReal x1812=((1.0)*sj1);
IkReal x1813=(cj3*cj4);
IkReal x1814=(cj5*r20);
IkReal x1815=(cj5*r21*sj3);
if( IKabs(((((-1.0)*sj4*x1805*x1807))+(((-1.0)*r20*x1809*x1812))+(((-1.0)*x1812*x1815))+(((-1.0)*cj4*x1807*x1810))+((cj4*x1810*x1814))+(((-1.0)*x1805*x1806))+((cj5*sj4*x1808))+((x1810*x1811)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1805*x1813*x1814))+((x1808*x1809))+(((-1.0)*cj3*x1805*x1811))+((cj1*x1815))+(((-1.0)*x1806*x1812))+(((-1.0)*sj4*x1807*x1812))+((cj1*x1807*x1813))+((sj1*sj4*x1814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x1805*x1807))+(((-1.0)*r20*x1809*x1812))+(((-1.0)*x1812*x1815))+(((-1.0)*cj4*x1807*x1810))+((cj4*x1810*x1814))+(((-1.0)*x1805*x1806))+((cj5*sj4*x1808))+((x1810*x1811))))+IKsqr(((((-1.0)*x1805*x1813*x1814))+((x1808*x1809))+(((-1.0)*cj3*x1805*x1811))+((cj1*x1815))+(((-1.0)*x1806*x1812))+(((-1.0)*sj4*x1807*x1812))+((cj1*x1807*x1813))+((sj1*sj4*x1814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj4*x1805*x1807))+(((-1.0)*r20*x1809*x1812))+(((-1.0)*x1812*x1815))+(((-1.0)*cj4*x1807*x1810))+((cj4*x1810*x1814))+(((-1.0)*x1805*x1806))+((cj5*sj4*x1808))+((x1810*x1811))), ((((-1.0)*x1805*x1813*x1814))+((x1808*x1809))+(((-1.0)*cj3*x1805*x1811))+((cj1*x1815))+(((-1.0)*x1806*x1812))+(((-1.0)*sj4*x1807*x1812))+((cj1*x1807*x1813))+((sj1*sj4*x1814))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1816=IKcos(j2);
IkReal x1817=IKsin(j2);
IkReal x1818=((1.0)*cj3);
IkReal x1819=(cj4*cj5);
IkReal x1820=(cj5*sj3);
IkReal x1821=((1.0)*sj0);
IkReal x1822=(r00*sj5);
IkReal x1823=((0.001)*cj5);
IkReal x1824=((1.0)*cj0);
IkReal x1825=(cj5*sj4);
IkReal x1826=((1.0)*cj4);
IkReal x1827=((0.454)*sj1);
IkReal x1828=((0.4195)*sj0);
IkReal x1829=((0.001)*sj5);
IkReal x1830=((0.4195)*cj0);
IkReal x1831=((0.035)*sj0);
IkReal x1832=((0.035)*cj0);
IkReal x1833=(sj3*sj5);
IkReal x1834=(sj1*x1817);
IkReal x1835=(cj3*cj4*sj5);
IkReal x1836=(cj1*x1816);
IkReal x1837=((1.0)*sj4*sj5);
IkReal x1838=(cj1*x1817);
IkReal x1839=(sj1*x1816);
evalcond[0]=((((-1.0)*x1839))+(((-1.0)*x1838))+(((-1.0)*r21*x1837))+(((-1.0)*r22*x1826))+((r20*x1825)));
evalcond[1]=(((r00*x1825))+(((-1.0)*r01*x1837))+((cj0*x1836))+(((-1.0)*r02*x1826))+(((-1.0)*x1824*x1834)));
evalcond[2]=(((r10*x1825))+((sj0*x1836))+(((-1.0)*r12*x1826))+(((-1.0)*r11*x1837))+(((-1.0)*x1821*x1834)));
evalcond[3]=((((-1.0)*r22*sj4*x1818))+(((-1.0)*x1836))+((r21*x1835))+x1834+((r20*x1833))+((r21*x1820))+(((-1.0)*r20*x1818*x1819)));
evalcond[4]=((((0.035)*x1836))+(((0.454)*cj1))+(((-0.4195)*x1839))+(((-0.4195)*x1838))+(((-1.0)*pz))+((r21*x1823))+(((-0.035)*x1834))+((r20*x1829)));
evalcond[5]=(((r01*x1835))+((r01*x1820))+(((-1.0)*r00*x1818*x1819))+((sj3*x1822))+(((-1.0)*r02*sj4*x1818))+(((-1.0)*x1824*x1838))+(((-1.0)*x1824*x1839)));
evalcond[6]=(((r10*x1833))+(((-1.0)*r10*x1818*x1819))+(((-1.0)*r12*sj4*x1818))+((r11*x1835))+((r11*x1820))+(((-1.0)*x1821*x1839))+(((-1.0)*x1821*x1838)));
evalcond[7]=(((cj0*x1827))+((r01*x1823))+(((0.001)*sj0))+(((-1.0)*px))+((x1830*x1836))+((x1832*x1839))+((x1832*x1838))+(((0.025)*cj0))+(((0.001)*x1822))+(((-1.0)*x1830*x1834)));
evalcond[8]=(((r10*x1829))+(((-0.001)*cj0))+(((-1.0)*x1828*x1834))+(((-1.0)*py))+((x1831*x1838))+((x1831*x1839))+((sj0*x1827))+((r11*x1823))+((x1828*x1836))+(((0.025)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1840=((1.0)*sj0);
CheckValue<IkReal> x1841 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1840))+(((-1.0)*cj5*r21*x1840)))),IkReal((((cj4*cj5*r20*sj0))+((r22*sj0*sj4))+(((-1.0)*cj4*r21*sj5*x1840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1841.valid){
continue;
}
CheckValue<IkReal> x1842=IKPowWithIntegerCheck(IKsign((((cj5*r10*sj4))+(((-1.0)*r11*sj4*sj5))+(((-1.0)*cj4*r12)))),-1);
if(!x1842.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1841.value)+(((1.5707963267949)*(x1842.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1843=IKsin(j3);
IkReal x1844=IKcos(j3);
IkReal x1845=((1.0)*cj5);
IkReal x1846=(cj4*x1843);
IkReal x1847=((1.0)*sj5*x1844);
IkReal x1848=((1.0)*sj4*x1843);
evalcond[0]=((((-1.0)*r22*x1848))+((r21*sj5*x1846))+(((-1.0)*r20*x1845*x1846))+(((-1.0)*r20*x1847))+(((-1.0)*r21*x1844*x1845)));
evalcond[1]=(cj0+(((-1.0)*r11*x1844*x1845))+(((-1.0)*r10*x1847))+((r11*sj5*x1846))+(((-1.0)*r12*x1848))+(((-1.0)*r10*x1845*x1846)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x1847))+(((-1.0)*r02*x1848))+(((-1.0)*r00*x1845*x1846))+(((-1.0)*r01*x1844*x1845))+((r01*sj5*x1846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x1849=((1.816)*sj0);
IkReal x1850=((1.816)*cj0);
IkReal x1851=(cj0*sj5);
IkReal x1852=((0.012)*r20);
IkReal x1853=(cj5*r21);
IkReal x1854=((5.034)*sj4);
IkReal x1855=(cj5*r20);
IkReal x1856=((1.678)*cj0);
IkReal x1857=(cj4*r22);
IkReal x1858=((1.678)*sj0);
IkReal x1859=(sj0*sj5);
IkReal x1860=((0.004)*r20);
IkReal x1861=((0.14)*sj4);
IkReal x1862=(r11*sj5);
IkReal x1863=(cj5*r00);
IkReal x1864=((0.42)*sj4);
IkReal x1865=(cj4*r02);
IkReal x1866=(cj4*r12);
IkReal x1867=(r21*sj4);
IkReal x1868=(pz*sj0);
IkReal x1869=(cj0*pz);
IkReal x1870=((12.0)*x1868);
IkReal x1871=((0.42)*x1866);
IkReal x1872=((12.0)*x1869);
IkReal x1873=((0.42)*x1865);
IkReal x1874=(cj5*r10*sj4);
IkReal x1875=(r01*sj4*sj5);
IkReal x1876=(cj5*r10*x1864);
IkReal x1877=((0.012)*sj0*x1853);
IkReal x1878=(x1862*x1864);
IkReal x1879=((5.034)*sj0*x1857);
IkReal x1880=(x1852*x1859);
IkReal x1881=(x1863*x1864);
IkReal x1882=(r01*sj5*x1864);
IkReal x1883=((5.034)*cj0*x1857);
IkReal x1884=(x1851*x1852);
IkReal x1885=((0.012)*cj0*x1853);
IkReal x1886=(sj0*x1854*x1855);
IkReal x1887=(r21*x1854*x1859);
IkReal x1888=(cj0*x1854*x1855);
IkReal x1889=(r21*x1851*x1854);
IkReal x1890=(x1872+x1888+x1881);
IkReal x1891=(x1876+x1870+x1886);
IkReal x1892=(x1873+x1889+x1885+x1884+x1883+x1882);
IkReal x1893=(x1877+x1871+x1878+x1879+x1887+x1880);
j1eval[0]=((IKabs((x1850+x1890+(((-1.0)*x1892)))))+(IKabs(((((-1.0)*r01*sj5*x1861))+(((-1.0)*x1851*x1860))+(((4.0)*x1869))+(((-1.0)*x1856*x1857))+((sj4*x1855*x1856))+(((-0.004)*cj0*x1853))+x1850+(((-0.14)*x1865))+((x1861*x1863))+(((-1.678)*x1851*x1867)))))+(IKabs(((((-1.0)*x1849))+x1891+(((-1.0)*x1893)))))+(IKabs(((((-1.0)*sj5*x1858*x1867))+(((4.0)*x1868))+(((-1.0)*x1857*x1858))+((sj4*x1855*x1858))+x1849+((cj5*r10*x1861))+(((-1.0)*x1861*x1862))+(((-1.0)*x1859*x1860))+(((-0.14)*x1866))+(((-0.004)*sj0*x1853)))))+(IKabs((x1890+(((-1.0)*x1892))+(((-1.0)*x1850)))))+(IKabs((x1849+x1891+(((-1.0)*x1893))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x1894=((1.816)*cj0);
IkReal x1895=(cj0*sj5);
IkReal x1896=(r21*sj4);
IkReal x1897=(cj4*r02);
IkReal x1898=(cj0*pz);
IkReal x1899=((12.0)*x1898);
IkReal x1900=((0.42)*x1897);
IkReal x1901=((4.0)*x1898);
IkReal x1902=((0.14)*x1897);
IkReal x1903=(cj5*r00*sj4);
IkReal x1904=(cj0*cj4*r22);
IkReal x1905=(cj0*cj5*r21);
IkReal x1906=(r01*sj4*sj5);
IkReal x1907=((0.42)*x1903);
IkReal x1908=((0.42)*x1906);
IkReal x1909=((5.034)*x1904);
IkReal x1910=((0.012)*r20*x1895);
IkReal x1911=((0.012)*x1905);
IkReal x1912=((0.14)*x1903);
IkReal x1913=((0.004)*r20*x1895);
IkReal x1914=((0.14)*x1906);
IkReal x1915=((1.678)*x1904);
IkReal x1916=((0.004)*x1905);
IkReal x1917=(cj0*cj5*r20*sj4);
IkReal x1918=((5.034)*x1917);
IkReal x1919=((5.034)*x1895*x1896);
IkReal x1920=((1.678)*x1917);
IkReal x1921=((1.678)*x1895*x1896);
IkReal x1922=(x1920+x1901+x1912);
IkReal x1923=(x1907+x1918+x1899);
IkReal x1924=(x1908+x1909+x1900+x1919+x1911+x1910);
IkReal x1925=(x1921+x1902+x1913+x1915+x1914+x1916);
op[0]=((((-1.0)*x1925))+x1922+x1894);
op[1]=0;
op[2]=((((-1.0)*x1924))+x1923+x1894);
op[3]=0;
op[4]=((((-1.0)*x1924))+x1923+(((-1.0)*x1894)));
op[5]=0;
op[6]=((((-1.0)*x1925))+x1922+(((-1.0)*x1894)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x1926=((1.816)*sj0);
IkReal x1927=(cj5*sj0);
IkReal x1928=((5.034)*sj4);
IkReal x1929=(cj4*r12);
IkReal x1930=(pz*sj0);
IkReal x1931=((1.678)*sj4);
IkReal x1932=((4.0)*x1930);
IkReal x1933=((12.0)*x1930);
IkReal x1934=((0.42)*x1929);
IkReal x1935=((0.14)*x1929);
IkReal x1936=(cj5*r10*sj4);
IkReal x1937=(r20*sj0*sj5);
IkReal x1938=(r11*sj4*sj5);
IkReal x1939=(cj4*r22*sj0);
IkReal x1940=(r21*sj0*sj5);
IkReal x1941=((0.14)*x1936);
IkReal x1942=((0.42)*x1936);
IkReal x1943=((0.012)*r21*x1927);
IkReal x1944=((0.42)*x1938);
IkReal x1945=((5.034)*x1939);
IkReal x1946=((0.012)*x1937);
IkReal x1947=((1.678)*x1939);
IkReal x1948=((0.14)*x1938);
IkReal x1949=((0.004)*r21*x1927);
IkReal x1950=((0.004)*x1937);
IkReal x1951=(r20*x1927*x1931);
IkReal x1952=(r20*x1927*x1928);
IkReal x1953=(x1928*x1940);
IkReal x1954=(x1931*x1940);
IkReal x1955=(x1932+x1941+x1951);
IkReal x1956=(x1933+x1942+x1952);
IkReal x1957=(x1935+x1948+x1949+x1947+x1954+x1950);
IkReal x1958=(x1934+x1943+x1946+x1944+x1945+x1953);
j1evalpoly[0]=((((htj1*htj1)*(((((-1.0)*x1958))+(((-1.0)*x1926))+x1956))))+(((-1.0)*x1957))+(((-1.0)*x1926))+x1955+(((htj1*htj1*htj1*htj1)*(((((-1.0)*x1958))+x1926+x1956))))+(((htj1*htj1*htj1*htj1*htj1*htj1)*(((((-1.0)*x1957))+x1926+x1955)))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1959=((1.0)*cj1);
IkReal x1960=(cj4*r22);
IkReal x1961=(r21*sj5);
IkReal x1962=(cj1*r20);
IkReal x1963=(sj3*sj5);
IkReal x1964=(cj3*sj1);
IkReal x1965=(r22*sj4);
IkReal x1966=((1.0)*sj1);
IkReal x1967=(cj3*cj4);
IkReal x1968=(cj5*r20);
IkReal x1969=(cj5*r21*sj3);
if( IKabs(((((-1.0)*r20*x1963*x1966))+(((-1.0)*x1959*x1960))+((x1964*x1965))+(((-1.0)*x1966*x1969))+((cj4*x1964*x1968))+((cj5*sj4*x1962))+(((-1.0)*cj4*x1961*x1964))+(((-1.0)*sj4*x1959*x1961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj3*x1959*x1965))+((cj1*x1969))+((cj1*x1961*x1967))+((sj1*sj4*x1968))+(((-1.0)*x1959*x1967*x1968))+(((-1.0)*x1960*x1966))+((x1962*x1963))+(((-1.0)*sj4*x1961*x1966)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1963*x1966))+(((-1.0)*x1959*x1960))+((x1964*x1965))+(((-1.0)*x1966*x1969))+((cj4*x1964*x1968))+((cj5*sj4*x1962))+(((-1.0)*cj4*x1961*x1964))+(((-1.0)*sj4*x1959*x1961))))+IKsqr(((((-1.0)*cj3*x1959*x1965))+((cj1*x1969))+((cj1*x1961*x1967))+((sj1*sj4*x1968))+(((-1.0)*x1959*x1967*x1968))+(((-1.0)*x1960*x1966))+((x1962*x1963))+(((-1.0)*sj4*x1961*x1966))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1963*x1966))+(((-1.0)*x1959*x1960))+((x1964*x1965))+(((-1.0)*x1966*x1969))+((cj4*x1964*x1968))+((cj5*sj4*x1962))+(((-1.0)*cj4*x1961*x1964))+(((-1.0)*sj4*x1959*x1961))), ((((-1.0)*cj3*x1959*x1965))+((cj1*x1969))+((cj1*x1961*x1967))+((sj1*sj4*x1968))+(((-1.0)*x1959*x1967*x1968))+(((-1.0)*x1960*x1966))+((x1962*x1963))+(((-1.0)*sj4*x1961*x1966))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1970=IKcos(j2);
IkReal x1971=IKsin(j2);
IkReal x1972=((1.0)*cj3);
IkReal x1973=(cj4*cj5);
IkReal x1974=(cj5*sj3);
IkReal x1975=((1.0)*sj0);
IkReal x1976=(r00*sj5);
IkReal x1977=((0.001)*cj5);
IkReal x1978=((1.0)*cj0);
IkReal x1979=(cj5*sj4);
IkReal x1980=((1.0)*cj4);
IkReal x1981=((0.454)*sj1);
IkReal x1982=((0.4195)*sj0);
IkReal x1983=((0.001)*sj5);
IkReal x1984=((0.4195)*cj0);
IkReal x1985=((0.035)*sj0);
IkReal x1986=((0.035)*cj0);
IkReal x1987=(sj3*sj5);
IkReal x1988=(sj1*x1971);
IkReal x1989=(cj3*cj4*sj5);
IkReal x1990=(cj1*x1970);
IkReal x1991=((1.0)*sj4*sj5);
IkReal x1992=(cj1*x1971);
IkReal x1993=(sj1*x1970);
evalcond[0]=((((-1.0)*r21*x1991))+((r20*x1979))+(((-1.0)*x1993))+(((-1.0)*x1992))+(((-1.0)*r22*x1980)));
evalcond[1]=(((cj0*x1990))+(((-1.0)*r02*x1980))+(((-1.0)*r01*x1991))+((r00*x1979))+(((-1.0)*x1978*x1988)));
evalcond[2]=(((sj0*x1990))+((r10*x1979))+(((-1.0)*x1975*x1988))+(((-1.0)*r12*x1980))+(((-1.0)*r11*x1991)));
evalcond[3]=((((-1.0)*r22*sj4*x1972))+((r21*x1989))+((r21*x1974))+x1988+(((-1.0)*r20*x1972*x1973))+(((-1.0)*x1990))+((r20*x1987)));
evalcond[4]=((((0.454)*cj1))+(((-0.4195)*x1992))+(((-0.4195)*x1993))+((r21*x1977))+(((-1.0)*pz))+(((-0.035)*x1988))+(((0.035)*x1990))+((r20*x1983)));
evalcond[5]=(((sj3*x1976))+(((-1.0)*r00*x1972*x1973))+((r01*x1989))+((r01*x1974))+(((-1.0)*r02*sj4*x1972))+(((-1.0)*x1978*x1993))+(((-1.0)*x1978*x1992)));
evalcond[6]=((((-1.0)*r10*x1972*x1973))+((r11*x1974))+((r11*x1989))+((r10*x1987))+(((-1.0)*r12*sj4*x1972))+(((-1.0)*x1975*x1993))+(((-1.0)*x1975*x1992)));
evalcond[7]=((((0.001)*x1976))+(((-1.0)*x1984*x1988))+((x1986*x1992))+((x1986*x1993))+(((0.001)*sj0))+(((-1.0)*px))+((r01*x1977))+(((0.025)*cj0))+((x1984*x1990))+((cj0*x1981)));
evalcond[8]=((((-0.001)*cj0))+((r11*x1977))+((r10*x1983))+((sj0*x1981))+(((-1.0)*py))+((x1982*x1990))+(((-1.0)*x1982*x1988))+((x1985*x1993))+((x1985*x1992))+(((0.025)*sj0)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1994=((1.0)*cj0);
CheckValue<IkReal> x1995 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj5*x1994))+(((-1.0)*cj5*r21*x1994)))),IkReal(((((-1.0)*cj4*r21*sj5*x1994))+((cj0*cj4*cj5*r20))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1995.valid){
continue;
}
CheckValue<IkReal> x1996=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+((cj5*r00*sj4))+(((-1.0)*r01*sj4*sj5)))),-1);
if(!x1996.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1995.value)+(((1.5707963267949)*(x1996.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1997=IKsin(j3);
IkReal x1998=IKcos(j3);
IkReal x1999=((1.0)*cj5);
IkReal x2000=(cj4*x1997);
IkReal x2001=((1.0)*sj5*x1998);
IkReal x2002=((1.0)*sj4*x1997);
evalcond[0]=((((-1.0)*r22*x2002))+((r21*sj5*x2000))+(((-1.0)*r21*x1998*x1999))+(((-1.0)*r20*x1999*x2000))+(((-1.0)*r20*x2001)));
evalcond[1]=(((r11*sj5*x2000))+cj0+(((-1.0)*r12*x2002))+(((-1.0)*r10*x2001))+(((-1.0)*r10*x1999*x2000))+(((-1.0)*r11*x1998*x1999)));
evalcond[2]=((((-1.0)*r00*x1999*x2000))+(((-1.0)*sj0))+(((-1.0)*r00*x2001))+(((-1.0)*r02*x2002))+(((-1.0)*r01*x1998*x1999))+((r01*sj5*x2000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
IkReal x2003=((1.816)*sj0);
IkReal x2004=((1.816)*cj0);
IkReal x2005=(cj0*sj5);
IkReal x2006=((0.012)*r20);
IkReal x2007=(cj5*r21);
IkReal x2008=((5.034)*sj4);
IkReal x2009=(cj5*r20);
IkReal x2010=((1.678)*cj0);
IkReal x2011=(cj4*r22);
IkReal x2012=((1.678)*sj0);
IkReal x2013=(sj0*sj5);
IkReal x2014=((0.004)*r20);
IkReal x2015=((0.14)*sj4);
IkReal x2016=(r11*sj5);
IkReal x2017=(cj5*r00);
IkReal x2018=((0.42)*sj4);
IkReal x2019=(cj4*r02);
IkReal x2020=(cj4*r12);
IkReal x2021=(r21*sj4);
IkReal x2022=(pz*sj0);
IkReal x2023=(cj0*pz);
IkReal x2024=((12.0)*x2022);
IkReal x2025=((0.42)*x2020);
IkReal x2026=((12.0)*x2023);
IkReal x2027=((0.42)*x2019);
IkReal x2028=(cj5*r10*sj4);
IkReal x2029=(r01*sj4*sj5);
IkReal x2030=(cj5*r10*x2018);
IkReal x2031=((0.012)*sj0*x2007);
IkReal x2032=(x2016*x2018);
IkReal x2033=((5.034)*sj0*x2011);
IkReal x2034=(x2006*x2013);
IkReal x2035=(x2017*x2018);
IkReal x2036=(r01*sj5*x2018);
IkReal x2037=((5.034)*cj0*x2011);
IkReal x2038=(x2005*x2006);
IkReal x2039=((0.012)*cj0*x2007);
IkReal x2040=(sj0*x2008*x2009);
IkReal x2041=(r21*x2008*x2013);
IkReal x2042=(cj0*x2008*x2009);
IkReal x2043=(r21*x2005*x2008);
IkReal x2044=(x2042+x2026+x2035);
IkReal x2045=(x2040+x2024+x2030);
IkReal x2046=(x2043+x2027+x2037+x2036+x2039+x2038);
IkReal x2047=(x2041+x2025+x2034+x2033+x2032+x2031);
j1eval[0]=((IKabs(((((-1.0)*x2047))+x2045+x2003)))+(IKabs(((((-1.0)*x2046))+x2044+x2004)))+(IKabs(((((-1.0)*x2046))+x2044+(((-1.0)*x2004)))))+(IKabs(((((-0.004)*sj0*x2007))+(((4.0)*x2022))+(((-1.0)*x2013*x2014))+(((-1.0)*sj5*x2012*x2021))+x2003+((sj4*x2009*x2012))+(((-0.14)*x2020))+(((-1.0)*x2015*x2016))+((cj5*r10*x2015))+(((-1.0)*x2011*x2012)))))+(IKabs(((((-1.0)*x2047))+x2045+(((-1.0)*x2003)))))+(IKabs(((((-0.14)*x2019))+(((4.0)*x2023))+(((-1.0)*x2010*x2011))+((x2015*x2017))+x2004+((sj4*x2009*x2010))+(((-1.0)*x2005*x2014))+(((-0.004)*cj0*x2007))+(((-1.0)*r01*sj5*x2015))+(((-1.678)*x2005*x2021))))));
if( IKabs(j1eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j1, j2]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j1evalpoly[1];
IkReal x2048=((1.816)*cj0);
IkReal x2049=(cj0*sj5);
IkReal x2050=(r21*sj4);
IkReal x2051=(cj4*r02);
IkReal x2052=(cj0*pz);
IkReal x2053=((12.0)*x2052);
IkReal x2054=((0.42)*x2051);
IkReal x2055=((4.0)*x2052);
IkReal x2056=((0.14)*x2051);
IkReal x2057=(cj5*r00*sj4);
IkReal x2058=(cj0*cj4*r22);
IkReal x2059=(cj0*cj5*r21);
IkReal x2060=(r01*sj4*sj5);
IkReal x2061=((0.42)*x2057);
IkReal x2062=((0.42)*x2060);
IkReal x2063=((5.034)*x2058);
IkReal x2064=((0.012)*r20*x2049);
IkReal x2065=((0.012)*x2059);
IkReal x2066=((0.14)*x2057);
IkReal x2067=((0.004)*r20*x2049);
IkReal x2068=((0.14)*x2060);
IkReal x2069=((1.678)*x2058);
IkReal x2070=((0.004)*x2059);
IkReal x2071=(cj0*cj5*r20*sj4);
IkReal x2072=((5.034)*x2071);
IkReal x2073=((5.034)*x2049*x2050);
IkReal x2074=((1.678)*x2071);
IkReal x2075=((1.678)*x2049*x2050);
IkReal x2076=(x2066+x2074+x2055);
IkReal x2077=(x2061+x2072+x2053);
IkReal x2078=(x2062+x2063+x2064+x2065+x2073+x2054);
IkReal x2079=(x2068+x2069+x2067+x2070+x2075+x2056);
op[0]=(x2076+x2048+(((-1.0)*x2079)));
op[1]=0;
op[2]=(x2077+x2048+(((-1.0)*x2078)));
op[3]=0;
op[4]=((((-1.0)*x2048))+x2077+(((-1.0)*x2078)));
op[5]=0;
op[6]=((((-1.0)*x2048))+x2076+(((-1.0)*x2079)));
polyroots6(op,zeror,numroots);
IkReal j1array[6], cj1array[6], sj1array[6], tempj1array[1];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ++ij1)
{
IkReal htj1 = zeror[ij1];
tempj1array[0]=((2.0)*(atan(htj1)));
for(int kj1 = 0; kj1 < 1; ++kj1)
{
j1array[numsolutions] = tempj1array[kj1];
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
numsolutions++;
}
}
bool j1valid[6]={true,true,true,true,true,true};
_nj1 = 6;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
htj1 = IKtan(j1/2);

IkReal x2080=((1.816)*sj0);
IkReal x2081=(cj5*sj0);
IkReal x2082=((5.034)*sj4);
IkReal x2083=(cj4*r12);
IkReal x2084=(pz*sj0);
IkReal x2085=((1.678)*sj4);
IkReal x2086=((4.0)*x2084);
IkReal x2087=((12.0)*x2084);
IkReal x2088=((0.42)*x2083);
IkReal x2089=((0.14)*x2083);
IkReal x2090=(cj5*r10*sj4);
IkReal x2091=(r20*sj0*sj5);
IkReal x2092=(r11*sj4*sj5);
IkReal x2093=(cj4*r22*sj0);
IkReal x2094=(r21*sj0*sj5);
IkReal x2095=((0.14)*x2090);
IkReal x2096=((0.42)*x2090);
IkReal x2097=((0.012)*r21*x2081);
IkReal x2098=((0.42)*x2092);
IkReal x2099=((5.034)*x2093);
IkReal x2100=((0.012)*x2091);
IkReal x2101=((1.678)*x2093);
IkReal x2102=((0.14)*x2092);
IkReal x2103=((0.004)*r21*x2081);
IkReal x2104=((0.004)*x2091);
IkReal x2105=(r20*x2081*x2085);
IkReal x2106=(r20*x2081*x2082);
IkReal x2107=(x2082*x2094);
IkReal x2108=(x2085*x2094);
IkReal x2109=(x2095+x2086+x2105);
IkReal x2110=(x2096+x2087+x2106);
IkReal x2111=(x2089+x2108+x2103+x2102+x2101+x2104);
IkReal x2112=(x2097+x2099+x2098+x2088+x2100+x2107);
j1evalpoly[0]=((((-1.0)*x2080))+x2109+(((htj1*htj1)*(((((-1.0)*x2080))+x2110+(((-1.0)*x2112))))))+(((-1.0)*x2111))+(((htj1*htj1*htj1*htj1*htj1*htj1)*((x2080+x2109+(((-1.0)*x2111))))))+(((htj1*htj1*htj1*htj1)*((x2080+x2110+(((-1.0)*x2112)))))));
if( IKabs(j1evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2113=((1.0)*cj1);
IkReal x2114=(cj4*r22);
IkReal x2115=(r21*sj5);
IkReal x2116=(cj1*r20);
IkReal x2117=(sj3*sj5);
IkReal x2118=(cj3*sj1);
IkReal x2119=(r22*sj4);
IkReal x2120=((1.0)*sj1);
IkReal x2121=(cj3*cj4);
IkReal x2122=(cj5*r20);
IkReal x2123=(cj5*r21*sj3);
if( IKabs((((cj5*sj4*x2116))+(((-1.0)*cj4*x2115*x2118))+(((-1.0)*x2120*x2123))+((x2118*x2119))+((cj4*x2118*x2122))+(((-1.0)*sj4*x2113*x2115))+(((-1.0)*r20*x2117*x2120))+(((-1.0)*x2113*x2114)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2116*x2117))+((cj1*x2115*x2121))+((cj1*x2123))+(((-1.0)*x2114*x2120))+(((-1.0)*cj3*x2113*x2119))+(((-1.0)*sj4*x2115*x2120))+((sj1*sj4*x2122))+(((-1.0)*x2113*x2121*x2122)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*sj4*x2116))+(((-1.0)*cj4*x2115*x2118))+(((-1.0)*x2120*x2123))+((x2118*x2119))+((cj4*x2118*x2122))+(((-1.0)*sj4*x2113*x2115))+(((-1.0)*r20*x2117*x2120))+(((-1.0)*x2113*x2114))))+IKsqr((((x2116*x2117))+((cj1*x2115*x2121))+((cj1*x2123))+(((-1.0)*x2114*x2120))+(((-1.0)*cj3*x2113*x2119))+(((-1.0)*sj4*x2115*x2120))+((sj1*sj4*x2122))+(((-1.0)*x2113*x2121*x2122))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj5*sj4*x2116))+(((-1.0)*cj4*x2115*x2118))+(((-1.0)*x2120*x2123))+((x2118*x2119))+((cj4*x2118*x2122))+(((-1.0)*sj4*x2113*x2115))+(((-1.0)*r20*x2117*x2120))+(((-1.0)*x2113*x2114))), (((x2116*x2117))+((cj1*x2115*x2121))+((cj1*x2123))+(((-1.0)*x2114*x2120))+(((-1.0)*cj3*x2113*x2119))+(((-1.0)*sj4*x2115*x2120))+((sj1*sj4*x2122))+(((-1.0)*x2113*x2121*x2122))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2124=IKcos(j2);
IkReal x2125=IKsin(j2);
IkReal x2126=((1.0)*cj3);
IkReal x2127=(cj4*cj5);
IkReal x2128=(cj5*sj3);
IkReal x2129=((1.0)*sj0);
IkReal x2130=(r00*sj5);
IkReal x2131=((0.001)*cj5);
IkReal x2132=((1.0)*cj0);
IkReal x2133=(cj5*sj4);
IkReal x2134=((1.0)*cj4);
IkReal x2135=((0.454)*sj1);
IkReal x2136=((0.4195)*sj0);
IkReal x2137=((0.001)*sj5);
IkReal x2138=((0.4195)*cj0);
IkReal x2139=((0.035)*sj0);
IkReal x2140=((0.035)*cj0);
IkReal x2141=(sj3*sj5);
IkReal x2142=(sj1*x2125);
IkReal x2143=(cj3*cj4*sj5);
IkReal x2144=(cj1*x2124);
IkReal x2145=((1.0)*sj4*sj5);
IkReal x2146=(cj1*x2125);
IkReal x2147=(sj1*x2124);
evalcond[0]=((((-1.0)*r22*x2134))+(((-1.0)*x2147))+(((-1.0)*x2146))+(((-1.0)*r21*x2145))+((r20*x2133)));
evalcond[1]=((((-1.0)*r01*x2145))+(((-1.0)*x2132*x2142))+((cj0*x2144))+((r00*x2133))+(((-1.0)*r02*x2134)));
evalcond[2]=((((-1.0)*x2129*x2142))+(((-1.0)*r12*x2134))+((sj0*x2144))+(((-1.0)*r11*x2145))+((r10*x2133)));
evalcond[3]=((((-1.0)*x2144))+(((-1.0)*r22*sj4*x2126))+((r20*x2141))+x2142+((r21*x2128))+(((-1.0)*r20*x2126*x2127))+((r21*x2143)));
evalcond[4]=(((r21*x2131))+(((0.454)*cj1))+(((0.035)*x2144))+(((-1.0)*pz))+(((-0.4195)*x2146))+(((-0.4195)*x2147))+(((-0.035)*x2142))+((r20*x2137)));
evalcond[5]=((((-1.0)*x2132*x2147))+(((-1.0)*x2132*x2146))+((r01*x2143))+((sj3*x2130))+((r01*x2128))+(((-1.0)*r02*sj4*x2126))+(((-1.0)*r00*x2126*x2127)));
evalcond[6]=((((-1.0)*x2129*x2146))+(((-1.0)*x2129*x2147))+((r11*x2143))+(((-1.0)*r10*x2126*x2127))+(((-1.0)*r12*sj4*x2126))+((r11*x2128))+((r10*x2141)));
evalcond[7]=(((x2138*x2144))+(((-1.0)*x2138*x2142))+((cj0*x2135))+((r01*x2131))+(((0.001)*sj0))+(((-1.0)*px))+((x2140*x2146))+((x2140*x2147))+(((0.025)*cj0))+(((0.001)*x2130)));
evalcond[8]=((((-1.0)*x2136*x2142))+(((-0.001)*cj0))+((r11*x2131))+(((-1.0)*py))+((r10*x2137))+((x2136*x2144))+((sj0*x2135))+(((0.025)*sj0))+((x2139*x2146))+((x2139*x2147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "71e1c993d1de6b94c4acc07215f7fcc4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
